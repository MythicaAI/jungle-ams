name: push-tagged-images
on:
  push: # only run when PR merged to main
    branches:
      - 'main'
      # - '**'  # enable for testing
    paths:
      - 'api/**'
      - 'apps/**'
      - 'automations/**'
      - 'bulk-import/**'
      - 'canary/**'
      - 'libs/**'
      - 'test-worker/**'
      - '.github/workflows/push-tagged-images.yaml'
      - 'github/get-dockerfile-tag.sh'

  workflow_dispatch:
jobs:
  changes:
    concurrency:
      group: push-tagged-images
      cancel-in-progress: false

    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write

    outputs:
      images: ${{ steps.post_filter.outputs.changes }}
      has_changes: ${{ steps.post_filter.outputs.has_changes }}
    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: filter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # setup all the filters to match Dockerfile locations
          filters: |
            api/:
              - 'libs/python/**'
              - 'ams/app/**'
              - '.github/workflows/push-tagged-images.yaml' # always build at least one image if the workflow changes
            apps/:
              - 'apps/**'
            automations/houdini/:
              - 'libs/python/**'
              - 'automations/houdini/**'
            automations/blender/:
              - 'libs/python/**'
              - 'automations/blender/**'
            automations/imagemagick/:
              - 'libs/python/**'
              - 'automations/imagemagick/**'
            bulk-import/:
              - 'bulk-import/**'
            canary/:
              - 'ams/canary/**'
            test-worker/:
              - 'libs/python/**'

      # Set matrix based on filter results or use all images for manual trigger
      - id: post_filter
        uses: actions/github-script@v6
        with:
          script: |
            const isManualTrigger = context.eventName === 'workflow_dispatch';
            const allImages = [
              "api/",
              "apps/",
              "automations/houdini/",
              "automations/blender/",
              "automations/imagemagick/",
              "bulk-import/",
              "canary/",
              "test-worker/" ];
            
            let changes;
            try {
              changes = JSON.parse('${{ steps.filter.outputs.changes }}');
            } catch (e) {
              changes = [];
              console.log('Error parsing changes or empty changes array:', e);
            }
            
            if (isManualTrigger) {
              // For manual trigger, use all images
              console.log('Manual trigger detected, building all images');
              core.setOutput('changes', JSON.stringify(allImages));
              core.setOutput('has_changes', 'true');
            } else {
              // For automatic trigger, use filtered changes
              const hasChanges = Array.isArray(changes) && changes.length > 0;
            
              console.log('Changes detected:', hasChanges ? 'yes' : 'no');
              core.setOutput('changes', JSON.stringify(changes));
              core.setOutput('has_changes', hasChanges ? 'true' : 'false');
            }

  build-tag-publish:
    runs-on: ubuntu-latest
    environment: main
    needs:
      - changes
    if: needs.changes.outputs.has_changes == 'true'
    permissions:
      repository-projects: read
      pull-requests: write
      id-token: write
      contents: write

    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.changes.outputs.images) }}

    env:
      IMAGE_NAME: "${{ matrix.image }}"
      NODE_ENV: "staging"
      REPO: jrepp/jungle-ams
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Fetch tags
        run: git fetch --prune --unshallow --tags

      - name: Setup Docker BuildX
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker

      - name: Login to Artifact Registry
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate tag
        id: generate_tag
        run: |
          github/get-dockerfile-tag.sh ${{ matrix.image }} >> $GITHUB_OUTPUT

      - name: Build and push ${{ matrix.image }}
        id: build_push
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ${{ matrix.image }}
          file: ${{ matrix.image }}/Dockerfile
          tags: |
            ${{ env.REPO }}:${{ steps.generate_tag.outputs.image_name }}-${{ steps.generate_tag.outputs.new_tag_version }}
            ${{ env.REPO }}:${{ steps.generate_tag.outputs.image_name }}-${{ steps.generate_tag.outputs.new_tag_version }}
            ${{ env.REPO }}:${{ steps.generate_tag.outputs.image_name }}-${{ steps.generate_tag.outputs.new_tag_version }}
          build-args: |
            NODE_ENV=${{ env.NODE_ENV }}
          load: true

      - name: Push tag
        uses: nick-fields/retry@v3
        with:
          max_attempts: 3
          retry_on: error
          timeout_seconds: 10
          command: |
            git tag ${{ steps.generate_tag.outputs.new_tag }}
            git push origin ${{ steps.generate_tag.outputs.new_tag }}
            echo "## Tagged image ${{ matrix.image }} as ${{ steps.generate_tag.outputs.new_tag }}" > $GITHUB_STEP_SUMMARY


      - name: Send Discord notification
        if: always()
        run: |
          echo "{ \"content\": \"" > message.json
          echo "${{ github.event.pull_request.title }}\n" >> message.json
          echo "IMAGE=${{ steps.generate_tag.outputs.image_name }}:${{ steps.generate_tag.outputs.new_tag_version }}\n" >> message.json
          echo IMAGE=${{ steps.generate_tag.outputs.image_name }}:${{ steps.generate_tag.outputs.new_tag_version }} >> $GITHUB_ENV
          if [ "${{ steps.build_push.outcome }}" == "failure" ]; then
              echo "❌ $IMAGE build failed, see: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> message.json
          else
              echo "✅ $IMAGE is now available for testing at https://api-staging.mythica.gg" >> message.json
          fi
          echo "\" }" >> message.json
          curl -X POST ${{ secrets.DISCORD_INFRA_NOTIFICATIONS_WEBOOK }} \
               -H "Content-Type: application/json" \
               --data @message.json
