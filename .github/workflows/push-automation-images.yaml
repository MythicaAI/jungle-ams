name: push-automation-images
on:
  push:
    paths:
      - '.github/workflows/push-automation-images.yaml'
  pull_request:
    types:
      - closed
    paths:
      - 'automation/**'
      - 'libs/python/**'
      - '.github/workflows/push-automation-images.yaml'
jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write

    outputs:
      images: ${{ steps.filter.outputs.changes }}
    steps:
      - uses: actions/checkout@v4

      - uses: dorny/paths-filter@v3
        id: filter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # setup all the filters to match Dockerfile locations
          filters: |
            automation/test/:
              - 'libs/python/**'
              - '.github/workflows/push-automation-images.yaml' # always build at least one image if the workflow changes
            automation/houdini/:
              - 'libs/python/**'
              - 'automation/houdini/**'
            automation/blender/:
              - 'libs/python/**'
              - 'automation/blender/**'
            automation/imagemagick/:
              - 'libs/python/**'
              - 'automation/imagemagick/**'

  build_libs_python:
    needs:
      - changes
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build libs-python image
        uses: docker/build-push-action@v5
        with:
          context: libs/python
          tags: libs-python:${{ github.sha }}
          load: true

      - name: Save libs-python to tar
        run: |
          docker save libs-python:${{ github.sha }} > /tmp/libs-python-${{ github.sha }}.tar

      - name: Upload libs-python image
        uses: actions/upload-artifact@v4
        with:
          name: libs-python-${{ github.sha }}
          path: /tmp/libs-python-${{ github.sha }}.tar
          retention-days: 1
          overwrite: true

  build:
    runs-on: ubuntu-latest
    needs:
      - changes
      - build_libs_python
    permissions:
      repository-projects: read
      pull-requests: write
      id-token: write
      contents: write

    strategy:
      fail-fast: false
      matrix:
        image: ${{ fromJson(needs.changes.outputs.images) }}

    env:
      IMAGE_NAME: "${{ matrix.image }}"
      NODE_ENV: "staging"
      PROJECT_ID: "296075347103"
      AR_REPO_LOCATION: 'us-central1'
      AR_URL: 'us-central1-docker.pkg.dev/controlnet-407314/gke-us-central1-images'
      SERVICE_ACCOUNT: 'github-actions-service-account@controlnet-407314.iam.gserviceaccount.com'
      WORKLOAD_IDENTITY_PROVIDER: 'projects/296075347103/locations/global/workloadIdentityPools/gh-infra-pool/providers/github-mythica-infra'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Fetch tags
        run: git fetch --prune --unshallow --tags

      - name: Setup Docker BuildX
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker

      - name: Google Auth
        id: auth
        uses: google-github-actions/auth@v2
        with:
          token_format: 'access_token'
          project_id: ${{ env.PROJECT_ID }}
          service_account: ${{ env.SERVICE_ACCOUNT }}
          workload_identity_provider: ${{ env.WORKLOAD_IDENTITY_PROVIDER }}

      - name: Login to Artifact Registry
        uses: docker/login-action@v3
        with:
          registry: '${{ env.AR_REPO_LOCATION }}-docker.pkg.dev'
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Generate tag
        id: generate_tag
        run: |
          github/tagging/get-dockerfile-tag.sh ${{ matrix.image }} >> $GITHUB_OUTPUT

      - name: Push tag
        uses: nick-fields/retry@v3
        with:
          max_attempts: 3
          retry_on: error
          timeout_seconds: 10
          command: |
            git tag ${{ steps.generate_tag.outputs.new_tag }}
            git push origin ${{ steps.generate_tag.outputs.new_tag }}
            echo "## Tagged image ${{ matrix.image }} as ${{ steps.generate_tag.outputs.new_tag }}" > $GITHUB_STEP_SUMMARY

      - name: Download libs-python image
        uses: actions/download-artifact@v4
        with:
          name: libs-python-${{ github.sha }}
          path: /tmp

      - name: Load libs-python image
        run: |
          docker load --input /tmp/libs-python-${{ github.sha }}.tar

      - name: Build and push ${{ matrix.image }}
        id: build_push
        uses: docker/build-push-action@v6
        with:
          push: true
          context: ${{ matrix.image }}
          file: ${{ matrix.image }}/Dockerfile
          tags: |
            ${{ env.AR_URL }}/${{ steps.generate_tag.outputs.image_name }}:${{ steps.generate_tag.outputs.new_tag_version }}
          build-args: |
            NODE_ENV=${{ env.NODE_ENV }}
            LIBS_PYTHON_IMAGE=libs-python:${{ github.sha }}
          load: true

      - name: Send Discord notification
        if: always()
        run: |
          echo "{ \"content\": \"" > message.json
          echo "${{ github.event.pull_request.title }}\n" >> message.json
          echo "IMAGE=${{ steps.generate_tag.outputs.image_name }}:${{ steps.generate_tag.outputs.new_tag_version }}\n" >> message.json
          echo IMAGE=${{ steps.generate_tag.outputs.image_name }}:${{ steps.generate_tag.outputs.new_tag_version }} >> $GITHUB_ENV
          if [ "${{ steps.build_push.outcome }}" == "failure" ]; then
              echo "❌ $IMAGE build failed, see: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> message.json
          else
              echo "✅ $IMAGE is now available for testing at https://api-staging.mythica.gg" >> message.json
          fi
          echo "\" }" >> message.json
          curl -X POST ${{ secrets.DISCORD_INFRA_NOTIFICATIONS_WEBOOK }} \
               -H "Content-Type: application/json" \
               --data @message.json
