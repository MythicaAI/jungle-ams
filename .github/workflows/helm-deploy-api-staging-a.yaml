name: helm-deploy-api-staging-a

on:
  # trigger helm deploy when new images are available
  workflow_run:
    workflows: [ "push-tagged-images" ]
    types:
      - completed

  # trigger helm deploy when the helm or gha config changes
  push:
    branches:
      - '**'
    paths:
      - 'workloads/helm/**'
      - '.github/workflows/helm-deploy-api-staging-a.yaml'

  # manual dispatch for installing helm
  workflow_dispatch:
    inputs:
      install:
        description: 'install helm chart'
        required: true
        default: 'false'
        type: boolean

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    working-directory: .

jobs:
  helm-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    env:
      NODE_ENV: "staging"
      KUBECONFIG: /tmp/kubeconfig
      KUBECA: /tmp/kube-ca.crt
      HELM_KUBECAFILE: /tmp/kube-ca.crt
    steps:
      - name: TS_OAUTH_SECRET
        run: |
          echo "DO_INSTALL=${{ github.event.inputs.install || 'true' }}" >> "$GITHUB_ENV"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Fetch tags
        run: git fetch --prune --unshallow --tags

      - name: Generate values file for image tags
        run: |
          workloads/helm/api/helm-gen-values-images.sh

      - name: Tailscale Auth
        id: tailscale-auth
        uses: tailscale/github-action@v3
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_MYTHICA_A }}" | base64 -d > $KUBECONFIG
          echo "${{ secrets.KUBE_CA_MYTHICA_A }}" | base64 -d > $KUBECA

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Install Helm Chart
        if: ${{ env.DO_INSTALL == 'true' }}
        working-directory: workloads/helm
        run: |
          kubectl apply -f <(echo "apiVersion: v1
            kind: Namespace
            metadata:
              name: api-staging")
          helm install --namespace api-staging -f api/values-staging-a.yaml -f api/values-images.yaml api-staging api
          echo "## Installed image versions" >> $GITHUB_STEP_SUMMARY
          cat ./api/values-images.yaml >> $GITHUB_STEP_SUMMARY
          helm install otel-release-k8s-infra ./otel -f ./otel/values.yaml -n default

      - name: Upgrade Helm Chart
        if: ${{ env.DO_INSTALL == 'false' }}
        working-directory: workloads/helm
        run: |
          helm upgrade --namespace api-staging -f api/values-staging-a.yaml -f api/values-images.yaml api-staging api
          echo "## Installed image versions" >> $GITHUB_STEP_SUMMARY
          cat ./api/values-images.yaml >> $GITHUB_STEP_SUMMARY
          helm upgrade otel-release-k8s-infra ./otel -f ./otel/values.yaml -n default
            - name: Deploy Helm Chart
    
      - name: Rollout deployments
        run: |
          RESTART="kubectl --certificate-authority $KUBECA rollout restart"
          $RESTART deployment/otel-agent -n default
          $RESTART deployment/otel-collector -n default
          $RESTART deployment/app -n api-staging
          $RESTART deployment/packager -n api-staging
          $RESTART deployment/lets-encrypt -n api-staging
          $RESTART deployment/gcs-proxy -n api-staging
          $RESTART deployment/web-front -n api-staging
          $RESTART deployment/canary -n api-staging
