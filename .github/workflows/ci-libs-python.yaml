name: ci-libs-python

on:
  push:
    branches:
      - '**'
    paths:
      - 'libs/python/**'
      - '.github/workflows/ci-libs-python.yaml'
  pull_request:
    branches:
      - '**'
    paths:
      - 'libs/**'
      - '.github/workflows/ci-libs-python.yaml'

jobs:
  changes:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write

    outputs:
      libraries: ${{ steps.post_filter.outputs.changes }}
      has_changes: ${{ steps.post_filter.outputs.has_changes }}
    steps:
      - uses: actions/checkout@v4

      - id: filter
        uses: dorny/paths-filter@v3
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          filters: |
            libs/python/cryptid:
              - 'libs/python/cryptid/**'
            libs/python/ripple:
              - 'libs/python/ripple/**'

      # Set matrix based on filter results or use all images for manual trigger
      - id: post_filter
        uses: actions/github-script@v6
        with:
          script: |
            const isManualTrigger = context.eventName === 'workflow_dispatch';
            const allLibs = [
              "libs/python/cryptid/",
              "libs/python/ripple/" ];
            
            let changes;
            try {
              changes = JSON.parse('${{ steps.filter.outputs.changes }}');
            } catch (e) {
              changes = [];
              console.log('Error parsing changes or empty changes array:', e);
            }
            
            if (isManualTrigger) {
              // For manual trigger, use all libraries
              console.log('Manual trigger detected, testing all libraries');
              core.setOutput('changes', JSON.stringify(allLibs));
              core.setOutput('has_changes', 'true');
            } else {
              // For automatic trigger, use filtered changes
              const hasChanges = Array.isArray(changes) && changes.length > 0;
              console.log('Changes detected:', hasChanges ? 'yes' : 'no');
              core.setOutput('changes', JSON.stringify(changes));
              core.setOutput('has_changes', hasChanges ? 'true' : 'false');
            }

  build-and-test:
    needs: changes
    if: needs.changes.outputs.has_changes == 'true'
    permissions:
      contents: read
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        library: ${{ fromJson(needs.changes.outputs.libraries) }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      - name: install-poetry-deps
        working-directory: ${{ matrix.library }}
        run: |
          python -m pip install --upgrade pip poetry
          poetry install --with=dev --no-root

      - id: lint-flake8
        working-directory: ${{ matrix.library }}
        run: |
          poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Generate coverage
        working-directory: ${{ matrix.library }}
        run: |
          poetry run pytest --timeout=10 --cov --cov-report=xml --junitxml=junit.xml -o junit_family=legacy
        shell: bash

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
