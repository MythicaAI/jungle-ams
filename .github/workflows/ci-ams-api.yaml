name: ci-ams-api

on:
  pull_request:
    branches:
      - '**'
    paths:
      - 'api/**'
      - 'libs/python/**'
      - '.github/workflows/ci-ams-api.yaml'
  push:
    branches:
      - '**'
    paths:
      - 'api/**'
      - 'libs/python/**'
      - '.github/workflows/ci-ams-api.yaml'

defaults:
  run:
    working-directory: api

jobs:
  ci-ams-api:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write

    env:
      SQL_URL: "sqlite+aiosqlite:///${{ github.workspace }}/mythica.db"
      DATABASE_PATH: "${{ github.workspace }}/mythica.db"
      PYTHONPATH: "${{ github.workspace }}/ams"
      UPLOAD_FOLDER_AUTO_CLEAN: false
      LOCAL_STORAGE_PATH: /tmp/local_storage
      USE_LOCAL_STORAGE: true
      TEST_FAIL_RATE: 81

    steps:
      - uses: actions/checkout@v4

      - uses: 8BitJonny/gh-get-current-pr@3.0.0
        id: PR
        with:
          sha: ${{ github.event.pull_request.head.sha }}

      - uses: actions/setup-python@v5
        if: ${{ steps.PR.outputs.number != null }}
        with:
          python-version: '3.12'  # Specify your Python version

      - name: Install dependencies
        if: ${{ steps.PR.outputs.number != null }}
        run: |
          python -m pip install --upgrade pip uv
          uv sync  --group dev

      - name: Static Code Linting with flake8
        if: ${{ steps.PR.outputs.number != null }}
        run: |
          # stop the build if there are Python syntax errors or undefined names
          uv run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          uv run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Create SQLite database
        if: ${{ steps.PR.outputs.number != null }}
        run: |
          touch $DATABASE_PATH

      - name: Initialize Database
        if: ${{ steps.PR.outputs.number != null }}
        run: |
          mkdir alembic_sqlite/versions
          uv run -- alembic -n sqlite revision --autogenerate -m "initial"

      - name: Create Schema
        if: ${{ steps.PR.outputs.number != null }}
        run: |
          uv run -- alembic -n sqlite upgrade head
          echo "REPOSITORY_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - name: Generate coverage for codecov
        if: ${{ steps.PR.outputs.number != null }}
        id: codecov-service
        run: |
          uv run -- pytest --timeout=10 --cov --cov-report=xml --junitxml=junit.xml -o junit_family=legacy
        shell: bash

      - name: Upload results to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
