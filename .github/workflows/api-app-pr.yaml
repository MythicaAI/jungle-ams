name: api/app tests

on:
  push:
  pull_request:
    types: [opened, reopened, synchronize]
    paths:
      - 'api/app/**'

defaults:
  run:
    working-directory: api/app

jobs:
  api-app-ci:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write

    env:
      SQL_URL: "sqlite:///${{ github.workspace }}/mythica.db"
      DATABASE_PATH: "${{ github.workspace }}/mythica.db"
      PYTHONPATH: "${{ github.workspace }}/api/app"
      UPLOAD_FOLDER_AUTO_CLEAN: false
      LOCAL_STORAGE_PATH: /tmp/local_storage
      USE_LOCAL_STORAGE: true
      COVERAGE_SINGLE: 80
      COVERAGE_TOTAL: 80

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'  # Specify your Python version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip poetry
          poetry install --with=dev --no-root
      - name: Static Code Linting with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          poetry run flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          poetry run flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      - name: Create SQLite database
        run: |
          touch $DATABASE_PATH

      - name: Initialize Database
        run: |
          mkdir alembic_sqlite/versions
          poetry run alembic -n sqlite revision --autogenerate -m "initial"

      - name: Create Schema
        run: |
          poetry run alembic -n sqlite upgrade head
          echo "REPOSITORY_NAME=${GITHUB_REPOSITORY#*/}" >> $GITHUB_ENV

      - uses: 8BitJonny/gh-get-current-pr@3.0.0
        id: PR

      # - name: Run tests
      #   id: pytester-cov
      #   # uses: ./github_coverage/run_coverage/
      #   run: |
      #     cov_config_fname=.coveragerc
      #     cov_threshold_single_fail=false
      #     cov_threshold_total_fail=false


      #     # python -m pip install --upgrade pip poetry
      #     # poetry install --with=dev --no-root

      #     # write omit str list to coverage file
      #     cat << EOF > $cov_config_fname
      #     [run]
      #     omit = "tests/*"
      #     EOF

      #     # get list recursively of dirs to run pytest-cov on
      #     find_cmd_str="find . -type d"
      #     pytest_dirs=$(eval "$find_cmd_str")

      #     # build cov argument for pytest cmd with list of dirs
      #     pytest_cov_dirs=""
      #     for dir in $pytest_dirs; do
      #       pytest_cov_dirs+="--cov=${dir} "
      #     done

      #     output=$(poetry run pytest . --cov --cov-config=.coveragerc)

      #     echo "$output"


      #     # remove pytest-coverage config file
      #     if [ -f $cov_config_fname ]; then
      #       rm $cov_config_fname
      #     fi

      #     parse_title=false  # parsing title (not part of table)
      #     parse_contents=false  # parsing contents of table
      #     parsed_content_header=false  # finished parsing column headers of table
      #     item_cnt=0 # four items per row in table
      #     items_per_row=4

      #     output_table_title=''
      #     output_table_contents=''
      #     file_covs=()
      #     total_cov=0

      #     for x in $output; do
      #       if [[ $x =~ ^-+$ && $x != '--' ]]; then
      #         if [[ "$parse_title" = false && "$parse_contents" = false ]]; then
      #           parse_title=true
      #         else
      #           output_table_title+="$x "

      #           parse_title=false
      #           parse_contents=true
      #           continue
      #         fi
      #       fi

      #       if [ "$parse_contents" = true ]; then
      #         # reached end of coverage table contents
      #         if [[ "$x" =~ ^={5,}$ ]]; then
      #           break
      #         fi
      #       fi

      #       if [ "$parse_title" = false ]; then
      #         if [ "$parse_contents" = false ]; then
      #           continue
      #         else  # parse contents
      #           if [[ "$parsed_content_header" = false && $item_cnt == 4 ]]; then
      #             # needed between table headers and values for markdown table
      #             output_table_contents+="
      #     | ------ | ------ | ------ | ------ |"
      #           fi

      #           if [[ $item_cnt == 3 ]]; then
      #             # store individual file coverage
      #             file_covs+=( ${x::-1} )  # remove percentage at end
      #             total_cov=${x::-1}  # will store last one
      #           fi

      #           if [[ $item_cnt == 4 ]]; then
      #             parsed_content_header=true
      #           fi

      #           item_cnt=$((item_cnt % items_per_row))

      #           if [ $item_cnt = 0 ]; then
      #             output_table_contents+="
      #     "
      #           fi

      #           output_table_contents+="| $x "

      #           item_cnt=$((item_cnt+1))

      #           if [ $item_cnt == 4 ]; then
      #             output_table_contents+="|"
      #           fi
      #         fi
      #       else
      #         # parse title
      #         output_table_title+="$x "
      #       fi

      #       output_table+="$x"
      #     done

      #     # remove last file-cov b/c it's total-cov
      #     unset 'file_covs[${#file_covs[@]}-1]'

      #     # remove first file-cov b/c it's table header
      #     file_covs=("${file_covs[@]:1}") #removed the 1st element

      #     # check if any file_cov exceeds threshold
      #     for file_cov in "${file_covs[@]}"; do
      #       if [ "$file_cov" -lt "80" ]; then
      #         cov_threshold_single_fail=true
      #       fi
      #     done

      #     # check if total_cov exceeds threshold
      #     if [ "$total_cov" -lt "80" ]; then
      #       cov_threshold_total_fail=true
      #     fi

      #     # set badge color
      #     if [ "$total_cov" -le 20 ]; then
      #       color="red"
      #     elif [ "$total_cov" -gt 20 ] && [ "$total_cov" -le 50 ]; then
      #       color="orange"
      #     elif [ "$total_cov" -gt 50 ] && [ "$total_cov" -le 70 ]; then
      #       color="yellow"
      #     elif [ "$total_cov" -gt 70 ] && [ "$total_cov" -le 90 ]; then
      #       color="green"
      #     elif [ "$total_cov" -gt 90 ]; then
      #       color="brightgreen"
      #     fi

      #     badge="![pytest-coverage-badge](https://img.shields.io/static/v1?label=pytest-coverageüõ°Ô∏è&message=$total_cov%&color=$color)"
      #     output_table_contents="${badge}${output_table_contents}"

      #     # github actions truncates newlines, need to do replace
      #     # https://github.com/actions/create-release/issues/25
      #     output_table_contents="${output_table_contents//'%'/'%25'}"
      #     output_table_contents="${output_table_contents//$'\n'/'%0A'}"
      #     output_table_contents="${output_table_contents//$'\r'/'%0D'}"
      #     output_table_contents="<details><summary>Show Table</summary>%0A${output_table_contents}%0A</details>"

      #     # set output variables to be used in workflow file
      #     echo "::set-output name=output-table::$output_table_contents"
      #     # echo "{output-table}=$output_table_contents" >> "$GITHUB_ENV"
      #     echo "::set-output name=cov-threshold-single-fail::$cov_threshold_single_fail"
      #     echo "::set-output name=cov-threshold-total-fail::$cov_threshold_total_fail"

      - name: Run tests
        id: pytester-cov
        run: |
          chmod +x ./prepare_git_cov_table.sh
          ./prepare_git_cov_table.sh
        shell: bash
        
      - name: Comment table-result inside PR
        uses: ./github_coverage/post_git_issue/
        # pass user input as arguments
        with:
          title: Pytest coverage single falls below minimum ${{ env.COVERAGE_SINGLE }}
          token: ${{secrets.GITHUB_TOKEN}}
          assignees: ${{github.actor}}
          # labels: workflow-output-table
          body: ${{ steps.pytester-cov.outputs.output-table }}
          repo: ${{ github.repository }}
          pull_number: ${{ steps.PR.outputs.number }}

      - name: Coverage total fail - exit
        if: ${{ steps.pytester-cov.outputs.cov-threshold-total-fail == 'true' }}
        run: |
          echo "cov single fail ${{ steps.pytester-cov.outputs.cov-threshold-total-fail }}"
          exit 1
