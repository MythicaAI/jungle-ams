# AUTOGENERATED from fileassetkit.schema
#
#
# pylint: disable=unused-import
from sqlalchemy import JSON, TIMESTAMP, Column, func, text, UniqueConstraint
from sqlalchemy.types import Integer, BigInteger
from sqlalchemy.sql.functions import now as sql_now
from sqlalchemy.sql.schema import Sequence, ForeignKey
from sqlalchemy.sql.ddl import CreateSequence, DropSequence
from sqlalchemy.ext.declarative import declared_attr
from sqlmodel import Field, SQLModel
from pydantic import ConfigDict
from typing import Any, Dict
from datetime import datetime
from uuid import UUID, uuid4


# sequences for table job_defs

class JobDefinition(SQLModel, table=True):
    """
    The schema for job and job result tracking
    """
    __tablename__ = "job_defs"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types

    # pylint: disable=no-self-argument
    @declared_attr
    def __table_args__(cls):
        # ensure auto increment behavior on non-PK int columns
        return None

    job_def_seq: int = Field(sa_column=Column('job_def_seq',BigInteger().with_variant(Integer, 'sqlite'),primary_key=True,nullable=False))
    job_type: str | None = Field(default=None)
    name: str | None = Field(default=None)
    description: str | None = Field(default=None)
    params_schema: Dict[str, Any] | None = Field(default_factory=dict,sa_column=Column(JSON))
    owner_seq: int | None = Field(sa_column=Column('owner_seq',BigInteger().with_variant(Integer, 'sqlite'),ForeignKey('profiles.profile_seq'),default=None))
    interactive: bool | None = Field(default=False)

# sequences for table jobs

class Job(SQLModel, table=True):
    """
    The schema for job and job result tracking
    """
    __tablename__ = "jobs"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types

    # pylint: disable=no-self-argument
    @declared_attr
    def __table_args__(cls):
        # ensure auto increment behavior on non-PK int columns
        return None

    job_seq: int = Field(sa_column=Column('job_seq',BigInteger().with_variant(Integer, 'sqlite'),primary_key=True,nullable=False))
    job_def_seq: int = Field(sa_column=Column('job_def_seq',BigInteger().with_variant(Integer, 'sqlite'),ForeignKey('job_defs.job_def_seq'),default=None))
    owner_seq: int | None = Field(sa_column=Column('owner_seq',BigInteger().with_variant(Integer, 'sqlite'),ForeignKey('profiles.profile_seq'),default=None))
    worker_seq: int | None = Field(sa_column=Column('worker_seq',BigInteger().with_variant(Integer, 'sqlite'),ForeignKey('workers.worker_seq'),default=None))
    created: datetime | None = Field(sa_type=TIMESTAMP(timezone=True),sa_column_kwargs={'server_default': sql_now(), 'nullable': False},default=None)
    completed: datetime | None = Field(sa_type=TIMESTAMP(timezone=True),default=None)
    deleted: datetime | None = Field(sa_type=TIMESTAMP(timezone=True),default=None)
    input_files: Dict[str, Any] | None = Field(default_factory=dict,sa_column=Column(JSON))
    params: Dict[str, Any] | None = Field(default_factory=dict,sa_column=Column(JSON))

# sequences for table job_results
job_results_job_result_seq_seq: Sequence = Sequence(name='job_results_job_result_seq_seq', start=1)

class JobResult(SQLModel, table=True):
    """
    The schema for job and job result tracking
    """
    __tablename__ = "job_results"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types

    # pylint: disable=no-self-argument
    @declared_attr
    def __table_args__(cls):
        # ensure auto increment behavior on non-PK int columns
        return (UniqueConstraint('job_result_seq'),{'sqlite_autoincrement': True}, )

    job_seq: int = Field(sa_column=Column('job_seq',BigInteger().with_variant(Integer, 'sqlite'),primary_key=True,nullable=False))
    job_result_seq: int = Field(sa_column=Column('job_result_seq',BigInteger().with_variant(Integer, 'sqlite'),job_results_job_result_seq_seq,primary_key=True,nullable=False))
    created_in: str | None = Field(default=None)
    result_data: Dict[str, Any] = Field(default_factory=dict,sa_column=Column(JSON))
    worker_seq: int | None = Field(sa_column=Column('worker_seq',BigInteger().with_variant(Integer, 'sqlite'),ForeignKey('workers.worker_seq'),default=None))

# sequences for table workers

class Worker(SQLModel, table=True):
    """
    The schema for job and job result tracking
    """
    __tablename__ = "workers"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types

    # pylint: disable=no-self-argument
    @declared_attr
    def __table_args__(cls):
        # ensure auto increment behavior on non-PK int columns
        return None

    worker_seq: int = Field(sa_column=Column('worker_seq',BigInteger().with_variant(Integer, 'sqlite'),primary_key=True,nullable=False))
    job_count: int | None = Field(sa_column=Column('job_count',Integer,default=0))
    job_capacity: int | None = Field(sa_column=Column('job_capacity',Integer,default=0))
    ws_client_endpoint: str | None = Field(default=None)
    updated: datetime | None = Field(default=None,sa_type=TIMESTAMP(timezone=True),sa_column_kwargs={'server_onupdate': sql_now(), 'nullable': True})

# sequences for table worker_jobs

class WorkerJob(SQLModel, table=True):
    """
    The schema for job and job result tracking
    """
    __tablename__ = "worker_jobs"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types

    # pylint: disable=no-self-argument
    @declared_attr
    def __table_args__(cls):
        # ensure auto increment behavior on non-PK int columns
        return None

    worker_seq: int = Field(sa_column=Column('worker_seq',BigInteger().with_variant(Integer, 'sqlite'),primary_key=True,nullable=False))
    job_seq: int = Field(sa_column=Column('job_seq',BigInteger().with_variant(Integer, 'sqlite'),primary_key=True,nullable=False))
