# AUTOGENERATED from fileassetkit.schema
#
#
# pylint: disable=unused-import
from sqlalchemy import JSON, TIMESTAMP, Column, func, text, UniqueConstraint
from sqlalchemy.types import Integer, BigInteger
from sqlalchemy.sql.functions import now as sql_now
from sqlalchemy.sql.schema import Sequence, ForeignKey
from sqlalchemy.sql.ddl import CreateSequence, DropSequence
from sqlalchemy.ext.declarative import declared_attr
from sqlmodel import Field, SQLModel
from pydantic import ConfigDict
from typing import Any, Dict
from datetime import datetime
from uuid import UUID, uuid4


# sequences for table tags

class Tag(SQLModel, table=True):
    """
    The schema for tags
    """
    __tablename__ = "tags"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types

    # pylint: disable=no-self-argument
    @declared_attr
    def __table_args__(cls):
        # ensure auto increment behavior on non-PK int columns
        return (UniqueConstraint('name', name='uq_tags_name'),{'sqlite_autoincrement': True}, )

    tag_seq: int = Field(sa_column=Column('tag_seq',BigInteger().with_variant(Integer, 'sqlite'),primary_key=True,nullable=False))
    name: str = Field(default=None)
    owner_seq: int | None = Field(sa_column=Column('owner_seq',BigInteger().with_variant(Integer, 'sqlite'),ForeignKey('profiles.profile_seq'),default=None))
    created: datetime | None = Field(sa_type=TIMESTAMP(timezone=True),sa_column_kwargs={'server_default': sql_now(), 'nullable': False},default=None)
    page_priority: int | None = Field(sa_column=Column('page_priority',Integer,default=0))
    contents: Dict[str, Any] | None = Field(default_factory=dict,sa_column=Column(JSON))
