name: web

#
# This docker compose creates a backend testing environment for 
# storage tier services. You can run this compose set with -d (--detach)
#
services:

  sites:
    container_name: sites
    image: mythica-sites-build:latest
    volumes:
      - site-shared-publish:/mnt/publish
    environment:
      PUBLISH_PATH: /mnt/publish
      VITE_API_BASE_URL: http://localhost:15555/v1
      VITE_IMAGES_BASE_URL: http://localhost:8080/images
      VITE_AUTH0_DOMAIN: dev-dtvqj0iuc5rnb6x2.us.auth0.com
      VITE_AUTH0_CLIENT_ID: 4CZhQWoNm1WH8l8042LeF38qHrUTR2ax
      VITE_AUTH0_AUDIENCE: http://localhost:15555/v1
      VITE_AUTH0_REDIRECT_URL: http://localhost:8080
      VITE_MYTHICA_API_URL: http://localhost:8080/v1
      VITE_AWFUL_WORKERS: houdini,blender,workflow
      VITE_AWFUL_SCRIPT_PATH: /mythica/script
      VITE_AWFUL_SCRIPT_INTERFACE_PATH: /mythica/script/interface
      VITE_AWFUL_REST_URL: http://localhost:8080/v1/automation/run
      VITE_SCENE_TALK_URL: ws://localhost:8765
      VITE_MYTHICA_ENVIRONMENT: dev

  nginx:
    container_name: nginx
    image: mythica-web-front:latest
    depends_on:
      - sites
      - app
      - collector
    ports:
      - "8080:80"
    volumes:
      - site-shared-publish:/mnt/publish
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - web
      - storage
      - observe

  app:
    # network_mode: service:tailscale  # It is required by docs, but we use ports and networks so tailscale will be in host mode
    container_name: app
    image: mythica-app:latest
    environment:
      MINIO_ENDPOINT: minio:9000
      LOCAL_STORAGE_PATH: /tmp/local_storage
      REDIS_HOST: redis
      MYTHICA_ENVIRONMENT: debug
      CONF_FILE: nginx-local.conf
      NATS_ENDPOINT: nats://nats:4222
      MINIO_ACCESS_KEY: foo-access
      MINIO_SECRET_KEY: bar-secret
      WORKER_COUNT: 3
      TELEMETRY_ENDPOINT: grpc://collector:4317
      ENABLE_GCS_PYTHON_CLIENT_OTEL_TRACES: false
    ports:
      - "15555:5555"
    networks:
      - web
      - storage
      - observe

  worker:
    container_name: worker
    image: mythica-test-worker:latest
    environment:
      MYTHICA_ENVIRONMENT: debug
      NATS_ENDPOINT: nats://nats:4222
      TELEMETRY_ENABLE: True
      TELEMETRY_ENDPOINT: otel-sidecar:4317
      TELEMETRY_INSECURE: True
    networks:
      - web
      - storage
      - observe

  packager:
    container_name: packager
    image: mythica-packager:latest
    environment:
      MYTHICA_ENVIRONMENT: debug
      MYTHICA_ENDPOINT: http://app:5555
      MYTHICA_API_KEY: ${MYTHICA_API_KEY}
      NATS_ENDPOINT: nats://nats:4222
      TELEMETRY_ENABLE: True
      TELEMETRY_ENDPOINT: otel-sidecar:4317
      TELEMETRY_INSECURE: True
    networks:
      - web
      - storage
      - observe

  canary:
    # network_mode: service:tailscale  # It is required by docs, but we use ports and networks so tailscale will be in host mode
    container_name: canary
    image: mythica-job-canary:latest
    environment:
      MYTHICA_ENVIRONMENT: debug
      MYTHICA_ENDPOINT: http://app:5555
      MYTHICA_API_KEY: ${MYTHICA_API_KEY}
      TELEMETRY_ENABLE: True
      TELEMETRY_ENDPOINT: otel-sidecar:4317
      TELEMETRY_INSECURE: True
    networks:
      - web
      - observe
  
  # open telemetry side car for scraping nginx logs
  collector:
    container_name: collector
    image: otel/opentelemetry-collector-contrib:latest
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    environment:
      - SIGNOZ_ACCESS_TOKEN=${SIGNOZ_ACCESS_TOKEN} # It should be in testing/.env file in this folder

    # Map both the logs for processing and the external config
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
      - ./logs:/var/log/nginx:ro
      - ./export:/var/log/export/:rwz"
    ports:
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
    networks:
      - web
      - observe

volumes:
  site-shared-publish: # volume reference to share node build contents
networks:
  storage:
    driver: bridge
    name: storage
    external: true
  observe:
    driver: bridge
    name: storage
    external: true
  web:
    driver: bridge
    name: web
