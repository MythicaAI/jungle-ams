
export default function (hou) {
    class _hnt_SOP_apex__configurecontrols extends hou.extend(hou._HoudiniBase).with(hou._SubgraphMixin) {
        static is_root = false;
        static id = 'SOP/Animation/APEX/apex::configurecontrols';
        static category = '/SOP/apex';
        static houdiniType = 'apex::configurecontrols';
        static title = 'APEX Configure Controls';
        static icon = '/editor/assets/imgs/nodes/_hnt_SOP_apex__configurecontrols.svg';
        constructor() {
            super();
            this.flags['houdini_type'] = this.__proto__.constructor.houdiniType;
            
            const inputs = ['SOP', 'SOP'];
            const outputs = ['SOP'];

            for(var i=0;i<inputs.length;i++) this.addInput(''+i,inputs[i]);        
            for(var j=0;j<outputs.length;j++) this.addOutput(''+j,outputs[j]);
        }
        parmTemplatesInit() {
            let hou_parm_template_group = new hou.ParmTemplateGroup();
			this.parmTemplateGroup = hou_parm_template_group;
			let hou_parm_template = new hou.SeparatorParmTemplate({name: "sepparm3"});
			hou_parm_template.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "rig", label: "Rig Source", num_components: 1, default_value: ["/Base.rig"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "node = kwargs['node']\ngeo = node.inputGeometry(0)\npaths = geo.extractPackedPaths(pattern='/*.rig')\n\ndouble_names = list()\nfor n in paths:\n    double_names.append(n)\n    double_names.append(n)\nreturn double_names", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template.setTags({"script_callback_language": "python"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "skincontrolshape", label: "Skin Shape Source", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "node = kwargs['node']\ngeo = node.inputGeometry(0)\npaths = geo.extractPackedPaths(pattern='/*.shp')\n\ndouble_names = list()\nfor n in paths:\n    double_names.append(n)\n    double_names.append(n)\nreturn double_names", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template.setTags({"script_callback_language": "python"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ToggleParmTemplate({name: "useguides", label: "Transfer from Guides", default_value: false});
			hou_parm_template.hideLabel(true);
			hou_parm_template.setJoinWithNext(true);
			hou_parm_template.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template.setTags({"script_callback_language": "python"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "guidesource", label: "Guide Source", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "node = kwargs['node']\ngeo = node.inputGeometry(0)\npaths = geo.extractPackedPaths(pattern='/*.skel')\n\ndouble_names = list()\nfor n in paths:\n    double_names.append(n)\n    double_names.append(n)\nreturn double_names", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ useguides == 0 }");
			hou_parm_template.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template.setTags({"script_callback_language": "python"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder1___6", label: "Advanced Shape Settings", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "collapsible"});
			let hou_parm_template2 = new hou.ToggleParmTemplate({name: "useconnectivity", label: "Create Missing Shape Names by Connectivity", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ role != control }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "uselighting", label: "Use Lighting", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ role != control }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.SeparatorParmTemplate({name: "sepparm2"});
			hou_parm_template.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "controls", label: "Control Configs", folder_type: hou.folderType.MultiparmBlock, default_value: 0, ends_tab_group: false});
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "enable#", label: "Enable", default_value: true});
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setTags({"parm_group_parm": "group#"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder1_#_5", label: "Control Config", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ enable# == 0 }");
			hou_parm_template2.setTags({"group_type": "simple", "sidefx::header_toggle": "enable#"});
			let hou_parm_template3 = new hou.StringParmTemplate({name: "control_group#", label: "Control Group", num_components: 1, default_value: ["^*"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import apex\nnode = kwargs[\'node\']\ngeo = node.inputGeometry(0)\nrig = node.parm(\'rig\').eval()\n\nif rig:\n    if not rig.startswith(\'/\'):\n        rig = \"/{}\".format(rig)\n    tmp_geo = geo.unpackFromFolder(rig)\n    if tmp_geo:\n        double_names = list()\n        graph = apex.Graph()\n        graph.loadFromGeometry(tmp_geo)\n        nodes = graph.matchNodes(\'%callback(TransformObject) & %ispromoted()\')\n        for n in nodes:\n            name = graph.nodeName(n)\n            double_names.append(name)\n            double_names.append(name)\nreturn double_names", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enable# == 0 }");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"parm_group_parm": "group#", "script_action_help": "Select geometry from an available viewport.", "script_action_icon": "BUTTONS_reselect", "script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "shape_group#", label: "Shapes", num_components: 1, default_value: ["*"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enable# == 0 }");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"parm_group_parm": "group#", "script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "use_shapeoverride#", label: "Change Shape", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ use_skincontrol# == 1 }");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "folder1_#_2", label: "Use Shape Override", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ use_shapeoverride# == 0 }");
			hou_parm_template3.setTags({"group_default": "1", "group_type": "simple", "sidefx::header_toggle": "use_shapeoverride#"});
			let hou_parm_template4 = new hou.FolderParmTemplate({name: "folder0_#", label: "Folder Name", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ use_skincontrol# == 1 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ use_shapeoverride# == 0 }");
			hou_parm_template4.setTags({"group_type": "simple", "sidefx::look": "blank"});
			let hou_parm_template5 = new hou.StringParmTemplate({name: "shapename#", label: "Shape Override", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "node = kwargs['node']\nimport apex.geolibrary as su\ngeo_lib = su.ApexGeometries()\ngeo_lib.loadControl('3dTransform', geo=node.node('UPDATED_LIBRARY').geometry(), character_name=node.name())\nnames = geo_lib.getLibraryShapeNames()\ndouble_names = list()\nfor n in names:\n    double_names.append(n)\n    double_names.append(n)\nreturn double_names", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template5.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template5.setTags({"script_callback_language": "python"});
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template5 = new hou.ToggleParmTemplate({name: "shape_worldtrans#", label: "Keep Shape World Transform", default_value: false});
			hou_parm_template5.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template5.setTags({"script_callback_language": "python"});
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "use_shapeoffset#", label: "Change Shapeoffset", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ use_skincontrol# == 1 }");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python", "sidefx::header_toggle": ""});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "folder1_#", label: "Use Shapeoffset", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ use_shapeoffset# == 0 }");
			hou_parm_template3.setTags({"group_type": "simple", "sidefx::header_toggle": "use_shapeoffset#"});
			hou_parm_template4 = new hou.FolderParmTemplate({name: "folder0_#_3", label: "Folder Name", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ use_skincontrol# == 1 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ use_shapeoffset# == 0 }");
			hou_parm_template4.setTags({"group_type": "simple", "sidefx::look": "blank"});
			hou_parm_template5 = new hou.MenuParmTemplate({name: "mode#", label: "Mode", menu_items: ["override", "pre"], menu_labels: ["Override", "Pre-Multiply"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template5.setConditional(hou.parmCondType.DisableWhen, "{ enable# == 0 }");
			hou_parm_template5.setTags({"parm_group_parm": "group#"});
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template5 = new hou.FloatParmTemplate({name: "t#", label: "Translate", num_components: 3, default_value: [0, 0, 0], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template5.setConditional(hou.parmCondType.DisableWhen, "{ enable# == 0 }");
			hou_parm_template5.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template5.setTags({"script_callback_language": "python"});
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template5 = new hou.FloatParmTemplate({name: "r#", label: "Rotate", num_components: 3, default_value: [0, 0, 0], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template5.setConditional(hou.parmCondType.DisableWhen, "{ enable# == 0 }");
			hou_parm_template5.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template5.setTags({"script_callback_language": "python"});
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template5 = new hou.FloatParmTemplate({name: "s#", label: "Scale", num_components: 3, default_value: [1, 1, 1], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template5.setConditional(hou.parmCondType.DisableWhen, "{ enable# == 0 }");
			hou_parm_template5.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template5.setTags({"script_callback_language": "python"});
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template5 = new hou.FolderParmTemplate({name: "pivot#", label: "Pivot", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template5.setConditional(hou.parmCondType.DisableWhen, "{ enable# == 0 }");
			hou_parm_template5.setTags({"group_type": "collapsible"});
			let hou_parm_template6 = new hou.FloatParmTemplate({name: "p#", label: "Pivot Translate", num_components: 3, default_value: [0, 0, 0], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template6.setConditional(hou.parmCondType.DisableWhen, "{ enable# == 0 }");
			hou_parm_template6.setTags({"parm_group_parm": "group#"});
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.FloatParmTemplate({name: "pivot_r#", label: "Pivot Rotate", num_components: 3, default_value: [0, 0, 0], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template6.setConditional(hou.parmCondType.DisableWhen, "{ enable# == 0 }");
			hou_parm_template6.setTags({"parm_group_parm": "group#"});
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "use_color#", label: "Change Color", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ use_skincontrol# == 1 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "folder1_#_4", label: "Use Color", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ use_color# == 0 }");
			hou_parm_template3.setTags({"group_type": "simple", "sidefx::header_toggle": "use_color#"});
			hou_parm_template4 = new hou.FolderParmTemplate({name: "folder0_#_4", label: "Folder Name", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ use_skincontrol# == 1 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ use_color# == 0 }");
			hou_parm_template4.setTags({"group_type": "simple", "sidefx::look": "blank"});
			hou_parm_template5 = new hou.FloatParmTemplate({name: "color#", label: "Color", num_components: 3, default_value: [1, 1, 1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template5.setConditional(hou.parmCondType.DisableWhen, "{ use_color# == 0 }");
			hou_parm_template5.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template5.setTags({"script_callback_language": "python"});
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "use_visibility#", label: "Change Visibility", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ use_skincontrol# == 1 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "folder2_#", label: "Use Visibility", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ use_visibility# == 0 }");
			hou_parm_template3.setTags({"group_type": "simple", "sidefx::header_toggle": "use_visibility#"});
			hou_parm_template4 = new hou.FolderParmTemplate({name: "folder0_#_5", label: "Folder Name", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ use_skincontrol# == 1 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ use_visibility# == 0 }");
			hou_parm_template4.setTags({"group_type": "simple", "sidefx::look": "blank"});
			hou_parm_template5 = new hou.ToggleParmTemplate({name: "visibility#", label: "Is Visible", default_value: true});
			hou_parm_template5.setConditional(hou.parmCondType.DisableWhen, "{ use_visibility# == 0 }");
			hou_parm_template5.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template5.setTags({"script_callback_language": "python"});
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "use_skincontrol#", label: "Use Skin Control", default_value: false});
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "folder1_#_3", label: "Use Skin Control", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ use_skincontrol# == 0 }");
			hou_parm_template3.setTags({"group_type": "simple", "sidefx::header_toggle": "use_skincontrol#"});
			hou_parm_template4 = new hou.FolderParmTemplate({name: "folder0_#_2", label: "Folder Name", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ use_skincontrol# == 0 }");
			hou_parm_template4.setTags({"group_type": "simple", "sidefx::look": "blank"});
			hou_parm_template5 = new hou.StringParmTemplate({name: "skinprims#", label: "Prims", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "node = kwargs[\'node\'].node(\"SKIN_PREVIS\")\n\ngeo = node.geometry().freeze()\n\nout = []\n\nfor p in geo.prims():\n    out.append(p.attribValue(\"controlname\"))\nreturn out", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template5.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template5.setTags({"script_action": "import soputils\nkwargs[\'geometrytype\'] = hou.geometryType.Primitives\nkwargs[\'inputindex\'] = 0\nkwargs[\'node\'] = kwargs[\'node\'].node(\"SKIN_PREVIS\")\n\nsoputils.selectGroupParm(kwargs)", "script_callback_language": "python"});
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.SeparatorParmTemplate({name: "sepparm#_2"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.SeparatorParmTemplate({name: "sepparm#_3"});
			hou_parm_template2.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			
            this.parmTemplateGroup = hou_parm_template_group;
            this.parmTemplateGroup.linkNode(this);
        }
    }
    hou.registerType('SOP/Animation/APEX/apex::configurecontrols',_hnt_SOP_apex__configurecontrols)
    return _hnt_SOP_apex__configurecontrols
}
        