
export default function (hou) {
    class _hnt_SOP_apex__autorigcomponent extends hou.extend(hou._HoudiniBase).with(hou._SubgraphMixin) {
        static is_root = false;
        static id = 'SOP/Animation/APEX/apex::autorigcomponent';
        static category = '/SOP/apex';
        static houdiniType = 'apex::autorigcomponent';
        static title = 'APEX Autorig Component';
        static icon = '/editor/assets/imgs/nodes/_hnt_SOP_apex__autorigcomponent.svg';
        constructor() {
            super();
            this.flags['houdini_type'] = this.__proto__.constructor.houdiniType;
            
            const inputs = ['SOP', 'SOP'];
            const outputs = ['SOP', 'SOP'];

            for(var i=0;i<inputs.length;i++) this.addInput(''+i,inputs[i]);        
            for(var j=0;j<outputs.length;j++) this.addOutput(''+j,outputs[j]);
        }
        parmTemplatesInit() {
            let hou_parm_template_group = new hou.ParmTemplateGroup();
			this.parmTemplateGroup = hou_parm_template_group;
			let hou_parm_template = new hou.FolderParmTemplate({name: "general", label: "General", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple", "sidefx::look": "blank", "sidefx::switcher": "Setup_2"});
			let hou_parm_template2 = new hou.FolderParmTemplate({name: "folder0", label: "Component", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "collapsible", "sidefx::header_parm": "componentsource"});
			let hou_parm_template3 = new hou.MenuParmTemplate({name: "componentsource", label: "Component Source", menu_items: [], menu_labels: [], default_value: 1, icon_names: [], item_generator_script: "import os\npaths = list()\nrelativepaths = list()\n\n# TODO: check if this path needs to be mapped to a different standard dir\npackage_path = \'$HFS/packages/apex/geo/\'\n\npaths.append(package_path)\npaths.append(\'$HOUDINI_PATH/apexcomponents/\')\npaths.append(\'$HIP/apexcomponents/\')\npaths.append(\'$JOB/apexcomponents/\')\npaths.append(\'$HOME/apexcomponents/\')\nsuffix = \'_component.bgeo\'\n\n# relativepaths.append(\'$HFS/packages/apex/geo/\')\n# relativepaths.append(\'$HOUDINI_PATH/apexcomponents/\')\n# relativepaths.append(\'$HIP/apexcomponents/\')\n# relativepaths.append(\'$HOUDINI_PATH/apexcomponents/\')\n\n\nmenu_entry = list()\nmenu_entry.extend([\'__INPUT__\', \"Use Second Input\"])\n\nfor p, path in enumerate(paths):\n    abspaths = hou.text.expandString(path)\n    # print(abspaths)\n    for abspath in abspaths.split(\';\'):\n        if os.path.isdir(abspath):\n            \n            for f in os.listdir(abspath):\n                if path == package_path:\n                    if f.endswith(suffix):\n                        file_name = os.path.join(path, f)\n                        label = f.split(suffix)[0]\n                        label.replace(\'_\', \' \')\n                        menu_entry.append(file_name)\n                        menu_entry.append(label)\n                else:\n                    if f.endswith(\'.bgeo\'):\n                        file_name = os.path.join(path, f)\n                        label = f.split(\'.bgeo\')[0]\n                        label.replace(\'_\', \' \')\n                        if not label in menu_entry:\n                            menu_entry.append(file_name)\n                            menu_entry.append(label)\n\nreturn menu_entry\n            \n            \n    ", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setScriptCallback("hou.phm().setComponentFile(kwargs)");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback": "hou.phm().setComponentFile(kwargs)", "script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "componentfile", label: "Component File", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Geometry, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ componentsource == __INPUT__ }");
			hou_parm_template3.setScriptCallback("hou.phm().parms_from_graph(kwargs)");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"export_disable": "1", "script_callback": "hou.phm().parms_from_graph(kwargs)", "script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "componentfolder", label: "Component", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ componentsource != __INPUT__ }");
			hou_parm_template3.setTags({"group_default": "0", "group_type": "simple", "sidefx::header_parm": "componentsourceii", "sidefx::look": "blank"});
			let hou_parm_template4 = new hou.StringParmTemplate({name: "sopoutput", label: "Component Output File", num_components: 1, default_value: ["$HIP/apexcomponents/$OS.bgeo"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Any, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a rop_geometry1 sopoutput", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.StringReplace});
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "filechooser_mode": "read_and_write"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ButtonParmTemplate({name: "execute", label: "Save to Disk"});
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "takecontrol": "always"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "rigfolder1", label: "Rig", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "collapsible", "sidefx::header_label": "riglabel"});
			hou_parm_template3 = new hou.MenuParmTemplate({name: "rigsource", label: "Rig Source", menu_items: ["0", "1", "2"], menu_labels: ["Add or Update", "From Input ", "Add or Replace"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "rigfolder", label: "Rig", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ rigsource == 1 }");
			hou_parm_template3.setTags({"group_default": "0", "group_type": "simple", "sidefx::header_parm": "rigsourceii", "sidefx::look": "blank"});
			hou_parm_template4 = new hou.StringParmTemplate({name: "inputrigname", label: "Name", num_components: 1, default_value: ["Base.rig"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "node = kwargs['node']\ngeo = node.inputGeometry(0)\npaths = geo.extractPackedPaths(pattern='/*.rig')\n\ndouble_names = list()\nfor n in paths:\n    double_names.append(n)\n    double_names.append(n)\nreturn double_names", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ rigsource == 1 }");
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "script_action": "from kinefx.ui import rigtreeutils\nrigtreeutils.selectPointGroupParm(kwargs, folders_mode=True)\n", "script_action_help": "Select files from a rig tree pane. Input must be connected.", "script_action_icon": "BUTTONS_reselect", "script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "riglabel", label: "Label", column_labels: ["Rig                                                  `chs(\"inputrigname\")`"]});
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "advancedfolder", label: "Advanced", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "collapsible"});
			hou_parm_template3 = new hou.MenuParmTemplate({name: "parmsource", label: "Parm Source", menu_items: ["0", "1"], menu_labels: ["Component", "Node"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "parmfolder", label: "Parm ", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ parmsource == 0 }");
			hou_parm_template3.setTags({"group_type": "simple", "sidefx::header_parm": "parmsourceii", "sidefx::look": "blank", "sidefx::switcher": "folder1"});
			hou_parm_template4 = new hou.StringParmTemplate({name: "parmnode", label: "Path", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.NodeReference, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ parmsource == 0 }");
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "oprelative": ".", "script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "nodeparm", label: "Attribute Name", num_components: 1, default_value: ["parms"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ parmsource == 0 }");
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.SeparatorParmTemplate({name: "sepparm2"});
			hou_parm_template.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "componentparameters", label: "Component Parameters", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template2 = new hou.SeparatorParmTemplate({name: "sepparm3"});
			hou_parm_template2.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.LabelParmTemplate({name: "labelparm", label: "                                               ", column_labels: [""]});
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ButtonParmTemplate({name: "resetparms", label: "Reset Animation Parms"});
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setScriptCallback("hou.phm().reset_parms(kwargs)");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"button_icon": "BUTTONS_clear", "export_disable": "1", "script_callback": "hou.phm().reset_parms(kwargs)", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ButtonParmTemplate({name: "updateparms", label: "Reload Setup Parms"});
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setScriptCallback("hou.phm().update_from_graph(kwargs)");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"button_icon": "BUTTONS_reload", "export_disable": "1", "script_callback": "hou.phm().update_from_graph(kwargs)", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.SeparatorParmTemplate({name: "sepparm"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "parameters3", label: "Parameters", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ parmsource == 1 }");
			hou_parm_template2.setTags({"group_type": "simple", "sidefx::look": "blank"});
			hou_parm_template3 = new hou.SeparatorParmTemplate({name: "sepparm8"});
			hou_parm_template3.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "rigparameters", label: "Test Animation Parameters", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"group_type": "collapsible"});
			hou_parm_template2 = new hou.LabelParmTemplate({name: "animspacer", label: "                                               ", column_labels: [""]});
			hou_parm_template2.hide(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ButtonParmTemplate({name: "resetanimation", label: "Reset Animation Parms"});
			hou_parm_template2.hide(true);
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setScriptCallback("hou.phm().reset_animation_parms(kwargs)");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"button_icon": "BUTTONS_clear", "export_disable": "1", "script_callback": "hou.phm().reset_animation_parms(kwargs)", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ButtonParmTemplate({name: "updateanimation", label: "Reload Animation Parms"});
			hou_parm_template2.hide(true);
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setScriptCallback("hou.phm().update_animation_parms(kwargs)");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"button_icon": "BUTTONS_reload", "export_disable": "1", "script_callback": "hou.phm().update_animation_parms(kwargs)", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder3", label: "Test Animation", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.hide(true);
			hou_parm_template2.setTags({"group_type": "simple", "sidefx::look": "blank"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.IntParmTemplate({name: "switcher", label: "Switcher", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template.hide(true);
			hou_parm_template.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template.setTags({"script_callback_language": "python"});
			hou_parm_template_group.append(hou_parm_template);
			
            this.parmTemplateGroup = hou_parm_template_group;
            this.parmTemplateGroup.linkNode(this);
        }
    }
    hou.registerType('SOP/Animation/APEX/apex::autorigcomponent',_hnt_SOP_apex__autorigcomponent)
    return _hnt_SOP_apex__autorigcomponent
}
        