
export default function (hou) {
    class _hnt_SOP_guideprocesscore extends hou._HoudiniBase {
        static is_root = false;
        static id = 'SOP/Other/guideprocesscore';
        static category = '/SOP';
        static houdiniType = 'guideprocesscore';
        static title = 'Guide Process Core';
        static icon = 'None';
        constructor() {
            super();
            this.flags['houdini_type'] = this.__proto__.constructor.houdiniType;
            
            const inputs = ['SOP', 'SOP', 'SOP'];
            const outputs = ['SOP'];

            for(var i=0;i<inputs.length;i++) this.addInput(''+i,inputs[i]);        
            for(var j=0;j<outputs.length;j++) this.addOutput(''+j,outputs[j]);
        }
        parmTemplatesInit() {
            let hou_parm_template_group = new hou.ParmTemplateGroup();
			this.parmTemplateGroup = hou_parm_template_group;
			let hou_parm_template = new hou.FolderParmTemplate({name: "generalfolder", label: "General", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			let hou_parm_template2 = new hou.MenuParmTemplate({name: "geotype", label: "Geometry Type", menu_items: ["polygons", "barbs"], menu_labels: ["Polygons", "Feather Barbs"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "barbside", label: "Barb Side", menu_items: ["left", "right"], menu_labels: ["Left", "Right"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "uvattrib", label: "UV Attribute", num_components: 1, default_value: ["uv"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "grouptype", label: "Group Type", menu_items: ["primitive", "point", "edge"], menu_labels: ["Primitives", "Points", "Edges"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "group", label: "Group", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle});
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "script_action": "import soputils\nkwargs['geometrytype'] = kwargs['node'].parmTuple('grouptype')\nkwargs['inputindex'] = 0\nsoputils.selectGroupParm(kwargs)", "script_action_help": "Select geometry from an available viewport.\nShift-click to turn on Select Groups.", "script_action_icon": "BUTTONS_reselect"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "seed", label: "Random Seed", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "vismasks", label: "Visualize Masks", default_value: true});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "skinmaskfolder", label: "Input Mask", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template2 = new hou.FloatParmTemplate({name: "blend", label: "Blend", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "blendoverride", label: "Blend Override", menu_items: ["none", "curveattrib", "skinattrib", "texture"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "blend"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "blendcurveattrib", label: "Blend Attrib", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ blendoverride != curveattrib }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "blend"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "blendattrib", label: "Blend Attrib", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ blendoverride != skinattrib }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "blend", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Blend Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "blendtexture", label: "Blend Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ blendoverride != texture }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "blend"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder0_1", label: "Operations", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template2 = new hou.MenuParmTemplate({name: "op", label: "Operation", menu_items: ["setlength", "bend"], menu_labels: ["Set Length", "Bend"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "setlength_mode", label: "Mode", menu_items: ["set", "multiply", "add", "subtract", "setmin", "setmax"], menu_labels: ["Set", "Multiply", "Add", "Subtract", "Set Maximum Length", "Set Minimum Length"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "setlength_method", label: "Method", menu_items: ["scale", "cutextend"], menu_labels: ["Scale", "Cut Or Extend"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "setlength_blend", label: "Blend", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "setlength_randomize", label: "Randomize", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "setlength_length", label: "Length", num_components: 1, default_value: [0.1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize != 0 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "setlength_lengthoverride", label: "Length Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize != 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_length"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "setlength_lengthoptions", label: "Length Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize != 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_length"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "setlength_lengthinrange", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ setlength_lengthoverride == none }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize != 0 } { setlength_lengthoptions != 1 setlength_lengthoptions != 3 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_length"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "setlength_lengthoutrange", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ setlength_lengthoverride == none }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize != 0 } { setlength_lengthoptions != 1 setlength_lengthoptions != 3 }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_length"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.RampParmTemplate({name: "setlength_lengthremapramp", label: "Length Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize != 0 } { setlength_lengthoptions != 2 setlength_lengthoptions != 3 }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_length"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "setlength_lengthcurveattrib", label: "Length Attrib", num_components: 1, default_value: ["length"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize != 0 } { setlength_lengthoverride != curveattrib }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_length"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "setlength_lengthattrib", label: "Length Attrib", num_components: 1, default_value: ["length"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize != 0 } { setlength_lengthoverride != skinattrib }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_length", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Length Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "setlength_lengthtexture", label: "Length Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize != 0 } { setlength_lengthoverride != texture }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_length"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "setlength_lengthtextureprim", label: "Length Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize != 0 } { setlength_lengthoverride != textureprim }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_length", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Length Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "setlength_lengthuvmode", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize != 0 } { setlength_lengthoverride != textureprim }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_length"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "setlength_lengthrandmin", label: "Min Length", num_components: 1, default_value: [0.1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize == 0 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "setlength_lengthrandminoverride", label: "Min Length Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize == 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_lengthrandmin"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "setlength_lengthrandminoptions", label: "Min Length Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize == 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_lengthrandmin"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "setlength_lengthrandmininrange", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ setlength_lengthrandminoverride == none }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize == 0 } { setlength_lengthrandminoptions != 1 setlength_lengthrandminoptions != 3 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_lengthrandmin"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "setlength_lengthrandminoutrange", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ setlength_lengthrandminoverride == none }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize == 0 } { setlength_lengthrandminoptions != 1 setlength_lengthrandminoptions != 3 }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_lengthrandmin"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.RampParmTemplate({name: "setlength_lengthrandminremapramp", label: "Min Length Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize == 0 } { setlength_lengthrandminoptions != 2 setlength_lengthrandminoptions != 3 }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_lengthrandmin"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "setlength_lengthrandmincurveattrib", label: "Min Length Attrib", num_components: 1, default_value: ["minlength"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize == 0 } { setlength_lengthrandminoverride != curveattrib }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_lengthrandmin"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "setlength_lengthrandminattrib", label: "Min Length Attrib", num_components: 1, default_value: ["minlength"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize == 0 } { setlength_lengthrandminoverride != skinattrib }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_lengthrandmin", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Min Length Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "setlength_lengthrandmintexture", label: "Min Length Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize == 0 } { setlength_lengthrandminoverride != texture }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_lengthrandmin"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "setlength_lengthrandmintextureprim", label: "Min Length Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize == 0 } { setlength_lengthrandminoverride != textureprim }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_lengthrandmin", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Min Length Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "setlength_lengthrandminuvmode", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize == 0 } { setlength_lengthrandminoverride != textureprim }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_lengthrandmin"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "setlength_lengthrandmax", label: "Max Length", num_components: 1, default_value: [0.2], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize == 0 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "setlength_lengthrandmaxoverride", label: "Max Length Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize == 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_lengthrandmax"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "setlength_lengthrandmaxoptions", label: "Max Length Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize == 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_lengthrandmax"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "setlength_lengthrandmaxinrange", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ setlength_lengthrandmaxoverride == none }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize == 0 } { setlength_lengthrandmaxoptions != 1 setlength_lengthrandmaxoptions != 3 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_lengthrandmax"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "setlength_lengthrandmaxoutrange", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ setlength_lengthrandmaxoverride == none }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize == 0 } { setlength_lengthrandmaxoptions != 1 setlength_lengthrandmaxoptions != 3 }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_lengthrandmax"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.RampParmTemplate({name: "setlength_lengthrandmaxremapramp", label: "Max Length Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize == 0 } { setlength_lengthrandmaxoptions != 2 setlength_lengthrandmaxoptions != 3 }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_lengthrandmax"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "setlength_lengthrandmaxcurveattrib", label: "Max Length Attrib", num_components: 1, default_value: ["maxlength"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize == 0 } { setlength_lengthrandmaxoverride != curveattrib }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_lengthrandmax"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "setlength_lengthrandmaxattrib", label: "Max Length Attrib", num_components: 1, default_value: ["maxlength"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize == 0 } { setlength_lengthrandmaxoverride != skinattrib }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_lengthrandmax", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Max Length Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "setlength_lengthrandmaxtexture", label: "Max Length Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize == 0 } { setlength_lengthrandmaxoverride != texture }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_lengthrandmax"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "setlength_lengthrandmaxtextureprim", label: "Max Length Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize == 0 } { setlength_lengthrandmaxoverride != textureprim }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_lengthrandmax", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Max Length Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "setlength_lengthrandmaxuvmode", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode == multiply } { setlength_randomize == 0 } { setlength_lengthrandmaxoverride != textureprim }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_lengthrandmax"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "setlength_scalefactor", label: "Scale Factor", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 1 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "setlength_scalefactoroverride", label: "Scale Factor Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 1 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_scalefactor"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "setlength_scalefactoroptions", label: "Scale Factor Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 1 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_scalefactor"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "setlength_scalefactorinrange", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ setlength_scalefactoroverride == none }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 1 } { setlength_scalefactoroptions != 1 setlength_scalefactoroptions != 3 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_scalefactor"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "setlength_scalefactoroutrange", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ setlength_scalefactoroverride == none }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 1 } { setlength_scalefactoroptions != 1 setlength_scalefactoroptions != 3 }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_scalefactor"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.RampParmTemplate({name: "setlength_scalefactorremapramp", label: "Scale Factor Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 1 } { setlength_scalefactoroptions != 2 setlength_scalefactoroptions != 3 }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_scalefactor"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "setlength_scalefactorcurveattrib", label: "Scale Factor Attrib", num_components: 1, default_value: ["scalefactor"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 1 } { setlength_scalefactoroverride != curveattrib }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_scalefactor"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "setlength_scalefactorattrib", label: "Scale Factor Attrib", num_components: 1, default_value: ["scalefactor"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 1 } { setlength_scalefactoroverride != skinattrib }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_scalefactor", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Scale Factor Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "setlength_scalefactortexture", label: "Scale Factor Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 1 } { setlength_scalefactoroverride != texture }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_scalefactor"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "setlength_scalefactortextureprim", label: "Scale Factor Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 1 } { setlength_scalefactoroverride != textureprim }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_scalefactor", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Scale Factor Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "setlength_scalefactoruvmode", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 1 } { setlength_scalefactoroverride != textureprim }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_scalefactor"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "setlength_scalefactorrandmin", label: "Min Scale Factor", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 0 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "setlength_scalefactorrandminoverride", label: "Min Scale Factor Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmin"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "setlength_scalefactorrandminoptions", label: "Min Scale Factor Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmin"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "setlength_scalefactorrandmininrange", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ setlength_scalefactorrandminoverride == none }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 0 } { setlength_scalefactorrandminoptions != 1 setlength_scalefactorrandminoptions != 3 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmin"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "setlength_scalefactorrandminoutrange", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ setlength_scalefactorrandminoverride == none }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 0 } { setlength_scalefactorrandminoptions != 1 setlength_scalefactorrandminoptions != 3 }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmin"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.RampParmTemplate({name: "setlength_scalefactorrandminremapramp", label: "Min Scale Factor Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 0 } { setlength_scalefactorrandminoptions != 2 setlength_scalefactorrandminoptions != 3 }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmin"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "setlength_scalefactorrandmincurveattrib", label: "Min Scale Factor Attrib", num_components: 1, default_value: ["scalefactormin"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 0 } { setlength_scalefactorrandminoverride != curveattrib }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmin"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "setlength_scalefactorrandminattrib", label: "Min Scale Factor Attrib", num_components: 1, default_value: ["scalefactormin"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 0 } { setlength_scalefactorrandminoverride != skinattrib }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmin", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Min Scale Factor Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "setlength_scalefactorrandmintexture", label: "Min Scale Factor Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 0 } { setlength_scalefactorrandminoverride != texture }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmin"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "setlength_scalefactorrandmintextureprim", label: "Min Scale Factor Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 0 } { setlength_scalefactorrandminoverride != textureprim }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmin", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Min Scale Factor Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "setlength_scalefactorrandminuvmode", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 0 } { setlength_scalefactorrandminoverride != textureprim }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmin"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "setlength_scalefactorrandmax", label: "Max Scale Factor", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 0 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "setlength_scalefactorrandmaxoverride", label: "Max Scale Factor Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmax"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "setlength_scalefactorrandmaxoptions", label: "Max Scale Factor Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmax"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "setlength_scalefactorrandmaxinrange", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ setlength_scalefactorrandmaxoverride == none }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 0 } { setlength_scalefactorrandmaxoptions != 1 setlength_scalefactorrandmaxoptions != 3 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmax"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "setlength_scalefactorrandmaxoutrange", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ setlength_scalefactorrandmaxoverride == none }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 0 } { setlength_scalefactorrandmaxoptions != 1 setlength_scalefactorrandmaxoptions != 3 }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmax"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.RampParmTemplate({name: "setlength_scalefactorrandmaxremapramp", label: "Max Scale Factor Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 0 } { setlength_scalefactorrandmaxoptions != 2 setlength_scalefactorrandmaxoptions != 3 }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmax"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "setlength_scalefactorrandmaxcurveattrib", label: "Max Scale Factor Attrib", num_components: 1, default_value: ["scalefactormax"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 0 } { setlength_scalefactorrandmaxoverride != curveattrib }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmax"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "setlength_scalefactorrandmaxattrib", label: "Max Scale Factor Attrib", num_components: 1, default_value: ["scalefactormax"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 0 } { setlength_scalefactorrandmaxoverride != skinattrib }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmax", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Max Scale Factor Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "setlength_scalefactorrandmaxtexture", label: "Max Scale Factor Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 0 } { setlength_scalefactorrandmaxoverride != texture }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmax"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "setlength_scalefactorrandmaxtextureprim", label: "Max Scale Factor Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 0 } { setlength_scalefactorrandmaxoverride != textureprim }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmax", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Max Scale Factor Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "setlength_scalefactorrandmaxuvmode", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength } { setlength_mode != multiply } { setlength_randomize == 0 } { setlength_scalefactorrandmaxoverride != textureprim }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmax"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "setlength_cullzerolen", label: "Cull Zero-Length Curves", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "setlength_cullthreshold", label: "Cull Threshold", num_components: 1, default_value: [0.0001], min: 1e-10, max: 0.01, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ setlength_cullzerolen == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != setlength }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "bend_blend", label: "Blend", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend }");
			hou_parm_template2.setTags({"units": ""});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "bend_axismode", label: "Mode", menu_items: ["rootdir", "dirconstant", "dircurveattrib", "dirskinattrib", "axisconstant", "axiscurveattrib", "axisskinattrib"], menu_labels: ["Bend in Root Direction", "Direction Constant", "Direction Curve Attribute", "Direction Skin Attribute", "Axis Constant", "Axis Curve Attribute", "Axis Skin Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "bend_axis", label: "Axis", num_components: 3, default_value: [0, 0, null], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_axismode != axisconstant }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "bend_axiscurveattrib", label: "Axis Attribute", num_components: 1, default_value: ["bendaxis"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0,\n            attribSize=3)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_axismode != axiscurveattrib }");
			hou_parm_template2.setTags({"script_action_icon": "SOP_comb"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "bend_axisskinattrib", label: "Axis Attribute", num_components: 1, default_value: ["bendaxis"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1,\n            attribSize=3)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_axismode != axisskinattrib }");
			hou_parm_template2.setTags({"script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(kwargs, kwargs['parmtuple'][0].eval(), skininput=1, mode='comb')", "script_action_icon": "SOP_comb"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "bend_dir", label: "Direction", num_components: 3, default_value: [0, 0, null], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_axismode != dirconstant }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "bend_dircurveattrib", label: "Direction Attribute", num_components: 1, default_value: ["benddir"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0,\n            attribSize=3)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_axismode != dircurveattrib }");
			hou_parm_template2.setTags({"script_action_icon": "SOP_comb"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "bend_dirskinattrib", label: "Direction Attribute", num_components: 1, default_value: ["benddir"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1,\n            attribSize=3)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_axismode != dirskinattrib }");
			hou_parm_template2.setTags({"script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(kwargs, kwargs['parmtuple'][0].eval(), skininput=1, mode='comb')", "script_action_icon": "SOP_comb"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "bend_dirtoaxis", label: "Axis Computation", menu_items: ["skinnormal", "rootdir", "tangent"], menu_labels: ["Cross Product of Skin Normal and Direction", "Cross Product of Root Tangent and Direction", "Cross Product of Local Tangent and  Direction"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_axismode != rootdir bend_axismode != dirconstant bend_axismode != dircurveattrib bend_axismode != dirskinattrib }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "bend_angle", label: "Angle", num_components: 1, default_value: [15], min: null, max: 90, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "bend_angleoverride", label: "Angle Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_angle"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "bend_angleoptions", label: "Angle Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_angle"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "bend_angleinrange", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ bend_angleoverride == none }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_angleoptions != 1 bend_angleoptions != 3 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_angle"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "bend_angleoutrange", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ bend_angleoverride == none }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_angleoptions != 1 bend_angleoptions != 3 }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_angle"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "bend_anglemapramptobarbs", label: "Map Ramp to Barbs", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_angleoptions != 2 bend_angleoptions != 3 }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_angle"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.RampParmTemplate({name: "bend_angleremapramp", label: "Angle Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_angleoptions != 2 bend_angleoptions != 3 }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_angle"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "bend_anglecurveattrib", label: "Angle Attrib", num_components: 1, default_value: ["anglescale"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_angleoverride != curveattrib }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_angle"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "bend_angleattrib", label: "Angle Attrib", num_components: 1, default_value: ["anglescale"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_angleoverride != skinattrib }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_angle", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Angle Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "bend_angletexture", label: "Angle Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_angleoverride != texture }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_angle"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "bend_angletextureprim", label: "Angle Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_angleoverride != textureprim }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_angle", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Angle Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "bend_angleuvmode", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_angleoverride != textureprim }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_angle"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "bend_anglerand", label: "Random Angle", num_components: 1, default_value: [0], min: 0, max: 90, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "bend_anglerandoverride", label: "Random Angle Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_anglerand"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "bend_anglerandoptions", label: "Random Angle Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_anglerand"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "bend_anglerandinrange", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ bend_anglerandoverride == none }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_anglerandoptions != 1 bend_anglerandoptions != 3 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_anglerand"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "bend_anglerandoutrange", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ bend_anglerandoverride == none }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_anglerandoptions != 1 bend_anglerandoptions != 3 }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_anglerand"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.RampParmTemplate({name: "bend_anglerandremapramp", label: "Random Angle Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_anglerandoptions != 2 bend_anglerandoptions != 3 }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_anglerand"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "bend_anglerandcurveattrib", label: "Random Angle Attrib", num_components: 1, default_value: ["anglerandscale"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_anglerandoverride != curveattrib }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_anglerand"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "bend_anglerandattrib", label: "Random Angle Attrib", num_components: 1, default_value: ["anglerandscale"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_anglerandoverride != skinattrib }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_anglerand", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Random Angle Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "bend_anglerandtexture", label: "Random Angle Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_anglerandoverride != texture }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_anglerand"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "bend_anglerandtextureprim", label: "Random Angle Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_anglerandoverride != textureprim }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_anglerand", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Random Angle Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "bend_angleranduvmode", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_anglerandoverride != textureprim }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_anglerand"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "bend_anglerandbias", label: "Randomness Bias", num_components: 1, default_value: [0.5], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "bend_anglerandbiasoverride", label: "Randomness Bias Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_anglerandbias"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "bend_anglerandbiasoptions", label: "Randomness Bias Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_anglerandbias"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "bend_anglerandbiasinrange", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ bend_anglerandbiasoverride == none }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_anglerandbiasoptions != 1 bend_anglerandbiasoptions != 3 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_anglerandbias"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "bend_anglerandbiasoutrange", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ bend_anglerandbiasoverride == none }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_anglerandbiasoptions != 1 bend_anglerandbiasoptions != 3 }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_anglerandbias"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.RampParmTemplate({name: "bend_anglerandbiasremapramp", label: "Randomness Bias Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_anglerandbiasoptions != 2 bend_anglerandbiasoptions != 3 }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_anglerandbias"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "bend_anglerandbiascurveattrib", label: "Randomness Bias Attrib", num_components: 1, default_value: ["anglerandbiasscale"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_anglerandbiasoverride != curveattrib }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_anglerandbias"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "bend_anglerandbiasattrib", label: "Randomness Bias Attrib", num_components: 1, default_value: ["anglerandbiasscale"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_anglerandbiasoverride != skinattrib }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_anglerandbias", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Randomness Bias Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "bend_anglerandbiastexture", label: "Randomness Bias Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_anglerandbiasoverride != texture }");
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_anglerandbias"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "bend_anglerandbiastextureprim", label: "Randomness Bias Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_anglerandbiasoverride != textureprim }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_anglerandbias", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Randomness Bias Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "bend_anglerandbiasuvmode", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ op != bend } { bend_anglerandbiasoverride != textureprim }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setTags({"parmoverride_mainparm": "bend_anglerandbias"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			
            this.parmTemplateGroup = hou_parm_template_group;
            this.parmTemplateGroup.linkNode(this);
        }
    }
    hou.registerType('SOP/Other/guideprocesscore',_hnt_SOP_guideprocesscore)
    return _hnt_SOP_guideprocesscore
}
        