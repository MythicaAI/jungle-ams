
export default function (hou) {
    class _hnt_SOP_particlefluidsurface__3_0 extends hou.extend(hou._HoudiniBase).with(hou._SubgraphMixin) {
        static is_root = false;
        static id = 'SOP/Dynamics/Fluids/particlefluidsurface::3.0';
        static category = '/SOP';
        static houdiniType = 'particlefluidsurface::3.0';
        static title = 'Particle Fluid Surface';
        static icon = '/editor/assets/imgs/nodes/_hnt_SOP_particlefluidsurface__3_0.svg';
        constructor() {
            super();
            this.flags['houdini_type'] = this.__proto__.constructor.houdiniType;
            
            const inputs = ['SOP', 'SOP', 'SOP', 'SOP'];
            const outputs = ['SOP'];

            for(var i=0;i<inputs.length;i++) this.addInput(''+i,inputs[i]);        
            for(var j=0;j<outputs.length;j++) this.addOutput(''+j,outputs[j]);
        }
        parmTemplatesInit() {
            let hou_parm_template_group = new hou.ParmTemplateGroup();
			this.parmTemplateGroup = hou_parm_template_group;
			let hou_parm_template = new hou.FolderParmTemplate({name: "folder1", label: "Surfacing", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			let hou_parm_template2 = new hou.MenuParmTemplate({name: "surfmethod", label: "Method", menu_items: ["particlefluid", "particles"], menu_labels: ["Average Position", "Spherical"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "particlesep", label: "Particle Separation", num_components: 1, default_value: [0.1], min: 0.001, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ hasinput(1) == 1 }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "voxelsize", label: "Voxel Scale", num_components: 1, default_value: [0.75], min: 0.01, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "influenceradius", label: "Influence Scale", num_components: 1, default_value: [3], min: 0.01, max: 5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ surfmethod != particlefluid }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "surfacedistance", label: "Droplet Scale", num_components: 1, default_value: [1], min: 0.01, max: 5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ surfmethod != particlefluid }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "limititerations", label: "Label", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ surfmethod != particlefluid }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "resamplingiterations", label: "Limit Refinement Iterations", num_components: 1, default_value: [0], min: 0, max: 6, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ limititerations == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ surfmethod != particlefluid }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "minvoxelradius", label: "Min Radius in Voxels", num_components: 1, default_value: [1.5], min: 0, max: 2, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ surfmethod != particles }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "preservebubbles", label: "Preserve Bubbles", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ surfmethod == particlefluid }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "dosurfunion", label: "Union Compressed Fluid Surface", default_value: true});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "surferosion", label: "Erosion Scale", num_components: 1, default_value: [0.8], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dosurfunion == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder0", label: "Output", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			let hou_parm_template3 = new hou.MenuParmTemplate({name: "conversion", label: "Convert To", menu_items: ["particles", "particlesurf", "surf", "vdb", "poly", "polysoup"], menu_labels: ["Particles", "Particles and Compressed Fluid Surface", "Compressed Fluid Surface", "Surface VDB", "Surface Polygons", "Surface Polygon Soup"], default_value: 5, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "isovalue", label: "Isovalue", num_components: 1, default_value: [0], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ conversion != surf conversion != particlesurf conversion != poly conversion != polysoup }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "adaptivity", label: "Adaptivity", num_components: 1, default_value: [0.005], min: 0, max: 2, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ conversion != surf conversion != particlesurf conversion != poly conversion != polysoup }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "dotransferattribs", label: "dotransferattribs", default_value: true});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ conversion == particles } { conversion == vdb }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "transferattribs", label: "Transfer Attributes", num_components: 1, default_value: ["v vorticity rest rest2"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ conversion == particles } { conversion == vdb } { dotransferattribs == 0 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "attribradius", label: "Attribute Radius", num_components: 1, default_value: [2], min: 1, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ conversion == particles } { dotransferattribs == 0 } { conversion == particles }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "attribsamples", label: "Attribute Samples", num_components: 1, default_value: [10], min: 1, max: 40, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ conversion == particles } { dotransferattribs == 0 } { conversion == particles }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "visualize", label: "Visualize", menu_items: ["none", "velocity", "vorticity"], menu_labels: ["None", "Velocity", "Vorticity"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ velvis == 0 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "velvisrange", label: "Velocity Range", num_components: 2, default_value: [0, 10], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ visualize != velocity }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.RampParmTemplate({name: "velvisramp", label: "Velocity Ramp", ramp_parm_type: hou.rampParmType.Color, default_value: 3, default_basis: null, color_type: null});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ visualize != velocity }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "parmvop": "1", "rampbasis_var": "ramp_the_basis_strings", "rampbasisdefault": "linear", "rampcolordefault": "1pos ( 0 ) 1c ( 0 0 0.89999997615814209 ) 1interp ( linear ) 2pos ( 0.50579148530960083 ) 2c ( 0 0.90000000000000002 0.90000000000000002 ) 2interp ( linear ) 3pos ( 1 ) 3c ( 1 1 1 ) 3interp ( linear )", "rampcolortype": "rgb", "rampkeys_var": "ramp_the_key_positions", "rampshowcontrolsdefault": "0", "rampvalues_var": "ramp_the_key_values", "shaderparmcontexts": "cvex"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vorticityvisrange", label: "Vorticity Range", num_components: 2, default_value: [0, 50], min: 0, max: 100, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ visualize != vorticity }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.RampParmTemplate({name: "vorticityvisramp", label: "Vorticity Ramp", ramp_parm_type: hou.rampParmType.Color, default_value: 3, default_basis: null, color_type: null});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ visualize != vorticity }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "parmvop": "1", "rampbasis_var": "vecramp_the_basis_strings", "rampbasisdefault": "linear", "rampcolordefault": "1pos ( 0 ) 1c ( 0 0 0.89999997615814209 ) 1interp ( linear ) 2pos ( 0.5 ) 2c ( 0 0.89999997615814209 0.89999997615814209 ) 2interp ( linear ) 3pos ( 1 ) 3c ( 1 1 1 ) 3interp ( linear )", "rampcolortype": "rgb", "rampkeys_var": "vecramp_the_key_positions", "rampshowcontrolsdefault": "0", "rampvalues_var": "vecramp_the_key_values"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder1_1", label: "Filtering", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "dodilate", label: "Label", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ conversion != vdb conversion != poly conversion != polysoup }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "dilateoffset", label: "Dilate", num_components: 1, default_value: [2], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dodilate == 0 } { conversion != vdb conversion != poly conversion != polysoup }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "dilatemask", label: "Mask", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dodilate == 0 } { conversion != vdb conversion != poly conversion != polysoup }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "dosmooth", label: "Label", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ conversion != vdb conversion != poly conversion != polysoup }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "smoothoperation", label: "Smooth", num_components: 1, default_value: ["meancurvature"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["meanvalue", "gaussian", "medianvalue", "meancurvature", "laplacianflow"], menu_labels: ["Mean Value", "Gaussian", "Median Value", "Mean Curvature Flow", "Laplacian Flow"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dosmooth == 0 } { conversion != vdb conversion != poly conversion != polysoup }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "smoothiterations", label: "Iterations", num_components: 1, default_value: [2], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dosmooth == 0 } { conversion != vdb conversion != poly conversion != polysoup }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "smoothmask", label: "Mask", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dosmooth == 0 } { conversion != vdb conversion != poly conversion != polysoup }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "doerode", label: "Label", default_value: false, default_expression: "ch(\"dodilate\")", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ conversion != vdb conversion != poly conversion != polysoup }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "erodeoffset", label: "Erode", num_components: 1, default_value: [0], default_expression: ["ch(\"dilateoffset\")"], default_expression_language: [hou.scriptLanguage.Hscript], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ doerode == 0 } { conversion != vdb conversion != poly conversion != polysoup }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "erodemask", label: "Mask", default_value: false, default_expression: "ch(\"dilatemask\")", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ doerode == 0 } { conversion != vdb conversion != poly conversion != polysoup }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "dofinalsmooth", label: "Label", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ conversion != vdb conversion != poly conversion != polysoup }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "finalsmoothoperation", label: "Final Smooth", num_components: 1, default_value: ["meanvalue"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["meanvalue", "gaussian", "medianvalue", "meancurvature", "laplacianflow"], menu_labels: ["Mean Value", "Gaussian", "Median Value", "Mean Curvature Flow", "Laplacian Flow"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dofinalsmooth == 0 } { conversion != vdb conversion != poly conversion != polysoup }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "finalsmoothiterations", label: "Iterations", num_components: 1, default_value: [2], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dofinalsmooth == 0 } { conversion != vdb conversion != poly conversion != polysoup }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "finalsmoothmask", label: "Mask", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dofinalsmooth == 0 } { conversion != vdb conversion != poly conversion != polysoup }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder3", label: "Mask", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "velmask", label: "velmask", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ conversion != vdb conversion != poly conversion != polysoup } { finalsmoothmask == 0 erodemask == 0 smoothmask == 0 dilatemask == 0 maskvis == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "velmaskrange", label: "Velocity Range", num_components: 2, default_value: [0.5, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ velmask == 0 } { conversion != vdb conversion != poly conversion != polysoup } { finalsmoothmask == 0 erodemask == 0 smoothmask == 0 dilatemask == 0 maskvis == 0 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vorticitymask", label: "vorticitymask", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ conversion != vdb conversion != poly conversion != polysoup } { finalsmoothmask == 0 erodemask == 0 smoothmask == 0 dilatemask == 0 maskvis == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vorticitymaskrange", label: "Vorticity Range", num_components: 2, default_value: [1, 4], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vorticitymask == 0 } { conversion != vdb conversion != poly conversion != polysoup } { finalsmoothmask == 0 erodemask == 0 smoothmask == 0 dilatemask == 0 maskvis == 0 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "colmask", label: "colmask", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ conversion != vdb conversion != poly conversion != polysoup } { finalsmoothmask == 0 erodemask == 0 smoothmask == 0 dilatemask == 0 maskvis == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "colmaskoffset", label: "Collision Offset", num_components: 1, default_value: [0.02], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ colmask == 0 } { conversion != vdb conversion != poly conversion != polysoup } { finalsmoothmask == 0 erodemask == 0 smoothmask == 0 dilatemask == 0 maskvis == 0 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "mask", label: "mask", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ conversion != vdb conversion != poly conversion != polysoup } { finalsmoothmask == 0 erodemask == 0 smoothmask == 0 dilatemask == 0 maskvis == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "maskname", label: "Mask Input", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a FILTER/blast1 group", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.StringToggle});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ mask == 0 } { conversion != vdb conversion != poly conversion != polysoup } { finalsmoothmask == 0 erodemask == 0 smoothmask == 0 dilatemask == 0 maskvis == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "script_action": "import soputils\nkwargs['geometrytype'] = kwargs['node'].parmTuple('grouptype')\nkwargs['inputindex'] = 0\nsoputils.selectGroupParm(kwargs)", "script_action_help": "Select geometry from an available viewport.\nShift-click to turn on Select Groups.", "script_action_icon": "BUTTONS_reselect"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "maskcombineop", label: "Combine Operation", menu_items: ["min", "max", "avg", "mult", "over"], menu_labels: ["Minimum", "Maximum", "Average", "Multiply", "Over"], default_value: 4, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ conversion != vdb conversion != poly conversion != polysoup } { velmask == 0 vorticitymask == 0 colmask == 0 mask == 0 } { finalsmoothmask == 0 erodemask == 0 smoothmask == 0 dilatemask == 0 maskvis == 0 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "domasksmooth", label: "domasksmooth", default_value: true});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ conversion != vdb conversion != poly conversion != polysoup } { velmask == 0 vorticitymask == 0 colmask == 0 mask == 0 } { finalsmoothmask == 0 erodemask == 0 smoothmask == 0 dilatemask == 0 maskvis == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "masksmoothop", label: "Mask Smooth", num_components: 1, default_value: ["mean"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["mean", "gauss", "median"], menu_labels: ["Mean Value", "Gaussian", "Median Value"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ domasksmooth == 0 } { conversion != vdb conversion != poly conversion != polysoup } { velmask == 0 vorticitymask == 0 colmask == 0 mask == 0 } { finalsmoothmask == 0 erodemask == 0 smoothmask == 0 dilatemask == 0 maskvis == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "masksmoothiterations", label: "Iterations", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ domasksmooth == 0 } { conversion != vdb conversion != poly conversion != polysoup } { finalsmoothmask == 0 erodemask == 0 smoothmask == 0 dilatemask == 0 maskvis == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "restrictmask", label: "restrictmask", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ conversion != vdb conversion != poly conversion != polysoup } { finalsmoothmask == 0 erodemask == 0 smoothmask == 0 dilatemask == 0 maskvis == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "restrictmaskwidth", label: "Limit Bandwidth", num_components: 1, default_value: [2], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ restrictmask == 0 } { conversion != vdb conversion != poly conversion != polysoup } { finalsmoothmask == 0 erodemask == 0 smoothmask == 0 dilatemask == 0 maskvis == 0 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "maskvis", label: "Visualize Mask", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ conversion != vdb conversion != poly conversion != polysoup }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.RampParmTemplate({name: "maskvisramp", label: "Mask Ramp", ramp_parm_type: hou.rampParmType.Color, default_value: 5, default_basis: null, color_type: null});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ conversion != vdb conversion != poly conversion != polysoup }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ maskvis == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "parmvop": "1", "rampbasis_var": "ramp_the_basis_strings", "rampbasisdefault": "linear", "rampcolordefault": "1pos ( 0 ) 1c ( 0.20000000000000001 0 1 ) 1interp ( linear ) 2pos ( 0.25 ) 2c ( 0 0.84999999999999998 1 ) 2interp ( linear ) 3pos ( 0.5 ) 3c ( 0 1 0.10000000149011612 ) 3interp ( linear ) 4pos ( 0.75 ) 4c ( 0.94999999999999996 1 0 ) 4interp ( linear ) 5pos ( 1 ) 5c ( 1 0 0 ) 5interp ( linear )", "rampcolortype": "rgb", "rampkeys_var": "ramp_the_key_positions", "rampshowcontrolsdefault": "0", "rampvalues_var": "ramp_the_key_values", "shaderparmcontexts": "cvex"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder1_2", label: "Regions", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2 = new hou.FloatParmTemplate({name: "regionvoxelsize", label: "Region Voxel Scale", num_components: 1, default_value: [4], min: 1, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dobbox == 0 docamera == 0 docollisions == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder7", label: "Container", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_default": "1", "group_type": "collapsible", "sidefx::header_toggle": "docontainer"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "docontainer", label: "Container", default_value: true});
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "closedcontainer", label: "Closed Boundaries", default_value: true});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ docontainer == 0 }");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder6", label: "Collisions", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_default": "1", "group_type": "collapsible", "sidefx::header_toggle": "docollisions"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "docollisions", label: "Subtract Collision Volumes", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ conversion == particles }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "collisionoffset", label: "Collision Offset", num_components: 1, default_value: [0.001], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ docollisions == 0 } { conversion == particles }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder4", label: "Bounding Box", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_default": "1", "group_type": "collapsible", "sidefx::header_toggle": "dobbox"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "dobbox", label: "Use Bounding Box", default_value: false});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "size", label: "Size", num_components: 3, default_value: [50, 50, 50], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ dobbox == 0 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "t", label: "Center", num_components: 3, default_value: [0, 0, 0], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ dobbox == 0 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "closedends", label: "Closed Boundaries", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ conversion == particles } { dobbox == 0 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "folder2", label: "Flatten outside Bounding Box", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setTags({"group_default": "0", "group_type": "collapsible", "sidefx::header_toggle": "flattengeo"});
			let hou_parm_template4 = new hou.ToggleParmTemplate({name: "flattengeo", label: "Flatten Geometry", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ conversion == particles } { dobbox == 0 }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.MenuParmTemplate({name: "flattenrebuild", label: "Rebuild SDF", menu_items: ["off", "on", "adaptive"], menu_labels: ["None", "Full Resolution", "Adaptive"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ conversion == particles } { dobbox == 0 } { flattengeo == 0 }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "flattenattrib", label: "Output Flattened Attribute", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ conversion == particles } { dobbox == 0 } { flattengeo == 0 }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "flattendocolsuppress", label: "Suppress Near Collisions", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ conversion == particles } { dobbox == 0 } { flattengeo == 0 }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "flattencolsuppress", label: "Collision Bandwidth", num_components: 1, default_value: [2], min: 0, max: 4, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ conversion == particles } { dobbox == 0 } { flattengeo == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ flattendocolsuppress == 0 }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.MenuParmTemplate({name: "flattenplane", label: "Plane", menu_items: ["xy", "yz", "zx"], menu_labels: ["XY Plane", "YZ Plane", "ZX Plane"], default_value: 2, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ conversion == particles } { dobbox == 0 } { flattengeo == 0 }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.MenuParmTemplate({name: "flattenshape", label: "Shape", menu_items: ["rectangle", "circle"], menu_labels: ["Rectangle", "Circle"], default_value: 0, default_expression: "zx", default_expression_language: hou.scriptLanguage.Hscript, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ conversion == particles } { dobbox == 0 } { flattengeo == 0 }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "waterlevel", label: "Water Level", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ conversion == particles } { dobbox == 0 } { flattengeo == 0 }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "flattenheight", label: "Max Height", num_components: 1, default_value: [0.5], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ conversion == particles } { dobbox == 0 } { flattengeo == 0 }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "flattendist", label: "Flatten Distance", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ conversion == particles } { dobbox == 0 } { flattengeo == 0 }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "flattendopad", label: "Label", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ conversion == particles } { dobbox == 0 } { flattengeo == 0 }");
			hou_parm_template4.hideLabel(true);
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "flattenpad", label: "Pad Bounds", num_components: 2, default_value: [1, 1], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ conversion == particles } { dobbox == 0 } { flattengeo == 0 } { flattendopad == 0 }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.MenuParmTemplate({name: "flattendoextrude", label: "Extrude Polygons", menu_items: ["none", "planar", "peraxis"], menu_labels: ["None", "Planar", "Along Each Axis"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ flattendopad == 0 } { closedends == 1 } { conversion != surf conversion != poly conversion != polysoup } { dobbox == 0 } { flattengeo == 0 }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "flattenextrudedist", label: "Extrude Distance", num_components: 1, default_value: [10], min: 0, max: 100, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ flattendopad == 0 } { closedends == 1 } { conversion != surf conversion != poly conversion != polysoup } { dobbox == 0 } { flattengeo == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ flattendoextrude == none }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.IntParmTemplate({name: "flattenextrudediv", label: "Extrude Divisions", num_components: 1, default_value: [4], min: 0, max: 100, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ flattendopad == 0 } { closedends == 1 } { conversion != surf conversion != poly conversion != polysoup } { dobbox == 0 } { flattengeo == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ flattendoextrude == none }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "flattendoedgegrp", label: "Label", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ flattendopad == 0 } { closedends == 1 } { conversion != surf conversion != poly conversion != polysoup } { dobbox == 0 } { flattengeo == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ flattendoextrude == none }");
			hou_parm_template4.hideLabel(true);
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template4.setTags({"autoscope": "0000000000000000"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "flattenedgegrp", label: "Output Edge Group", num_components: 1, default_value: ["boundary"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ flattendoedgegrp == 0 } { flattendopad == 0 } { closedends == 1 } { conversion != surf conversion != poly conversion != polysoup } { dobbox == 0 } { flattengeo == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ flattendoextrude == none }");
			hou_parm_template4.setTags({"autoscope": "0000000000000000"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder5", label: "Camera", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_default": "1", "group_type": "collapsible", "sidefx::header_toggle": "docamera"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "docamera", label: "Camera", default_value: false});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "camera", label: "Camera", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.NodeReference, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ docamera == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "opfilter": "!!OBJ/CAMERA!!", "oprelative": "."});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "zmin", label: "Z Near", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ docamera == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "zmax", label: "Z Far", num_components: 1, default_value: [2], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ docamera == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "usecamwindow", label: "Use Camera's Window", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ docamera == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "winx", label: "Window X", num_components: 2, default_value: [null, 1.1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ docamera == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "winy", label: "Window Y", num_components: 2, default_value: [null, 1.1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ docamera == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "closedfrustum", label: "Closed Frustum", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ docamera == 0 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			
            this.parmTemplateGroup = hou_parm_template_group;
            this.parmTemplateGroup.linkNode(this);
        }
    }
    hou.registerType('SOP/Dynamics/Fluids/particlefluidsurface::3.0',_hnt_SOP_particlefluidsurface__3_0)
    return _hnt_SOP_particlefluidsurface__3_0
}
        