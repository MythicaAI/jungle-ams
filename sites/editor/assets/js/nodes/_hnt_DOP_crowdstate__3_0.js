
export default function (hou) {
    class _hnt_DOP_crowdstate__3_0 extends hou.extend(hou._HoudiniBase).with(hou._SubgraphMixin) {
        static is_root = false;
        static id = 'DOP/Crowds/crowdstate::3.0';
        static category = '/DOP';
        static houdiniType = 'crowdstate::3.0';
        static title = 'Crowd State';
        static icon = '/editor/assets/imgs/nodes/_hnt_DOP_crowdstate__3_0.svg';
        constructor() {
            super();
            this.flags['houdini_type'] = this.__proto__.constructor.houdiniType;
            
            const inputs = [];
            const outputs = ['DOP', 'DOP', 'DOP', 'DOP'];

            for(var i=0;i<inputs.length;i++) this.addInput(''+i,inputs[i]);        
            for(var j=0;j<outputs.length;j++) this.addOutput(''+j,outputs[j]);
        }
        parmTemplatesInit() {
            let hou_parm_template_group = new hou.ParmTemplateGroup();
			this.parmTemplateGroup = hou_parm_template_group;
			let hou_parm_template = new hou.StringParmTemplate({name: "streamname", label: "Stream Name", num_components: 1, default_value: ["hou.phm().buildStreamName()"], default_expression: ["hou.phm().buildStreamName()"], default_expression_language: [hou.scriptLanguage.Python], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template.hide(true);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "statename", label: "State Name", num_components: 1, default_value: ["$OS"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.MenuParmTemplate({name: "rbdragdoll", label: "RBD Ragdoll", menu_items: ["active", "static", "ignore"], menu_labels: ["Active", "Animated Static", "Ignore"], default_value: 2, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.SeparatorParmTemplate({name: "sepparm5"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "stiffness", label: "Stiffness", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_default": "1", "group_type": "collapsible", "sidefx::header_toggle": "ragdoll_enablestiffness"});
			hou_parm_template.setTabConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll != active }");
			hou_parm_template.setTabConditional(hou.parmCondType.HideWhen, "{ rbdragdoll != active }");
			let hou_parm_template2 = new hou.ToggleParmTemplate({name: "ragdoll_enablestiffness", label: "Enable Stiffness", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll != active }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ rbdragdoll != active }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "ragdoll_stiffnessgroup", label: "Group", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import crowdstoolutils\nreturn crowdstoolutils.buildDopTransformGroupMenu(hou.pwd())", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll != active } { ragdoll_enablestiffness == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ rbdragdoll != active }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "ragdoll_stiffnessvalue", label: "Stiffness Value", menu_items: ["constant", "ramp"], menu_labels: ["Constant", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll != active } { ragdoll_enablestiffness == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ rbdragdoll != active }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "ragdoll_stiffness", label: "Stiffness", num_components: 1, default_value: [0.2], min: 0, max: 5, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll != active } { ragdoll_enablestiffness == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ rbdragdoll != active } { ragdoll_stiffnessvalue != constant }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "ragdoll_stiffnessramprange", label: "Time Range", num_components: 2, default_value: [0, 1.5], min: 0, max: 5, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.MinMax});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll != active } { ragdoll_enablestiffness == 0 } { ragdoll_stiffnessvalue != ramp } { ragdoll_stiffnessscale == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ rbdragdoll != active } { ragdoll_stiffnessvalue != ramp }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "ragdoll_stiffnessscale", label: "Stiffness Scale", num_components: 1, default_value: [1], min: 0, max: 5, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll != active } { ragdoll_enablestiffness == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ rbdragdoll != active } { ragdoll_stiffnessvalue != ramp }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.RampParmTemplate({name: "ragdoll_stiffnessramp", label: "Stiffness Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll != active } { ragdoll_enablestiffness == 0 } { ragdoll_stiffnessvalue != ramp } { ragdoll_stiffnessscale == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ rbdragdoll != active } { ragdoll_stiffnessvalue != ramp }");
			hou_parm_template2.setTags({"rampfloatdefault": "1pos ( 0 ) 1value ( 0.40000000000000002 ) 1interp ( linear ) 2pos ( 1 ) 2value ( 0.10000000000000001 ) 2interp ( linear )", "rampshowcontrolsdefault": "0"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "ragdoll_stiffnesscfm", label: "Constraint Force Mixing", num_components: 1, default_value: [0.01], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll != active } { ragdoll_enablestiffness == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ rbdragdoll != active }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "partialragdoll", label: "Partial Ragdoll", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_default": "1", "group_type": "collapsible", "sidefx::header_toggle": "ragdoll_enablepartial"});
			hou_parm_template.setTabConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll != active }");
			hou_parm_template.setTabConditional(hou.parmCondType.HideWhen, "{ rbdragdoll != active }");
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "ragdoll_enablepartial", label: "Enable Partial Ragdoll", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll != active }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ rbdragdoll != active }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "ragdoll_activegroup", label: "Active Group", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import crowdstoolutils\nreturn crowdstoolutils.buildDopTransformGroupMenu(hou.pwd())", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll != active } { ragdoll_enablepartial == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ rbdragdoll != active }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "motor", label: "Motors", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_default": "1", "group_type": "collapsible", "sidefx::header_toggle": "ragdoll_enablemotor"});
			hou_parm_template.setTabConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll != active }");
			hou_parm_template.setTabConditional(hou.parmCondType.HideWhen, "{ rbdragdoll != active }");
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "ragdoll_enablemotor", label: "Enable Motor", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll != active }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ rbdragdoll != active }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "ragdoll_motorgroup", label: "Group", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import crowdstoolutils\nreturn crowdstoolutils.buildDopTransformGroupMenu(hou.pwd())", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll != active } { ragdoll_enablemotor == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ rbdragdoll != active }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "ragdoll_motorstrengthvalue", label: "Strength Value", menu_items: ["constant", "ramp"], menu_labels: ["Constant", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll != active } { ragdoll_enablemotor == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ rbdragdoll != active }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "ragdoll_motorstrength", label: "Motor Strength", num_components: 1, default_value: [10], min: 0, max: 5, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll != active } { ragdoll_enablemotor == 0 } { ragdoll_motorstrengthvalue != constant }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ rbdragdoll != active } { ragdoll_motorstrengthvalue != constant }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "ragdoll_motorstrengthramprange", label: "Time Range", num_components: 2, default_value: [0, 1.5], min: 0, max: 5, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.MinMax});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll != active } { ragdoll_enablemotor == 0 } { ragdoll_motorstrengthvalue != ramp }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ rbdragdoll != active } { ragdoll_motorstrengthvalue != ramp }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "ragdoll_motorstrengthscale", label: "Strength Scale", num_components: 1, default_value: [10], min: 0, max: 5, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll != active } { ragdoll_enablemotor == 0 } { ragdoll_motorstrengthvalue != ramp }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ rbdragdoll != active } { ragdoll_motorstrengthvalue != ramp }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.RampParmTemplate({name: "ragdoll_motorstrengthramp", label: "Strength Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll != active } { ragdoll_enablemotor == 0 } { ragdoll_motorstrengthvalue != ramp }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ rbdragdoll != active } { ragdoll_motorstrengthvalue != ramp }");
			hou_parm_template2.setTags({"rampfloatdefault": "1pos ( 0 ) 1value ( 1 ) 1interp ( linear ) 2pos ( 1 ) 2value ( 0 ) 2interp ( linear )", "rampshowcontrolsdefault": "0"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "ragdoll_motorcorrectiontime", label: "Correction Time", num_components: 1, default_value: [0.2], min: 0, max: 2, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll != active } { ragdoll_enablemotor == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ rbdragdoll != active }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "ragdoll_motorcfm", label: "Constraint Force Mixing", num_components: 1, default_value: [0.01], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll != active } { ragdoll_enablemotor == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ rbdragdoll != active }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder_stickycollisions", label: "Sticky Collisions", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll == ignore }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ rbdragdoll == ignore }");
			hou_parm_template.setTags({"group_type": "collapsible"});
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "ragdoll_enablestickycollisiongroup", label: "Enable Sticky Collision Group", default_value: false});
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "ragdoll_stickycollisiongroup", label: "Group", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import crowdstoolutils\nreturn crowdstoolutils.buildDopTransformGroupMenu(hou.pwd())", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ ragdoll_enablestickycollisiongroup == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "ragdoll_setminstickycollisionimpulse", label: "Set Min Sticky Collision Impulse", default_value: false});
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "ragdoll_minstickycollisionimpulse", label: "Min Collision Impulse", num_components: 1, default_value: [null], min: null, max: 10000, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ ragdoll_setminstickycollisionimpulse == 0 }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "ragdoll_setmaxstickycollisionobjects", label: "Set Max Sticky Collision Objects", default_value: false});
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "ragdoll_maxstickycollisionobjects", label: "Max Collision Objects per Shape", num_components: 1, default_value: [null], min: null, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ ragdoll_setmaxstickycollisionobjects == 0 }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "ragdoll_setmaxstickycollisionpoints", label: "Set Max Sticky Collision Points", default_value: false});
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "ragdoll_maxstickycollisionpoints", label: "Max Collision Points", num_components: 1, default_value: [null], min: null, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ ragdoll_setmaxstickycollisionpoints == 0 }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "ragdoll_setstickycollisionignore", label: "Set Sticky Collision Ignore", default_value: false});
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "ragdoll_stickycollisionignore", label: "Collision Ignore", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import doppoptoolutils\nreturn doppoptoolutils.buildDopObjectMenu(hou.pwd())", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ ragdoll_setstickycollisionignore == 0 }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.SeparatorParmTemplate({name: "sepparm3"});
			hou_parm_template.hide(true);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ToggleParmTemplate({name: "randomclipname", label: "Randomize Clips", default_value: false});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 }");
			hou_parm_template.hide(true);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder1", label: "Clips", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template.setTabConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 }");
			hou_parm_template.setTabConditional(hou.parmCondType.HideWhen, "{ rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 }");
			hou_parm_template2 = new hou.MenuParmTemplate({name: "clipassignment", label: "Clip Assignment", menu_items: ["none", "single", "random"], menu_labels: ["None", "Single Clip", "Random Distribution"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "clipname", label: "Clip Name", num_components: 1, default_value: ["$OS"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import crowdstoolutils\nreturn crowdstoolutils.buildDopClipMenu(hou.pwd())", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ clipassignment != single } { rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "randomclipnameseed", label: "Random Seed", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ clipassignment != random } { rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "numclippatterns", label: "Clip Groups", folder_type: hou.folderType.MultiparmBlock, default_value: 1, ends_tab_group: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ clipassignment != random } { rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 }");
			let hou_parm_template3 = new hou.StringParmTemplate({name: "clippattern_#", label: "Clip Names", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import crowdstoolutils\nreturn crowdstoolutils.buildDopClipMenu(hou.pwd())", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "clipweight_#", label: "Weight", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "clipselection", label: "Clip Selection", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.hide(true);
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template2.setTabConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 }");
			hou_parm_template2.setTabConditional(hou.parmCondType.HideWhen, "{ clipassignment != random } { rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.SeparatorParmTemplate({name: "sepparm"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "setinitialclipname", label: "Set Initial Clip Name", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 } { clipassignment == none }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "setinitialcliptime", label: "Set Initial Clip Time", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "globalclipoffset", label: "Initial Clip Time", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 } { setinitialcliptime == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "randomizecliptime", label: "Randomize Clip Time", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 } { setinitialcliptime == 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "randomclipoffset", label: "Random Clip Offset", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 } { setinitialcliptime == 0 } { randomizecliptime == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "randomclipoffsetseed", label: "Random Seed", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 } { setinitialcliptime == 0 } { randomizecliptime == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ randomizecliptime == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "applylocomotionorient", label: "Apply Locomotion Orientation", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll == active } { setinitialcliptime == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ cliptype != 1 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder0", label: "Clip Playback", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template.setTabConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 }");
			hou_parm_template.setTabConditional(hou.parmCondType.HideWhen, "{ rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 }");
			hou_parm_template2 = new hou.MenuParmTemplate({name: "cliptype", label: "Type", menu_items: ["0", "1"], menu_labels: ["In-Place", "Locomotive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "clipspeedmultiplier", label: "Clip Speed Multiplier", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "locomotionspeedmultiplier", label: "Locomotion Speed Multiplier", num_components: 1, default_value: [0], default_expression: ["ch(\"clipspeedmultiplier\")"], default_expression_language: [hou.scriptLanguage.Hscript], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ cliptype != 1 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "randomizeclipspeed", label: "Randomize Clip Speed", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "clipspeedvariance", label: "Variance (%)", num_components: 1, default_value: [10], min: 0, max: 100, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ randomizeclipspeed == 0 } { rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "clipspeedseed", label: "Random Seed", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ randomizeclipspeed == 0 } { rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ randomizeclipspeed == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "lastframematchesfirst", label: "Last Frame Matches First Frame", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ cliptype != 1 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "enablelooping", label: "Enable Looping", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.SeparatorParmTemplate({name: "sepparm4"});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ cliptype != 0 } { rbdragdoll == active }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "retimetoparticle", label: "Retime Clip to Match Particle Speed", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll == active }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ cliptype != 0 } { rbdragdoll == active }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "gaitspeed", label: "Gait Speed", num_components: 1, default_value: [1.25], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll == active } { retimetoparticle == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ cliptype != 0 } { rbdragdoll == active }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "speedvariance", label: "Allowed Variance (%)", num_components: 1, default_value: [10], min: 0, max: 100, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll == active } { retimetoparticle == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ cliptype != 0 } { rbdragdoll == active }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "limitparticlespeed", label: "Limit Particle Speed to Gait Speed Range", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll == active } { retimetoparticle == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ cliptype != 0 } { rbdragdoll == active }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.SeparatorParmTemplate({name: "sepparm2"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "uselocal", label: "Use VEXpressions", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "localexpression", label: " ", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import vexpressionmenu\n\nreturn vexpressionmenu.buildSnippetMenu('crowdstate::3.0/localexpression')", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ rbdragdoll == active ragdoll_enablemotor == 0 ragdoll_enablepartial == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ uselocal == 0 }");
			hou_parm_template2.setTags({"editor": "1", "editorlang": "vex", "script_action": "import vexpressionmenu\n\nnode = kwargs['node']\nparmname = kwargs['parmtuple'].name()\n\nvexpressionmenu.createSpareParmsFromChCalls(node, parmname)", "script_action_help": "Creates spare parameters for each unique call of ch() ", "script_action_icon": "BUTTONS_create_parm_from_ch"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			
            this.parmTemplateGroup = hou_parm_template_group;
            this.parmTemplateGroup.linkNode(this);
        }
    }
    hou.registerType('DOP/Crowds/crowdstate::3.0',_hnt_DOP_crowdstate__3_0)
    return _hnt_DOP_crowdstate__3_0
}
        