
export default function (hou) {
    class _hnt_SOP_agentlayer__2_0 extends hou._HoudiniBase {
        static is_root = false;
        static id = 'SOP/Other/agentlayer::2.0';
        static category = '/SOP';
        static houdiniType = 'agentlayer::2.0';
        static title = 'Agent Layer';
        static icon = 'None';
        constructor() {
            super();
            this.flags['houdini_type'] = this.__proto__.constructor.houdiniType;
            
            const inputs = ['SOP', 'SOP', 'SOP'];
            const outputs = ['SOP'];

            for(var i=0;i<inputs.length;i++) this.addInput(''+i,inputs[i]);        
            for(var j=0;j<outputs.length;j++) this.addOutput(''+j,outputs[j]);
        }
        parmTemplatesInit() {
            let hou_parm_template_group = new hou.ParmTemplateGroup();
			this.parmTemplateGroup = hou_parm_template_group;
			let hou_parm_template = new hou.StringParmTemplate({name: "group", label: "Group", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle});
			hou_parm_template.setTags({"script_action": "import soputils\nkwargs['geometrytype'] = (hou.geometryType.Primitives,)\nkwargs['inputindex'] = 0\nsoputils.selectGroupParm(kwargs)", "script_action_help": "Select geometry from an available viewport.\nShift-click to turn on Select Groups.", "script_action_icon": "BUTTONS_reselect"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "shapes", label: "Shapes", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			let hou_parm_template2 = new hou.ToggleParmTemplate({name: "addshapes", label: "Add Shapes by Name", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ hasinput(1) == 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "shapenameattrib", label: "Shape Name Attribute", num_components: 1, default_value: ["name"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "kwargs['node'].generateInputAttribMenu(1, hou.attribType.Prim, hou.attribData.String)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ addshapes == 0 } { hasinput(1) == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "keepexternalref", label: "Keep External References", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ addshapes == 0 } { hasinput(1) == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "shapebindingattribs", label: "Shape Bindings", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "collapsible"});
			let hou_parm_template3 = new hou.FloatParmTemplate({name: "boundsscale", label: "Bounds Scale", num_components: 3, default_value: [1, 1, 1], min: 0, max: 5, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ addshapes == 0 } { hasinput(1) == 0 } { boundsscalemode == attrib }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "boundsscalemode", label: "Bounds Scale Mode", menu_items: ["none", "attrib", "scale"], menu_labels: ["Set Value", "Set from Attribute", "Scale by Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ addshapes == 0 } { hasinput(1) == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "boundsscaleattrib", label: "Bounds Scale Attribute", num_components: 1, default_value: ["agentshapeboundsscale"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "kwargs['node'].generateInputAttribMenu(1, hou.attribType.Prim, data_type=hou.attribData.Float, min_size=3, max_size=3, array_type=False)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ addshapes == 0 } { hasinput(1) == 0 } { boundsscalemode == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ boundsscalemode == none }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "shapedeformer", label: "Shape Deformer", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import crowdstoolutils\nreturn crowdstoolutils.buildShapeDeformerMenu()", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ addshapes == 0 } { hasinput(1) == 0 } { shapedeformermode == attrib }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "shapedeformermode", label: "Shape Deformer Mode", menu_items: ["none", "attrib"], menu_labels: ["Set Value", "Set from Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ addshapes == 0 } { hasinput(1) == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "shapedeformerattrib", label: "Shape Deformer Attribute", num_components: 1, default_value: ["agentshapedeformer"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "kwargs['node'].generateInputAttribMenu(1, hou.attribType.Prim, hou.attribData.String)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ addshapes == 0 } { hasinput(1) == 0 } { shapedeformermode == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ shapedeformermode == none }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "transformname", label: "Transform Name", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import crowdstoolutils\nreturn crowdstoolutils.buildTransformMenu(hou.pwd())", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ addshapes == 0 } { hasinput(1) == 0 } { transformnamemode == attrib }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"script_action": "import crowdstoolutils\ncrowdstoolutils.selectJoint(kwargs['node'], kwargs['parmtuple'], exclusive=True)", "script_action_help": "Select a joint name from a tree view.", "script_action_icon": "BUTTONS_reselect"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "transformnamemode", label: "Transform Name Mode", menu_items: ["none", "attrib"], menu_labels: ["Set Value", "Set from Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ addshapes == 0 } { hasinput(1) == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "transformnameattrib", label: "Transform Name Attribute", num_components: 1, default_value: ["agenttransformname"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "kwargs['node'].generateInputAttribMenu(1, hou.attribType.Prim, hou.attribData.String)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ addshapes == 0 } { hasinput(1) == 0 } { transformnamemode == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ transformnamemode == none }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "layers", label: "Layers", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "setcurrentlayers", label: "Set Current Layers", default_value: true});
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "currentlayers", label: "Set Current Layers", num_components: 1, default_value: ["*"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "hou.phm().buildLayerMenu()", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ setcurrentlayers == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "setcollisionlayers", label: "Set Collision Layers", default_value: false});
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "collisionlayers", label: "Set Collision Layers", num_components: 1, default_value: ["*"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "hou.phm().buildLayerMenu()", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ setcollisionlayers == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "uselayernameattrib", label: "Use Layer Name Attribute", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ addshapes == 0 } { hasinput(1) == 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "layernameattrib", label: "Layer Name Attribute", num_components: 1, default_value: ["agentlayername"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "kwargs['node'].generateInputAttribMenu(1, hou.attribType.Prim, hou.attribData.String)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ addshapes == 0 } { hasinput(1) == 0 } { uselayernameattrib == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "numlayers", label: "Number of Layers", folder_type: hou.folderType.MultiparmBlock, default_value: 1, ends_tab_group: false});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "enablelayer#", label: "Enable", default_value: true});
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "layername#", label: "Layer Name", num_components: 1, default_value: ["layer#"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enablelayer# == 0 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "shapes#", label: "Shapes", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "hou.phm().buildInputShapeMenu()", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enablelayer# == 0 }");
			hou_parm_template3.setTags({"script_action": "node = kwargs['node']\nnode.hdaModule().selectInputShapes(node, kwargs['parmtuple'])", "script_action_help": "Select shape names from a tree view.", "script_action_icon": "BUTTONS_reselect"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "sololayer#", label: "Solo Layer", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enablelayer# == 0 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "existingshapes#", label: "Use Existing Shapes", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setTags({"group_type": "collapsible"});
			let hou_parm_template4 = new hou.ToggleParmTemplate({name: "copysourcelayer#", label: "Copy Source Layer", default_value: false});
			hou_parm_template4.hideLabel(true);
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "sourcelayer#", label: "Source Layer", num_components: 1, default_value: ["default"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import crowdstoolutils\nreturn crowdstoolutils.buildLayerMenu(hou.pwd())", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ copysourcelayer# == 0 }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "sourcelayershapes#", label: "Filter by Shape", num_components: 1, default_value: ["*"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import crowdstoolutils\nreturn crowdstoolutils.buildShapeMenu(hou.pwd())", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ copysourcelayer# == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ copysourcelayer# == 0 }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "sourcelayertransforms#", label: "Filter by Transform", num_components: 1, default_value: ["*"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import crowdstoolutils\nreturn crowdstoolutils.buildTransformMenu(hou.pwd())", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ copysourcelayer# == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ copysourcelayer# == 0 }");
			hou_parm_template4.setTags({"script_action": "import crowdstoolutils\ncrowdstoolutils.selectJoint(kwargs['node'], kwargs['parmtuple'], exclusive=False)", "script_action_help": "Select a joint name from a tree view.", "script_action_icon": "BUTTONS_reselect"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.SeparatorParmTemplate({name: "sepparm#"});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ copysourcelayer# == 0 }");
			hou_parm_template4.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FolderParmTemplate({name: "bindings#", label: "Shape Bindings", folder_type: hou.folderType.MultiparmBlock, default_value: 0, ends_tab_group: false});
			let hou_parm_template5 = new hou.ToggleParmTemplate({name: "enablebinding#_#", label: "Enable", default_value: true});
			hou_parm_template5.hideLabel(true);
			hou_parm_template5.setJoinWithNext(true);
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template5 = new hou.StringParmTemplate({name: "shapename#_#", label: "Shape Name", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import crowdstoolutils\nreturn crowdstoolutils.buildShapeMenu(hou.pwd())", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template5.setConditional(hou.parmCondType.DisableWhen, "{ enablebinding#_# == 0 }");
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template5 = new hou.StringParmTemplate({name: "shapedeformer#_#", label: "Shape Deformer", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import crowdstoolutils\nreturn crowdstoolutils.buildShapeDeformerMenu()", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template5.setConditional(hou.parmCondType.DisableWhen, "{ enablebinding#_# == 0 }");
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template5 = new hou.FloatParmTemplate({name: "boundsscale#_#", label: "Bounds Scale", num_components: 3, default_value: [1, 1, 1], min: 0, max: 5, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template5.setConditional(hou.parmCondType.DisableWhen, "{ enablebinding#_# == 0 }");
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template5 = new hou.StringParmTemplate({name: "transformname#_#", label: "Transform Name", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import crowdstoolutils\nreturn crowdstoolutils.buildTransformMenu(hou.pwd())", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template5.setConditional(hou.parmCondType.DisableWhen, "{ enablebinding#_# == 0 }");
			hou_parm_template5.setTags({"script_action": "import crowdstoolutils\ncrowdstoolutils.selectJoint(kwargs['node'], kwargs['parmtuple'], exclusive=True)", "script_action_help": "Select a joint name from a tree view.", "script_action_icon": "BUTTONS_reselect"});
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.SeparatorParmTemplate({name: "sepparm_#"});
			hou_parm_template3.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			
            this.parmTemplateGroup = hou_parm_template_group;
            this.parmTemplateGroup.linkNode(this);
        }
    }
    hou.registerType('SOP/Other/agentlayer::2.0',_hnt_SOP_agentlayer__2_0)
    return _hnt_SOP_agentlayer__2_0
}
        