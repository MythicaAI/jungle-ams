
export default function (hou) {
    class _hnt_DOP_gastargetforce extends hou.extend(hou._HoudiniBase).with(hou._SubgraphMixin) {
        static is_root = false;
        static id = 'DOP/Micro Solvers/gastargetforce';
        static category = '/DOP';
        static houdiniType = 'gastargetforce';
        static title = 'Gas Target Force';
        static icon = '/editor/assets/imgs/nodes/_hnt_DOP_gastargetforce.svg';
        constructor() {
            super();
            this.flags['houdini_type'] = this.__proto__.constructor.houdiniType;
            
            const inputs = [];
            const outputs = ['DOP', 'DOP', 'DOP', 'DOP'];

            for(var i=0;i<inputs.length;i++) this.addInput(''+i,inputs[i]);        
            for(var j=0;j<outputs.length;j++) this.addOutput(''+j,outputs[j]);
        }
        parmTemplatesInit() {
            let hou_parm_template_group = new hou.ParmTemplateGroup();
			this.parmTemplateGroup = hou_parm_template_group;
			let hou_parm_template = new hou.FolderParmTemplate({name: "folder0", label: "Force", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			let hou_parm_template2 = new hou.FloatParmTemplate({name: "forcescale", label: "Force Scale", num_components: 1, default_value: [100], min: 0, max: 1000, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "useexistinggoal", label: "Use Existing Goal Field", default_value: false});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "animategoal", label: "Animated Goal", default_value: true});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "liquidmode", label: "Liquid Mode", default_value: false});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "softtarget", label: "Soft Target", default_value: true});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "forceblur", label: "Force Blurring", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ softtarget == 1 }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "srcmin", label: "Minimum Goal Distance", num_components: 1, default_value: [null], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ softtarget == 1 }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "srcmax", label: "Maximum Goal Distance", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ softtarget == 1 }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.RampParmTemplate({name: "disttoforcescale", label: "Map Goal Distance to Force", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ softtarget == 1 }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "rampbasis_var": "disttoforcescale_the_basis_strings", "rampbasisdefault": "catmull-rom", "rampfloatdefault": "1pos ( 0 ) 1value ( 1 ) 1interp ( linear ) 2pos ( 1 ) 2value ( 1 ) 2interp ( linear )", "rampkeys_var": "disttoforcescale_the_key_positions", "rampshowcontrolsdefault": "0", "rampvalues_var": "disttoforcescale_the_key_values"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder0_1", label: "Guides", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder2", label: "Visualization", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			let hou_parm_template3 = new hou.ToggleParmTemplate({name: "vis_goal_showguide", label: "Show Guide Geometry", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vis_goal_color", label: "Goal", num_components: 3, default_value: [1, 0, 0], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vis_sdf_showguide", label: "Show Guide Geometry", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vis_sdf_color", label: "SDF", num_components: 3, default_value: [1, 1, 1], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vis_grad_showguide", label: "Show Guide Geometry", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vis_grad_color", label: "Force", num_components: 3, default_value: [1, 1, 1], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder2_1", label: "Goal", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"import_enable": "1", "import_source": "op:vis_goal"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vis_goal_usebox", label: "Bounding Box", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_goal", "import_token": "usebox"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vis_goal_useboxhash", label: "Bounding Box Hash", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_goal_usebox == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_goal", "import_token": "useboxhash"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vis_goal_usesmoke", label: "Use Smoke   ", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_goal", "import_token": "usesmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vis_goal_guideremapsmoke", label: "Remap Smoke", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_goal_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_goal", "import_token": "guideremapsmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vis_goal_guidesmokedensity", label: "Smoke Density", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_goal_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_goal", "import_token": "guidesmokedensity"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vis_goal_guideuseplane", label: "Use Plane     ", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_goal_usesmoke == 1 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_goal", "import_token": "guideuseplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "vis_goal_guideplane", label: "Plane Orientation", menu_items: ["xy", "yz", "zx"], menu_labels: ["XY plane", "YZ plane", "ZX plane"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_goal_usesmoke == 1 } { vis_goal_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_goal", "import_token": "guideplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vis_goal_guideplaneval", label: "Plane Position", num_components: 1, default_value: [0], min: null, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_goal_usesmoke == 1 } { vis_goal_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_goal", "import_token": "guideplaneval"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "vis_goal_guidevismode", label: "Visualization Mode", menu_items: ["none", "false", "pink", "mono", "blackbody", "bipartite"], menu_labels: ["No Mapping", "Infra-Red", "White to Red", "Grayscale", "Black Body", "Two-Tone"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_goal_usesmoke == 1 vis_goal_guideremapsmoke == 0 } { vis_goal_usesmoke == 0 vis_goal_guideuseplane == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_goal", "import_token": "guidevismode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "vis_goal_guidevisdensitymode", label: "Alpha Mapping", menu_items: ["none", "increasing", "decreasing", "hill", "valley", "step", "square"], menu_labels: ["No Mapping", "Increasing", "Decreasing", "Hill", "Valley", "Step", "Square"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_goal_usesmoke == 1 vis_goal_guideremapsmoke == 0 } { vis_goal_usesmoke == 0 vis_goal_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_goal", "import_token": "guidevisdensitymode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vis_goal_guiderangemode", label: "Specify Range by Min/Max", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_goal_usesmoke == 1 vis_goal_guideremapsmoke == 0 } { vis_goal_usesmoke == 0 vis_goal_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_goal", "import_token": "guiderangemode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vis_goal_guiderange", label: "Guide Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_goal_usesmoke == 1 vis_goal_guideremapsmoke == 0 } { vis_goal_usesmoke == 0 vis_goal_guideuseplane == 0 } { vis_goal_guiderangemode == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_goal", "import_token": "guiderange"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vis_goal_guiderangecenter", label: "Guide Range Center", num_components: 1, default_value: [0.5], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_goal_usesmoke == 1 vis_goal_guideremapsmoke == 0 } { vis_goal_usesmoke == 0 vis_goal_guideuseplane == 0 } { vis_goal_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_goal", "import_token": "guiderangecenter"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vis_goal_guiderangesize", label: "Guide Range Width", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_goal_usesmoke == 1 vis_goal_guideremapsmoke == 0 } { vis_goal_usesmoke == 0 vis_goal_guideuseplane == 0 } { vis_goal_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_goal", "import_token": "guiderangesize"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vis_goal_guideiso", label: "Iso Offset", num_components: 1, default_value: [0], min: null, max: 5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_goal_usesmoke == 1 } { vis_goal_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_goal", "import_token": "guideiso"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vis_goal_guideinvert", label: "Invert Iso", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_goal_usesmoke == 1 } { vis_goal_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_goal", "import_token": "guideinvert"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder2_2", label: "SDF", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"import_enable": "1", "import_source": "op:vis_sdf"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vis_sdf_usebox", label: "Bounding Box", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_sdf", "import_token": "usebox"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vis_sdf_useboxhash", label: "Bounding Box Hash", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_sdf_usebox == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_sdf", "import_token": "useboxhash"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vis_sdf_usesmoke", label: "Use Smoke   ", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_sdf", "import_token": "usesmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vis_sdf_guideremapsmoke", label: "Remap Smoke", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_sdf_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_sdf", "import_token": "guideremapsmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vis_sdf_guidesmokedensity", label: "Smoke Density", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_sdf_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_sdf", "import_token": "guidesmokedensity"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vis_sdf_guideuseplane", label: "Use Plane     ", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_sdf_usesmoke == 1 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_sdf", "import_token": "guideuseplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "vis_sdf_guideplane", label: "Plane Orientation", menu_items: ["xy", "yz", "zx"], menu_labels: ["XY plane", "YZ plane", "ZX plane"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_sdf_usesmoke == 1 } { vis_sdf_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_sdf", "import_token": "guideplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vis_sdf_guideplaneval", label: "Plane Position", num_components: 1, default_value: [0], min: null, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_sdf_usesmoke == 1 } { vis_sdf_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_sdf", "import_token": "guideplaneval"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "vis_sdf_guidevismode", label: "Visualization Mode", menu_items: ["none", "false", "pink", "mono", "blackbody", "bipartite"], menu_labels: ["No Mapping", "Infra-Red", "White to Red", "Grayscale", "Black Body", "Two-Tone"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_sdf_usesmoke == 1 vis_sdf_guideremapsmoke == 0 } { vis_sdf_usesmoke == 0 vis_sdf_guideuseplane == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_sdf", "import_token": "guidevismode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "vis_sdf_guidevisdensitymode", label: "Alpha Mapping", menu_items: ["none", "increasing", "decreasing", "hill", "valley", "step", "square"], menu_labels: ["No Mapping", "Increasing", "Decreasing", "Hill", "Valley", "Step", "Square"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_sdf_usesmoke == 1 vis_sdf_guideremapsmoke == 0 } { vis_sdf_usesmoke == 0 vis_sdf_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_sdf", "import_token": "guidevisdensitymode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vis_sdf_guiderangemode", label: "Specify Range by Min/Max", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_sdf_usesmoke == 1 vis_sdf_guideremapsmoke == 0 } { vis_sdf_usesmoke == 0 vis_sdf_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_sdf", "import_token": "guiderangemode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vis_sdf_guiderange", label: "Guide Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_sdf_usesmoke == 1 vis_sdf_guideremapsmoke == 0 } { vis_sdf_usesmoke == 0 vis_sdf_guideuseplane == 0 } { vis_sdf_guiderangemode == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_sdf", "import_token": "guiderange"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vis_sdf_guiderangecenter", label: "Guide Range Center", num_components: 1, default_value: [0.5], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_sdf_usesmoke == 1 vis_sdf_guideremapsmoke == 0 } { vis_sdf_usesmoke == 0 vis_sdf_guideuseplane == 0 } { vis_sdf_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_sdf", "import_token": "guiderangecenter"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vis_sdf_guiderangesize", label: "Guide Range Width", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_sdf_usesmoke == 1 vis_sdf_guideremapsmoke == 0 } { vis_sdf_usesmoke == 0 vis_sdf_guideuseplane == 0 } { vis_sdf_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_sdf", "import_token": "guiderangesize"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vis_sdf_guideiso", label: "Iso Offset", num_components: 1, default_value: [0], min: null, max: 5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_sdf_usesmoke == 1 } { vis_sdf_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_sdf", "import_token": "guideiso"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vis_sdf_guideinvert", label: "Invert Iso", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_sdf_usesmoke == 1 } { vis_sdf_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_sdf", "import_token": "guideinvert"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder2_3", label: "Force", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"import_enable": "1", "import_source": "op:vis_grad"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vis_grad_guideusebox", label: "Bounding Box", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_grad", "import_token": "guideusebox"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vis_grad_guideuseboxhash", label: "Bounding Box Hash", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_grad_guideusebox == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_grad", "import_token": "guideuseboxhash"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vis_grad_guideusesmoke", label: "Use Smoke", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_grad", "import_token": "guideusesmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vis_grad_guidescale", label: "Scale", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_grad", "import_token": "guidescale"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vis_grad_guideoverridediv", label: "Override Divisions", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_grad", "import_token": "guideoverridediv"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "vis_grad_guidediv", label: "Divisions", num_components: 3, default_value: [10, 10, 10], min: 1, max: 1000, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_grad_guideoverridediv == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_grad", "import_token": "guidediv"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vis_grad_guidebarbs", label: "Use Barbs on Vectors", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_grad_guideusesmoke == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_grad", "import_token": "guidebarbs"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vis_grad_guidepercomp", label: "Component Velocities", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_grad_guideusesmoke == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_grad", "import_token": "guidepercomp"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vis_grad_guideusestreamers", label: "Use Streamers", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_grad_guideusesmoke == 1 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_grad", "import_token": "guideusestreamers"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vis_grad_guideuseplane", label: "Use Plane", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_grad_guideusesmoke == 1 } { vis_grad_guideusestreamers == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_grad", "import_token": "guideuseplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "vis_grad_guideplane", label: "Plane Orientation", menu_items: ["xy", "yz", "zx"], menu_labels: ["XY plane", "YZ plane", "ZX plane"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_grad_guideusesmoke == 1 } { vis_grad_guideusestreamers == 0 vis_grad_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_grad", "import_token": "guideplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vis_grad_guideplaneval", label: "Plane Position", num_components: 1, default_value: [0], min: null, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_grad_guideusesmoke == 1 } { vis_grad_guideusestreamers == 0 vis_grad_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_grad", "import_token": "guideplaneval"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vis_grad_guidestreamerlen", label: "Streamer Length", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_grad_guideusesmoke == 1 } { vis_grad_guideusestreamers == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_grad", "import_token": "guidestreamerlen"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vis_grad_guidestreamerminspeed", label: "Streamer Minimum Speed", num_components: 1, default_value: [0.001], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_grad_guideusesmoke == 1 } { vis_grad_guideusestreamers == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_grad", "import_token": "guidestreamerminspeed"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "vis_grad_guidevistype", label: "Visualization Type", menu_items: ["none", "distance", "speed", "origin", "dir", "value"], menu_labels: ["None", "Distance", "Speed", "Origin", "Direction", "Value"], default_value: 2, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_grad_guideusesmoke == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_grad", "import_token": "guidevistype"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "vis_grad_guidevismode", label: "Visualization Mode", menu_items: ["false", "pink", "mono", "blackbody", "bipartite"], menu_labels: ["Infra-Red", "White to Red", "Grayscale", "Black Body", "Two-Tone"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_grad_guideusesmoke == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_grad", "import_token": "guidevismode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vis_grad_guidevisscale", label: "Visualization Scale", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_grad_guideusesmoke == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_grad", "import_token": "guidevisscale"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vis_grad_guiderange", label: "Visualization Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vis_grad_guideusesmoke == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vis_grad", "import_token": "guiderange"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder0_2", label: "Fields", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2 = new hou.StringParmTemplate({name: "density", label: "Density Field", num_components: 1, default_value: ["density"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "goal", label: "Goal Field", num_components: 1, default_value: ["goal"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "goal_sdf", label: "Goal SDF Field", num_components: 1, default_value: ["goal_sdf"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "goal_force", label: "Goal Force Field", num_components: 1, default_value: ["goal_force"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "vel", label: "Velocity Field", num_components: 1, default_value: ["vel"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "collision", label: "Collision Field", num_components: 1, default_value: ["collision"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			
            this.parmTemplateGroup = hou_parm_template_group;
            this.parmTemplateGroup.linkNode(this);
        }
    }
    hou.registerType('DOP/Micro Solvers/gastargetforce',_hnt_DOP_gastargetforce)
    return _hnt_DOP_gastargetforce
}
        