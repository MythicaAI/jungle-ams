
export default function (hou) {
    class _hnt_VOP_principledshader__2_0 extends hou.extend(hou._HoudiniBase).with(hou._SubgraphMixin, hou._MultiInputMixin) {
        static is_root = false;
        static id = 'VOP/Shaders/principledshader::2.0';
        static category = '/VOP';
        static houdiniType = 'principledshader::2.0';
        static title = 'Principled Shader';
        static icon = '/editor/assets/imgs/nodes/_hnt_VOP_principledshader__2_0.svg';
        constructor() {
            super();
            this.flags['houdini_type'] = this.__proto__.constructor.houdiniType;
            
            const inputs = ['VOP'];
            const outputs

            for(var i=0;i<inputs.length;i++) this.addInput(''+i,inputs[i]);        
            for(var j=0;j<outputs.length;j++) this.addOutput(''+j,outputs[j]);
        }
        parmTemplatesInit() {
            let hou_parm_template_group = new hou.ParmTemplateGroup();
			this.parmTemplateGroup = hou_parm_template_group;
			let hou_parm_template = new hou.StringParmTemplate({name: "specmodel", label: "OpenGL Specular Model", num_components: 1, default_value: ["ggx"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"ogl_coat_model": "1", "ogl_spec_model": "1"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "coatspecmodel", label: "OpenGL Coat Specular Model", num_components: 1, default_value: ["ggx"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"ogl_coat_model": "1"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "specular_tint", label: "OpenGL Specular Tint", num_components: 1, default_value: [0], default_expression: ["(1-ch(\"metallic\"))*ch(\"reflecttint\")"], default_expression_language: [hou.scriptLanguage.Hscript], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"units": ""});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "diffuse_folder_15", label: "Surface", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			let hou_parm_template2 = new hou.FolderParmTemplate({name: "folder7", label: "Basic", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_default": "1", "group_type": "collapsible"});
			let hou_parm_template3 = new hou.FloatParmTemplate({name: "basecolor", label: "Base Color", num_components: 3, default_value: [0.2, 0.2, 0.2], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ basecolor_useBaseColor == 0 } { diff_enable == 0 }");
			hou_parm_template3.setTags({"ogl_amb": "1", "ogl_diff": "1", "ogl_spec": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "albedomult", label: "Albedo Multiplier", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setTags({"ogl_amb_intensity": "1", "ogl_diff_intensity": "1", "ogl_spec_intensity": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "basecolor_usePointColor", label: "Use Point Color", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ diff_enable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "basecolor_usePackedColor", label: "Use Packed Color", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ diff_enable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "frontface", label: "Shade Both Sides As Front", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder4", label: "Specular", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_default": "1", "group_type": "collapsible"});
			hou_parm_template3 = new hou.FloatParmTemplate({name: "ior", label: "IOR", num_components: 1, default_value: [1.5], min: 1, max: 3, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setTags({"ogl_ior": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "rough", label: "Roughness", num_components: 1, default_value: [0.3], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ useBaseColor == 0 }");
			hou_parm_template3.setTags({"ogl_diff_rough": "1", "ogl_rough": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "aniso", label: "Anisotropy", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ useBaseColor == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "anisodir", label: "Anisotropy Direction", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "folder12", label: "Reflection", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setTags({"group_default": "1", "group_type": "collapsible"});
			let hou_parm_template4 = new hou.FloatParmTemplate({name: "metallic", label: "Metallic", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ useBaseColor == 0 }");
			hou_parm_template4.setTags({"ogl_metallic": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "reflect", label: "Reflectivity", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ useBaseColor == 0 }");
			hou_parm_template4.setTags({"ogl_reflect": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "reflecttint", label: "Reflect Tint", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ useBaseColor == 0 }");
			hou_parm_template4.setTags({"ogl_spectint": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "coat", label: "Coat", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ useBaseColor == 0 }");
			hou_parm_template4.setTags({"ogl_coat_intensity": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "coatrough", label: "Coat Roughness", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ useBaseColor == 0 }");
			hou_parm_template4.setTags({"ogl_coat_rough": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "folder13", label: "Transparency", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setTags({"group_default": "1", "group_type": "collapsible"});
			hou_parm_template4 = new hou.FloatParmTemplate({name: "transparency", label: "Transparency", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setTags({"ogl_transparency": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "transcolor", label: "Transmission Color", num_components: 3, default_value: [1, 1, 1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ transcolor_useBaseColor == 0 } { diff_enable == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "transdist", label: "At Distance", num_components: 1, default_value: [0.1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ useBaseColor == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "dispersion", label: "Dispersion", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ useBaseColor == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.IntParmTemplate({name: "priority", label: "Surface Priority", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "transcolor_usePointColor", label: "Use Point Color", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder8", label: "Subsurface Scattering", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_default": "1", "group_type": "collapsible"});
			hou_parm_template3 = new hou.FloatParmTemplate({name: "sss", label: "Subsurface", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ useBaseColor == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "ssscolor", label: "Subsurface Color", num_components: 3, default_value: [1, 1, 1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ useBaseColor == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sssmodel", label: "SSS Mode", num_components: 1, default_value: ["pbrsss"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["pbrsss", "pbrsingles", "pbrrwalksss"], menu_labels: ["Full Subsurface Scattering", "Single Scattering", "Random Walk (Karma)"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "sssdist", label: "Subsurface Distance", num_components: 1, default_value: [0.1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ useBaseColor == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "sssphase", label: "Scattering Phase", num_components: 1, default_value: [0], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sssmodel == pbrsss }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "ssscolor_usePointColor", label: "Use Point Color", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder11", label: "Sheen", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_default": "1", "group_type": "collapsible"});
			hou_parm_template3 = new hou.FloatParmTemplate({name: "sheen", label: "Sheen", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ useBaseColor == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "sheentint", label: "Sheen Tint", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ useBaseColor == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder9", label: "Emission", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_default": "1", "group_type": "collapsible"});
			hou_parm_template3 = new hou.FloatParmTemplate({name: "emitint", label: "Emission Intensity", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setTags({"ogl_emit_intensity": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "emitcolor", label: "Emission Color", num_components: 3, default_value: [1, 1, 1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setTags({"ogl_emit": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "emitcolor_usePointColor", label: "Use Point Color", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "emitillum", label: "Emission Illuminates Objects", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "diffuse_folder_15_1", label: "Opacity", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder15", label: "Opacity", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.FloatParmTemplate({name: "opac", label: "Opacity Scale", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "opaccolor", label: "Opacity Color", num_components: 3, default_value: [1, 1, 1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "opacpointalpha", label: "Use Point Alpha", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "opacpackedalpha", label: "Use Packed Alpha", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder6", label: "Fake Caustics", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "fakecausticsenabled", label: "Enable", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fakecausticstransmit", label: "Transmission Tint", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ fakecausticsenabled == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fakecausticsshadow", label: "Shadow Contour", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ fakecausticsenabled == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fakecausticsopacity", label: "Shadow Opacity", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ fakecausticsenabled == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder17", label: "Masking", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.StringParmTemplate({name: "alphablendmode", label: "Alpha Mode", num_components: 1, default_value: ["blend"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["blend", "mask", "opaque"], menu_labels: ["Blend", "Mask", "Opaque"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setTags({"ogl_alpha_mode": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "alphacutoff", label: "Alpha Cutoff", num_components: 1, default_value: [0.5], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ alphablendmode != mask }");
			hou_parm_template3.setTags({"ogl_alpha_cutoff": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "diffuse_folder_15_2", label: "Textures", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder54", label: "Base Color", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "basecolor_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ diff_enable == 0 }");
			hou_parm_template3.setTags({"ogl_use_tex1": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "basecolor_texture", label: "Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ diff_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ basecolor_useTexture == 0 }");
			hou_parm_template3.setTags({"ogl_specmap": "1", "ogl_tex1": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "basecolor_textureIntensity", label: "Tint Intensity", num_components: 1, default_value: [1], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ diff_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ basecolor_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "basecolor_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ diff_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ basecolor_useTexture == 0 }");
			hou_parm_template3.setTags({"ogl_tex_vwrap1": "1", "ogl_tex_wrap1": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "basecolor_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["auto"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "echo `pythonexprs(\"__import__(\'toolutils\').ocioColorSpaceMenu(include_roles=False,extra_choices=[\'auto\',\'Automatic\',\'linear\',\'Linear\',\'sRGB\',\'sRGB\',\'rec709\',\'Rec 709\',\'raw\',\'Raw\',\'_separator_\',\'_separator\'])\")`", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ diff_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ basecolor_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "basecolor_useTextureAlpha", label: "Use Texture Alpha", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ diff_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ basecolor_useTexture == 0 }");
			hou_parm_template3.setTags({"ogl_use_diffuse_map_alpha": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder1", label: "IOR", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "ior_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "ior_texture", label: "Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ ior_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "ior_monoChannel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ ior_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "ior_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ ior_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "ior_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "echo `pythonexprs(\"__import__(\'toolutils\').ocioColorSpaceMenu(include_roles=False,extra_choices=[\'auto\',\'Automatic\',\'linear\',\'Linear\',\'sRGB\',\'sRGB\',\'rec709\',\'Rec 709\',\'raw\',\'Raw\',\'_separator_\',\'_separator\'])\")`", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ ior_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder227", label: "Roughness", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "rough_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setTags({"ogl_use_roughmap": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "rough_texture", label: "Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ rough_useTexture == 0 }");
			hou_parm_template3.setTags({"ogl_roughmap": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "rough_monoChannel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ rough_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"ogl_roughmap_comp": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "rough_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ rough_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "rough_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "echo `pythonexprs(\"__import__(\'toolutils\').ocioColorSpaceMenu(include_roles=False,extra_choices=[\'auto\',\'Automatic\',\'linear\',\'Linear\',\'sRGB\',\'sRGB\',\'rec709\',\'Rec 709\',\'raw\',\'Raw\',\'_separator_\',\'_separator\'])\")`", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ rough_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder228", label: "Anisotropy", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "aniso_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "aniso_texture", label: "Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ aniso_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "aniso_monoChannel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ aniso_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "aniso_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ aniso_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "aniso_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "echo `pythonexprs(\"__import__(\'toolutils\').ocioColorSpaceMenu(include_roles=False,extra_choices=[\'auto\',\'Automatic\',\'linear\',\'Linear\',\'sRGB\',\'sRGB\',\'rec709\',\'Rec 709\',\'raw\',\'Raw\',\'_separator_\',\'_separator\'])\")`", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ aniso_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder229", label: "Anisotropy Direction", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "anisodir_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setScriptCallback("python -c 'hou.phm().toggle_anisodir_texture(hou.pwd())'");
			hou_parm_template3.setTags({"parmvop": "1", "script_callback": "python -c 'hou.phm().toggle_anisodir_texture(hou.pwd())'", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "anisodir_texture", label: "Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ anisodir_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "anisodir_monoChannel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ anisodir_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "anisodir_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ anisodir_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "anisodir_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "echo `pythonexprs(\"__import__(\'toolutils\').ocioColorSpaceMenu(include_roles=False,extra_choices=[\'auto\',\'Automatic\',\'linear\',\'Linear\',\'sRGB\',\'sRGB\',\'rec709\',\'Rec 709\',\'raw\',\'Raw\',\'_separator_\',\'_separator\'])\")`", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ anisodir_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": ""});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "anisodir_textureFilter", label: "Filter Type", num_components: 1, default_value: ["point"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["box", "gauss", "bartlett", "sinc", "hanning", "blackman", "catrom", "mitchell", "point"], menu_labels: ["Box", "Gaussian", "Bartlett/Triangular", "Sinc Sharpening", "Hanning", "Blackman", "Catmull-Rom", "Mitchell", "Point (No Filter)"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ anisodir_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder55", label: "Metallic", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "metallic_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setTags({"ogl_use_metallicmap": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "metallic_texture", label: "Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ metallic_useTexture == 0 }");
			hou_parm_template3.setTags({"ogl_metallicmap": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "metallic_monoChannel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ metallic_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"ogl_metallicmap_comp": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "metallic_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ metallic_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "metallic_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "echo `pythonexprs(\"__import__(\'toolutils\').ocioColorSpaceMenu(include_roles=False,extra_choices=[\'auto\',\'Automatic\',\'linear\',\'Linear\',\'sRGB\',\'sRGB\',\'rec709\',\'Rec 709\',\'raw\',\'Raw\',\'_separator_\',\'_separator\'])\")`", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ metallic_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder16", label: "Reflectivity", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "reflect_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setTags({"ogl_use_reflect_map": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "reflect_texture", label: "Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ reflect_useTexture == 0 }");
			hou_parm_template3.setTags({"ogl_reflect_map": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "reflect_monoChannel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ reflect_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"ogl_reflect_map_comp": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "reflect_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ reflect_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "reflect_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "echo `pythonexprs(\"__import__(\'toolutils\').ocioColorSpaceMenu(include_roles=False,extra_choices=[\'auto\',\'Automatic\',\'linear\',\'Linear\',\'sRGB\',\'sRGB\',\'rec709\',\'Rec 709\',\'raw\',\'Raw\',\'_separator_\',\'_separator\'])\")`", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ reflect_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder226", label: "Reflect Tint", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "reflecttint_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "reflecttint_texture", label: "Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ reflecttint_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "reflecttint_monoChannel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ reflecttint_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "reflecttint_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ reflecttint_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "reflecttint_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "echo `pythonexprs(\"__import__(\'toolutils\').ocioColorSpaceMenu(include_roles=False,extra_choices=[\'auto\',\'Automatic\',\'linear\',\'Linear\',\'sRGB\',\'sRGB\',\'rec709\',\'Rec 709\',\'raw\',\'Raw\',\'_separator_\',\'_separator\'])\")`", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ reflecttint_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder233", label: "Coat", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "coat_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setTags({"ogl_use_coat_intensity_map": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coat_texture", label: "Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coat_useTexture == 0 }");
			hou_parm_template3.setTags({"ogl_coat_intensity_map": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "coat_monoChannel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coat_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"ogl_coat_intensity_comp": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coat_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coat_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coat_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "echo `pythonexprs(\"__import__(\'toolutils\').ocioColorSpaceMenu(include_roles=False,extra_choices=[\'auto\',\'Automatic\',\'linear\',\'Linear\',\'sRGB\',\'sRGB\',\'rec709\',\'Rec 709\',\'raw\',\'Raw\',\'_separator_\',\'_separator\'])\")`", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coat_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder234", label: "Coat Roughness", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "coatrough_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setTags({"ogl_use_coat_roughness_map": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coatrough_texture", label: "Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatrough_useTexture == 0 }");
			hou_parm_template3.setTags({"ogl_coat_roughness_map": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "coatrough_monoChannel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatrough_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"ogl_coat_roughness_comp": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coatrough_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatrough_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coatrough_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "echo `pythonexprs(\"__import__(\'toolutils\').ocioColorSpaceMenu(include_roles=False,extra_choices=[\'auto\',\'Automatic\',\'linear\',\'Linear\',\'sRGB\',\'sRGB\',\'rec709\',\'Rec 709\',\'raw\',\'Raw\',\'_separator_\',\'_separator\'])\")`", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatrough_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder2", label: "Transparency", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "transparency_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "transparency_texture", label: "Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ transparency_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "transparency_monoChannel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ transparency_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "transparency_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ transparency_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "transparency_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "echo `pythonexprs(\"__import__(\'toolutils\').ocioColorSpaceMenu(include_roles=False,extra_choices=[\'auto\',\'Automatic\',\'linear\',\'Linear\',\'sRGB\',\'sRGB\',\'rec709\',\'Rec 709\',\'raw\',\'Raw\',\'_separator_\',\'_separator\'])\")`", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ transparency_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder5", label: "Transmission Color", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "transcolor_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ diff_enable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "transcolor_texture", label: "Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ diff_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ transcolor_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "transcolor_textureIntensity", label: "Tint Intensity", num_components: 1, default_value: [1], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ diff_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ transcolor_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "transcolor_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ diff_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ transcolor_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "transcolor_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["auto"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "echo `pythonexprs(\"__import__(\'toolutils\').ocioColorSpaceMenu(include_roles=False,extra_choices=[\'auto\',\'Automatic\',\'linear\',\'Linear\',\'sRGB\',\'sRGB\',\'rec709\',\'Rec 709\',\'raw\',\'Raw\',\'_separator_\',\'_separator\'])\")`", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ diff_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ transcolor_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder5_1", label: "At Distance", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "transdist_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "transdist_texture", label: "Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ transdist_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "transdist_monoChannel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ transdist_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "transdist_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ transdist_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "transdist_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "echo `pythonexprs(\"__import__(\'toolutils\').ocioColorSpaceMenu(include_roles=False,extra_choices=[\'auto\',\'Automatic\',\'linear\',\'Linear\',\'sRGB\',\'sRGB\',\'rec709\',\'Rec 709\',\'raw\',\'Raw\',\'_separator_\',\'_separator\'])\")`", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ transdist_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder5_2", label: "Dispersion", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "dispersion_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "dispersion_texture", label: "Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ dispersion_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "dispersion_monoChannel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ dispersion_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "dispersion_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ dispersion_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "dispersion_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "echo `pythonexprs(\"__import__(\'toolutils\').ocioColorSpaceMenu(include_roles=False,extra_choices=[\'auto\',\'Automatic\',\'linear\',\'Linear\',\'sRGB\',\'sRGB\',\'rec709\',\'Rec 709\',\'raw\',\'Raw\',\'_separator_\',\'_separator\'])\")`", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ dispersion_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder230", label: "Subsurface", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "sss_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sss_texture", label: "Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ sss_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "sss_monoChannel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ sss_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sss_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ sss_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sss_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "echo `pythonexprs(\"__import__(\'toolutils\').ocioColorSpaceMenu(include_roles=False,extra_choices=[\'auto\',\'Automatic\',\'linear\',\'Linear\',\'sRGB\',\'sRGB\',\'rec709\',\'Rec 709\',\'raw\',\'Raw\',\'_separator_\',\'_separator\'])\")`", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ sss_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder3", label: "Subsurface Scattering Distance", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "sssdist_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sssdist_texture", label: "Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ sssdist_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "sssdist_monoChannel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ sssdist_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sssdist_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ sssdist_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sssdist_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "echo `pythonexprs(\"__import__(\'toolutils\').ocioColorSpaceMenu(include_roles=False,extra_choices=[\'auto\',\'Automatic\',\'linear\',\'Linear\',\'sRGB\',\'sRGB\',\'rec709\',\'Rec 709\',\'raw\',\'Raw\',\'_separator_\',\'_separator\'])\")`", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ sssdist_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder3_1", label: "Subsurface Color", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "ssscolor_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "ssscolor_texture", label: "Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ ssscolor_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "ssscolor_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ ssscolor_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "ssscolor_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "echo `pythonexprs(\"__import__(\'toolutils\').ocioColorSpaceMenu(include_roles=False,extra_choices=[\'auto\',\'Automatic\',\'linear\',\'Linear\',\'sRGB\',\'sRGB\',\'rec709\',\'Rec 709\',\'raw\',\'Raw\',\'_separator_\',\'_separator\'])\")`", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ ssscolor_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder231", label: "Sheen", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "sheen_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sheen_texture", label: "Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ sheen_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "sheen_monoChannel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ sheen_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sheen_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ sheen_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sheen_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "echo `pythonexprs(\"__import__(\'toolutils\').ocioColorSpaceMenu(include_roles=False,extra_choices=[\'auto\',\'Automatic\',\'linear\',\'Linear\',\'sRGB\',\'sRGB\',\'rec709\',\'Rec 709\',\'raw\',\'Raw\',\'_separator_\',\'_separator\'])\")`", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ sheen_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder232", label: "Sheen Tint", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "sheentint_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sheentint_texture", label: "Map", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ sheentint_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "sheentint_monoChannel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ sheentint_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sheentint_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ sheentint_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sheentint_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "echo `pythonexprs(\"__import__(\'toolutils\').ocioColorSpaceMenu(include_roles=False,extra_choices=[\'auto\',\'Automatic\',\'linear\',\'Linear\',\'sRGB\',\'sRGB\',\'rec709\',\'Rec 709\',\'raw\',\'Raw\',\'_separator_\',\'_separator\'])\")`", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ sheentint_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "diffuse_folder_14_3", label: "Emission", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "emitcolor_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"ogl_use_emissionmap": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "emitcolor_texture", label: "Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ emitcolor_useTexture == 0 }");
			hou_parm_template3.setTags({"ogl_emissionmap": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "emitcolor_textureIntensity", label: "Tint Intensity", num_components: 1, default_value: [1], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ emitcolor_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "emitcolor_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ emitcolor_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "emitcolor_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "echo `pythonexprs(\"__import__(\'toolutils\').ocioColorSpaceMenu(include_roles=False,extra_choices=[\'auto\',\'Automatic\',\'linear\',\'Linear\',\'sRGB\',\'sRGB\',\'rec709\',\'Rec 709\',\'raw\',\'Raw\',\'_separator_\',\'_separator\'])\")`", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ emitcolor_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder14", label: "Opacity", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "opaccolor_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"ogl_use_opacitymap": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "opaccolor_texture", label: "Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ opaccolor_useTexture == 0 }");
			hou_parm_template3.setTags({"ogl_opacitymap": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "opaccolor_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ opaccolor_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "opaccolor_textureIntensity", label: "Tint Intensity", num_components: 1, default_value: [1], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ opaccolor_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "opaccolor_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "echo `pythonexprs(\"__import__(\'toolutils\').ocioColorSpaceMenu(include_roles=False,extra_choices=[\'auto\',\'Automatic\',\'linear\',\'Linear\',\'sRGB\',\'sRGB\',\'rec709\',\'Rec 709\',\'raw\',\'Raw\',\'_separator_\',\'_separator\'])\")`", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ opaccolor_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder18", label: "Occlusion", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "occlusion_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"ogl_use_occlusionmap": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "occlusion_texture", label: "Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ occlusion_useTexture == 0 }");
			hou_parm_template3.setTags({"ogl_occlusionmap": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "occlusion_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ occlusion_useTexture == 0 }");
			hou_parm_template3.setTags({"ogl_tex_vwrap1": "1", "ogl_tex_wrap1": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "occlusion_textureIntensity", label: "Tint Intensity", num_components: 1, default_value: [1], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ occlusion_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "occlusion_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["auto"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "echo `pythonexprs(\"__import__(\'toolutils\').ocioColorSpaceMenu(include_roles=False,extra_choices=[\'auto\',\'Automatic\',\'linear\',\'Linear\',\'sRGB\',\'sRGB\',\'rec709\',\'Rec 709\',\'raw\',\'Raw\',\'_separator_\',\'_separator\'])\")`", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ occlusion_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder235", label: "Sampling", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.StringParmTemplate({name: "surface_textureFilter", label: "Filter", num_components: 1, default_value: ["catrom"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["box", "gauss", "bartlett", "sinc", "hanning", "blackman", "catrom", "mitchell"], menu_labels: ["Box", "Gaussian", "Bartlett/Triangular", "Sinc Sharpening", "Hanning", "Blackman", "Catmull-Rom", "Mitchell"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "surface_textureFilterWidth", label: "Filter Width", num_components: 1, default_value: [1], min: 0, max: 5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "diffuse_folder_15_3", label: "Bump & Normals", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "roundedEdge_enable", label: "roundedEdge_enable", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "roundedEdge_radius", label: "Round Edge Radius", num_components: 1, default_value: [0.01], min: 0, max: 0.1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ roundedEdge_enable == 0 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "roundedEdge_mode", label: "Round Edge Mode", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["both", "concave", "convex"], menu_labels: ["Concave and Convex Edges", "Concave Edges", "Convex Edges"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ roundedEdge_enable == 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setHelp("Edge types to smooth.");
			hou_parm_template2.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "shading_16", label: "Base", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "baseBumpAndNormal_enable", label: "Enable", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "baseBumpAndNormal_type", label: "Texture Type", num_components: 1, default_value: ["normal"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["bump", "normal"], menu_labels: ["Bump", "Normal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ baseBumpAndNormal_enable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "baseBump_colorSpace", label: "Texture Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "echo `pythonexprs(\"__import__(\'toolutils\').ocioColorSpaceMenu(include_roles=False,extra_choices=[\'auto\',\'Automatic\',\'linear\',\'Linear\',\'sRGB\',\'sRGB\',\'rec709\',\'Rec 709\',\'raw\',\'Raw\',\'_separator_\',\'_separator\'])\")`", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ baseBumpAndNormal_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ baseBumpAndNormal_type != bump }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "baseBump_bumpScale", label: "Effect Scale", num_components: 1, default_value: [0.05], min: 0, max: 0.5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ baseBumpAndNormal_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ baseBumpAndNormal_type != bump }");
			hou_parm_template3.setTags({"ogl_bumpscale": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "baseBump_bumpTexture", label: "Texture Path", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ baseBumpAndNormal_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ baseBumpAndNormal_type != bump }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "baseBump_wrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ baseBumpAndNormal_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ baseBumpAndNormal_type != bump }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "baseBump_filter", label: "Filter", num_components: 1, default_value: ["gauss"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["box", "gauss", "bartlett", "sinc", "hanning", "blackman", "catrom", "mitchell"], menu_labels: ["Box", "Gaussian", "Bartlett/Triangular", "Sinc Sharpening", "Hanning", "Blackman", "Catmull-Rom", "Mitchell"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ baseBumpAndNormal_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ baseBumpAndNormal_type != bump }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "baseBump_filterWidth", label: "Filter Width", num_components: 1, default_value: [1], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ baseBumpAndNormal_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ baseBumpAndNormal_type != bump }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "baseBump_channel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ baseBumpAndNormal_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ baseBumpAndNormal_type != bump }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "baseBump_imagePlane", label: "Image Plane", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ baseBumpAndNormal_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ baseBumpAndNormal_type != bump }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "baseNormal_colorspace", label: "Texture Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "echo `pythonexprs(\"__import__(\'toolutils\').ocioColorSpaceMenu(include_roles=False,extra_choices=[\'auto\',\'Automatic\',\'linear\',\'Linear\',\'sRGB\',\'sRGB\',\'rec709\',\'Rec 709\',\'raw\',\'Raw\',\'_separator_\',\'_separator\'])\")`", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ baseBumpAndNormal_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ baseBumpAndNormal_type != normal }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "baseNormal_vectorSpace", label: "Vector Space", num_components: 1, default_value: ["uvtangent"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["uvtangent", "object", "world"], menu_labels: ["UV Tangent Space", "Object Space", "World Space"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ baseBumpAndNormal_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ baseBumpAndNormal_type != normal }");
			hou_parm_template3.setTags({"ogl_normalmap_type": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "baseNormal_scale", label: "Effect Scale", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ baseBumpAndNormal_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ baseBumpAndNormal_type != normal }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "baseNormal_texture", label: "Texture Path", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ baseBumpAndNormal_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ baseBumpAndNormal_type != normal }");
			hou_parm_template3.setTags({"ogl_normalmap": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "baseNormal_wrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ baseBumpAndNormal_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ baseBumpAndNormal_type != normal }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "baseNormal_filter", label: "Filter", num_components: 1, default_value: ["gauss"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["box", "gauss", "bartlett", "sinc", "hanning", "blackman", "catrom", "mitchell"], menu_labels: ["Box", "Gaussian", "Bartlett/Triangular", "Sinc Sharpening", "Hanning", "Blackman", "Catmull-Rom", "Mitchell"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ baseBumpAndNormal_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ baseBumpAndNormal_type != normal }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "baseNormal_filterWidth", label: "Filter Width", num_components: 1, default_value: [1], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ baseBumpAndNormal_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ baseBumpAndNormal_type != normal }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "baseNormal_channel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ baseBumpAndNormal_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ baseBumpAndNormal_type != normal }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "baseNormal_imagePlane", label: "Image Plane", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ baseBumpAndNormal_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ baseBumpAndNormal_type != normal }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "baseNormal_space", label: "Normal Space", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1"], menu_labels: ["0 to 1", "-1 to 1"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ baseBumpAndNormal_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ baseBumpAndNormal_type != normal }");
			hou_parm_template3.setTags({"ogl_normalbias": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "baseNormal_flipX", label: "Flip X", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ baseBumpAndNormal_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ baseBumpAndNormal_type != normal }");
			hou_parm_template3.setTags({"ogl_normalflipx": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "baseNormal_flipY", label: "Flip Y", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ baseBumpAndNormal_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ baseBumpAndNormal_type != normal }");
			hou_parm_template3.setTags({"ogl_normalflipy": "1", "parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "baseBump_useTexture", label: "OpenGL Use Bump Texture", default_value: false, default_expression: "ch(\"baseBumpAndNormal_enable\") && strcmp(chs(\"baseBumpAndNormal_type\"), \"bump\") == 0", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.hide(true);
			hou_parm_template3.setTags({"ogl_use_bumpmap": "1"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "baseNormal_useTexture", label: "OpenGL Use Normal Texture", default_value: false, default_expression: "ch(\"baseBumpAndNormal_enable\") && strcmp(chs(\"baseBumpAndNormal_type\"), \"normal\") == 0", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.hide(true);
			hou_parm_template3.setTags({"ogl_use_normalmap": "1"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "shading_16_1", label: "Coat", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "separateCoatNormals", label: "Separate Coat Normals", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "coatBumpAndNormal_enable", label: "Enable", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ separateCoatNormals == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coatBumpAndNormal_type", label: "Texture Type", num_components: 1, default_value: ["normal"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["bump", "normal"], menu_labels: ["Bump", "Normal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ coatBumpAndNormal_enable == 0 } { separateCoatNormals == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coatBump_colorSpace", label: "Texture Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "echo `pythonexprs(\"__import__(\'toolutils\').ocioColorSpaceMenu(include_roles=False,extra_choices=[\'auto\',\'Automatic\',\'linear\',\'Linear\',\'sRGB\',\'sRGB\',\'rec709\',\'Rec 709\',\'raw\',\'Raw\',\'_separator_\',\'_separator\'])\")`", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ coatBumpAndNormal_enable == 0 } { separateCoatNormals == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatBumpAndNormal_type != bump }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "coatBump_bumpScale", label: "Effect Scale", num_components: 1, default_value: [0.05], min: 0, max: 0.5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ coatBumpAndNormal_enable == 0 } { separateCoatNormals == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatBumpAndNormal_type != bump }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coatBump_bumpTexture", label: "Texture Path", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ coatBumpAndNormal_enable == 0 } { separateCoatNormals == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatBumpAndNormal_type != bump }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coatBump_wrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ coatBumpAndNormal_enable == 0 } { separateCoatNormals == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatBumpAndNormal_type != bump }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coatBump_filter", label: "Filter", num_components: 1, default_value: ["gauss"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["box", "gauss", "bartlett", "sinc", "hanning", "blackman", "catrom", "mitchell"], menu_labels: ["Box", "Gaussian", "Bartlett/Triangular", "Sinc Sharpening", "Hanning", "Blackman", "Catmull-Rom", "Mitchell"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ coatBumpAndNormal_enable == 0 } { separateCoatNormals == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatBumpAndNormal_type != bump }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "coatBump_filterWidth", label: "Filter Width", num_components: 1, default_value: [1], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ coatBumpAndNormal_enable == 0 } { separateCoatNormals == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatBumpAndNormal_type != bump }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "coatBump_channel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ coatBumpAndNormal_enable == 0 } { separateCoatNormals == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatBumpAndNormal_type != bump }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coatBump_imagePlane", label: "Image Plane", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ coatBumpAndNormal_enable == 0 } { separateCoatNormals == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatBumpAndNormal_type != bump }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coatNormal_colorspace", label: "Texture Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "echo `pythonexprs(\"__import__(\'toolutils\').ocioColorSpaceMenu(include_roles=False,extra_choices=[\'auto\',\'Automatic\',\'linear\',\'Linear\',\'sRGB\',\'sRGB\',\'rec709\',\'Rec 709\',\'raw\',\'Raw\',\'_separator_\',\'_separator\'])\")`", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ coatBumpAndNormal_enable == 0 } { separateCoatNormals == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatBumpAndNormal_type != normal }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coatNormal_vectorSpace", label: "Vector Space", num_components: 1, default_value: ["uvtangent"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["uvtangent", "object", "world"], menu_labels: ["UV Tangent Space", "Object Space", "World Space"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ coatBumpAndNormal_enable == 0 } { separateCoatNormals == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatBumpAndNormal_type != normal }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "coatNormal_scale", label: "Effect Scale", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ coatBumpAndNormal_enable == 0 } { separateCoatNormals == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatBumpAndNormal_type != normal }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coatNormal_texture", label: "Texture Path", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ coatBumpAndNormal_enable == 0 } { separateCoatNormals == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatBumpAndNormal_type != normal }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coatNormal_wrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ coatBumpAndNormal_enable == 0 } { separateCoatNormals == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatBumpAndNormal_type != normal }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coatNormal_filter", label: "Filter", num_components: 1, default_value: ["gauss"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["box", "gauss", "bartlett", "sinc", "hanning", "blackman", "catrom", "mitchell"], menu_labels: ["Box", "Gaussian", "Bartlett/Triangular", "Sinc Sharpening", "Hanning", "Blackman", "Catmull-Rom", "Mitchell"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ coatBumpAndNormal_enable == 0 } { separateCoatNormals == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatBumpAndNormal_type != normal }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "coatNormal_filterWidth", label: "Filter Width", num_components: 1, default_value: [1], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ coatBumpAndNormal_enable == 0 } { separateCoatNormals == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatBumpAndNormal_type != normal }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "coatNormal_channel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ coatBumpAndNormal_enable == 0 } { separateCoatNormals == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatBumpAndNormal_type != normal }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coatNormal_imagePlane", label: "Image Plane", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ coatBumpAndNormal_enable == 0 } { separateCoatNormals == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatBumpAndNormal_type != normal }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "coatNormal_space", label: "Normal Space", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1"], menu_labels: ["0 to 1", "-1 to 1"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ coatBumpAndNormal_enable == 0 } { separateCoatNormals == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatBumpAndNormal_type != normal }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "coatNormal_flipX", label: "Flip X", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ coatBumpAndNormal_enable == 0 } { separateCoatNormals == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatBumpAndNormal_type != normal }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "coatNormal_flipY", label: "Flip Y", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ coatBumpAndNormal_enable == 0 } { separateCoatNormals == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatBumpAndNormal_type != normal }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "diffuse_folder_15_4", label: "Displacement", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "shop_disable_displace_shader", label: "Disable Displace Shader", default_value: false, default_expression: "!ch(\"dispInput_enable\") && !ch(\"dispTex_enable\") && !ch(\"dispNoise_enable\")", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.hide(true);
			hou_parm_template2.setHelp("None");
			hou_parm_template2.setTags({"spare_category": "Shaders"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder236", label: "General", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vm_displacebound", label: "Displacement Bound", num_components: 1, default_value: [0], default_expression: ["1.01*ch(\"dispInput_enable\")*ch(\"dispInput_max\") + ch(\"dispTex_enable\")*max(abs((1.0+ch(\"dispTex_offset\"))*ch(\"dispTex_scale\")), abs(ch(\"dispTex_offset\")*ch(\"dispTex_scale\"))) + ch(\"dispNoise_enable\")*abs(ch(\"dispNoise_amp\"))"], default_expression_language: [hou.scriptLanguage.Hscript], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableDispMap == 0 enableNoise == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": ""});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vm_truedisplace", label: "True Displacements", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableDispMap == 0 enableNoise == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": ""});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vm_bumpraydisplace", label: "Add Bump To Ray Traced Displacements", default_value: true});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vm_truedisplace == 0 }");
			hou_parm_template3.setHelp("None");
			hou_parm_template3.setTags({"mantra_class": "object", "mantra_name": "bumpraydisplace", "spare_category": "Shading"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder10", label: "Custom Input", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "dispInput_enable", label: "Enable Input Displacement", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "dispInput_max", label: "Maximum Displacement", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ dispInput_enable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": ""});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "dispInput_vectorspace", label: "Vector Space", num_components: 1, default_value: ["uvtangent"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["uvtangent", "object", "world"], menu_labels: ["UV Tangent Space", "Object Space", "World Space"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ dispInput_enable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder237", label: "Texture", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template2.setTabConditional(hou.parmCondType.HideWhen, "{ enableDispMap == 0 }");
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "dispTex_enable", label: "Enable Texture Displacement", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"ogl_use_displacemap": "1", "parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "dispTex_type", label: "Texture Type", num_components: 1, default_value: ["disp"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["disp", "vectordisp"], menu_labels: ["Displacement Along Normal", "Vector Displacement"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ dispTex_enable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "dispTex_colorSpace", label: "Texture Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "echo `pythonexprs(\"__import__(\'toolutils\').ocioColorSpaceMenu(include_roles=False,extra_choices=[\'auto\',\'Automatic\',\'linear\',\'Linear\',\'sRGB\',\'sRGB\',\'rec709\',\'Rec 709\',\'raw\',\'Raw\',\'_separator_\',\'_separator\'])\")`", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ dispTex_enable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "dispTex_vectorSpace", label: "Vector Space", num_components: 1, default_value: ["uvtangent"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["uvtangent", "object", "world"], menu_labels: ["UV Tangent Space", "Object Space", "World Space"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ dispTex_enable == 0 } { dispTex_type != normal dispTex_type != vectordisp }");
			hou_parm_template3.setTags({"ogl_displace_space": "1", "parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "dispTex_channelOrder", label: "Channel Order", num_components: 1, default_value: ["xyz"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["xyz", "xzy"], menu_labels: ["XYZ", "XZY"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ dispTex_enable == 0 } { dispTex_type != vectordisp }");
			hou_parm_template3.setTags({"ogl_displace_up": "1", "parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "dispTex_offset", label: "Offset", num_components: 1, default_value: [null], min: null, max: 0, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ dispTex_enable == 0 } { dispTex_type != bump dispTex_type != disp }");
			hou_parm_template3.setTags({"ogl_displaceoffset": "1", "parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "dispTex_scale", label: "Effect Scale", num_components: 1, default_value: [0.05], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ dispTex_enable == 0 }");
			hou_parm_template3.setTags({"ogl_displacescale": "1", "parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "dispTex_texture", label: "Texture Path", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ dispTex_enable == 0 }");
			hou_parm_template3.setTags({"ogl_displacemap": "1", "parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "dispTex_channel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ dispTex_enable == 0 } { dispTex_type != bump dispTex_type != disp }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "dispTex_wrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ dispTex_enable == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "dispTex_filter", label: "Filter", num_components: 1, default_value: ["gauss"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["box", "gauss", "bartlett", "sinc", "hanning", "blackman", "catrom", "mitchell"], menu_labels: ["Box", "Gaussian", "Bartlett/Triangular", "Sinc Sharpening", "Hanning", "Blackman", "Catmull-Rom", "Mitchell"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ dispTex_enable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "dispTex_filterWidth", label: "Filter Width", num_components: 1, default_value: [1], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ dispTex_enable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder238", label: "Noise", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template2.setTabConditional(hou.parmCondType.HideWhen, "{ enableNoise == 0 }");
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "dispNoise_enable", label: "Enable Noise Displacement", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "dispNoise_type", label: "Noise Type", num_components: 1, default_value: ["xnoise"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["pnoise", "onoise", "xnoise", "snoise", "anoise"], menu_labels: ["Perlin Noise", "Original Perlin Noise", "Simplex Noise", "Sparse Convolution Noise", "Alligator Noise"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableNoise == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ dispNoise_enable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "dispNoise_freq", label: "Frequency", num_components: 3, default_value: [10, 10, 10], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableNoise == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ dispNoise_enable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "dispNoise_offset", label: "Offset", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableNoise == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ dispNoise_enable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "dispNoise_amp", label: "Amplitude", num_components: 1, default_value: [1], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableNoise == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ dispNoise_enable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "dispNoise_rough", label: "Roughness", num_components: 1, default_value: [0.5], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableNoise == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ dispNoise_enable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "dispNoise_atten", label: "Attenuation", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableNoise == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ dispNoise_enable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "dispNoise_turb", label: "Turbulence", num_components: 1, default_value: [5], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableNoise == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ dispNoise_enable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "diffuse_folder_15_5", label: "Settings", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder239", label: "Component Labels", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.StringParmTemplate({name: "difflabel", label: "Diffuse", num_components: 1, default_value: ["diffuse"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "refllabel", label: "Reflection", num_components: 1, default_value: ["reflect"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "refractlabel", label: "Refraction", num_components: 1, default_value: ["refract"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coatlabel", label: "Coat Reflection", num_components: 1, default_value: ["coat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "ssslabel", label: "Subsurface", num_components: 1, default_value: ["sss"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder0", label: "UV", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.FloatParmTemplate({name: "uvtrans", label: "Translate", num_components: 2, default_value: [0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setTags({"ogl_bump_uvtranslate": "1", "ogl_coat_intensity_uvtranslate": "1", "ogl_coat_roughness_uvtranslate": "1", "ogl_displace_uvtranslate": "1", "ogl_emission_uvtranslate": "1", "ogl_metallic_uvtranslate": "1", "ogl_normal_uvtranslate": "1", "ogl_occlusion_uvtranslate": "1", "ogl_opacity_uvtranslate": "1", "ogl_reflect_uvtranslate": "1", "ogl_rough_uvtranslate": "1", "ogl_spec_uvtranslate": "1", "ogl_tex_uvtranslate1": "1", "parmvop": "1", "shaderparmcontexts": "surface displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "uvrot", label: "Rotate", num_components: 1, default_value: [0], min: 0, max: 360, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setTags({"ogl_bump_uvrotate": "1", "ogl_coat_intensity_uvrotate": "1", "ogl_coat_roughness_uvrotate": "1", "ogl_displace_uvrotate": "1", "ogl_emission_uvrotate": "1", "ogl_metallic_uvrotate": "1", "ogl_normal_uvrotate": "1", "ogl_occlusion_uvrotate": "1", "ogl_opacity_uvrotate": "1", "ogl_reflect_uvrotate": "1", "ogl_rough_uvrotate": "1", "ogl_spec_uvrotate": "1", "ogl_tex_uvrotate1": "1", "parmvop": "1", "shaderparmcontexts": "surface displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "uvscale", label: "Scale", num_components: 2, default_value: [1, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setTags({"ogl_bump_uvscale": "1", "ogl_coat_intensity_uvscale": "1", "ogl_coat_roughness_uvscale": "1", "ogl_displace_uvscale": "1", "ogl_emission_uvscale": "1", "ogl_metallic_uvscale": "1", "ogl_normal_uvscale": "1", "ogl_occlusion_uvscale": "1", "ogl_opacity_uvscale": "1", "ogl_reflect_uvscale": "1", "ogl_rough_uvscale": "1", "ogl_spec_uvscale": "1", "ogl_tex_uvscale1": "1", "parmvop": "1", "shaderparmcontexts": "surface displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "Cd", label: "Attribute Color", num_components: 3, default_value: [1, 1, 1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "Alpha", label: "Attribute Alpha", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.LabelParmTemplate({name: "layer", label: "layer", column_labels: [""]});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface displace"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "direct", label: "direct", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "indirect", label: "indirect", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "Ce", label: "Ce", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "direct_emission", label: "direct_emission", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "all_emission", label: "all_emission", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "all", label: "all", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "indirect_emission", label: "indirect_emission", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.LabelParmTemplate({name: "direct_comp", label: "direct_comp", column_labels: [""]});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.LabelParmTemplate({name: "indirect_comp", label: "indirect_comp", column_labels: [""]});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.LabelParmTemplate({name: "all_comp", label: "all_comp", column_labels: [""]});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "direct_noshadow", label: "direct_noshadow", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "direct_shadow", label: "direct_shadow", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "indirect_noshadow", label: "indirect_noshadow", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "indirect_shadow", label: "indirect_shadow", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "level", label: "level", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "diffuselevel", label: "diffuselevel", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "specularlevel", label: "specularlevel", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "volumelevel", label: "volumelevel", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "direct_samples", label: "direct_samples", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "indirect_samples", label: "indirect_samples", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "nlights", label: "nlights", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.LabelParmTemplate({name: "direct_noshadow_comp", label: "direct_noshadow_comp", column_labels: [""]});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.LabelParmTemplate({name: "indirect_noshadow_comp", label: "indirect_noshadow_comp", column_labels: [""]});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "nddispersion", label: "nddispersion", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "ndpriority", label: "ndpriority", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "ndior", label: "ndior", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "absorption", label: "absorption", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "Oc", label: "Oc", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "Cv", label: "Cv", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "Th", label: "Th", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "Ab", label: "Ab", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "Cu", label: "Cu", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "Vd", label: "Vd", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "Nt", label: "Nt", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "Ds", label: "Ds", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "pre_disp_P", label: "pre_disp_P", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "pre_disp_utan", label: "pre_disp_utan", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "pre_disp_vtan", label: "pre_disp_vtan", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "pre_disp_N", label: "pre_disp_N", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "disp", label: "Normal Displacement", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "vdisp", label: "Vector Displacement", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "Dt", label: "Dt", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "Vdt", label: "Vdt", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "baseN", label: "baseN", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "coatN", label: "coatN", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "speccolor", label: "Specular Color", num_components: 3, default_value: [1, 1, 1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template.hide(true);
			hou_parm_template.setHelp("Deprecated Parameter");
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "displayColor", label: "Attribute Color", num_components: 3, default_value: [1, 1, 1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "st", label: "st", num_components: 2, default_value: [0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface displace"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "displayOpacity", label: "Attribute Alpha", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			
            this.parmTemplateGroup = hou_parm_template_group;
            this.parmTemplateGroup.linkNode(this);
        }
    }
    hou.registerType('VOP/Shaders/principledshader::2.0',_hnt_VOP_principledshader__2_0)
    return _hnt_VOP_principledshader__2_0
}
        