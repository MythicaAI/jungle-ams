
export default function (hou) {
    class _hnt_SOP_rbdconstraintproperties extends hou.extend(hou._HoudiniBase).with(hou._SubgraphMixin) {
        static is_root = false;
        static id = 'SOP/Dynamics/RBD/rbdconstraintproperties';
        static category = '/SOP';
        static houdiniType = 'rbdconstraintproperties';
        static title = 'RBD Constraint Properties';
        static icon = '/editor/assets/imgs/nodes/_hnt_SOP_rbdconstraintproperties.svg';
        constructor() {
            super();
            this.flags['houdini_type'] = this.__proto__.constructor.houdiniType;
            
            const inputs = ['SOP', 'SOP', 'SOP'];
            const outputs = ['SOP', 'SOP', 'SOP'];

            for(var i=0;i<inputs.length;i++) this.addInput(''+i,inputs[i]);        
            for(var j=0;j<outputs.length;j++) this.addOutput(''+j,outputs[j]);
        }
        parmTemplatesInit() {
            let hou_parm_template_group = new hou.ParmTemplateGroup();
			this.parmTemplateGroup = hou_parm_template_group;
			let hou_parm_template = new hou.StringParmTemplate({name: "constraintgroup", label: "Constraint Group", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "result = []\ngeo = hou.pwd().node(\"CONSTRAINTS_IN\").geometry()\nif geo:\n    for grp in geo.primGroups():\n        result.append(grp.name())\n        result.append(grp.name())\nreturn result", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle});
			hou_parm_template.setTags({"autoscope": "0000000000000000", "script_action": "import soputils\nkwargs['geometrytype'] = hou.geometryType.Primitives\nkwargs['inputindex'] = 1\nsoputils.selectGroupParm(kwargs)\n", "script_action_help": "Select geometry from an available viewport.", "script_action_icon": "BUTTONS_reselect"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ToggleParmTemplate({name: "enablecolor", label: "Enable Color", default_value: false});
			hou_parm_template.hideLabel(true);
			hou_parm_template.setJoinWithNext(true);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "constraintcolor", label: "Color", num_components: 3, default_value: [1, 1, 1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ enablecolor == 0 }");
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "guidescale", label: "Guide Scale", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder0", label: "Constraint Properties", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			let hou_parm_template2 = new hou.MenuParmTemplate({name: "constrainttype", label: "Constraint Type", menu_items: ["glue", "soft", "hard"], menu_labels: ["Glue", "Soft", "Hard"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "constraintdof", label: "Degrees of Freedom", menu_items: ["all", "position", "rotation"], menu_labels: ["Position and Rotation", "Position Only", "Rotation Only"], default_value: 0, default_expression: "glue", default_expression_language: hou.scriptLanguage.Hscript, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype == glue }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype == glue }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "glue_constraintname", label: "Constraint Name", num_components: 1, default_value: ["Glue"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != glue }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != glue }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "glue_strength", label: "Strength", num_components: 1, default_value: [10000], min: 0, max: 20000, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != glue }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != glue }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "glue_strengthscaling", label: "strength scaling", menu_items: ["0", "1"], menu_labels: ["No Scaling", "Scale by Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != glue }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "glue_strengthattribute", label: "Strength Attribute", num_components: 1, default_value: ["strength"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "kwargs[\"node\"].hm().listFloatAttributes(kwargs)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != glue } { glue_strengthscaling == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "glue_randomizestrength", label: "Randomize Strength", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != glue }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != glue }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "glue_strengthvariance", label: "Strength Variance", num_components: 1, default_value: [0.8], min: 0, max: 5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != glue } { glue_randomizestrength == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != glue }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "glue_halflife", label: "Half Life", num_components: 1, default_value: [0.1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != glue }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != glue }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "glue_halflifescaling", label: "halflife scaling", menu_items: ["0", "1"], menu_labels: ["No Scaling", "Scale by Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != glue }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "glue_halflifeattribute", label: "Half Life Attribute", num_components: 1, default_value: ["impulse_halflife"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "kwargs[\"node\"].hm().listFloatAttributes(kwargs)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != glue } { glue_halflifescaling == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "glue_propagationrate", label: "Propagation Rate", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != glue }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != glue }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "glue_propagationratescaling", label: "propagation rate scaling", menu_items: ["0", "1"], menu_labels: ["No Scaling", "Scale by Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != glue }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "glue_propagationrateattribute", label: "Propagation Rate Attribute", num_components: 1, default_value: ["propagate_rate"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "kwargs[\"node\"].hm().listFloatAttributes(kwargs)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != glue } { glue_propagationratescaling == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "glue_propagationiterations", label: "Propagation Iterations", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != glue }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != glue }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "glue_uselocalproperties", label: "Use VEXpressions", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != glue }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "glue_localexpression", label: "localpropertiesexpression", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import vexpressionmenu\n\nreturn vexpressionmenu.buildSnippetMenu('rbdconstraintproperties/gluelocalexpression')", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != glue } { glue_uselocalproperties == 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setTags({"editor": "1", "editorlang": "vex", "script_action": "import vexpressionmenu\n\nnode = kwargs['node']\nparmname = 'glue_localexpression'\n\nvexpressionmenu.createSpareParmsFromChCalls(node, parmname)", "script_action_help": "Creates spare parameters for each unique call of ch() ", "script_action_icon": "BUTTONS_create_parm_from_ch", "script_callback_language": "hscript"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "soft_constraintname", label: "Constraint Name", num_components: 1, default_value: ["Soft"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != soft }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "soft_stiffness", label: "Stiffness", num_components: 1, default_value: [10], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != soft }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "soft_stiffnessscaling", label: "stiffness scaling", menu_items: ["0", "1"], menu_labels: ["No Scaling", "Scale by Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "soft_stiffnessattribute", label: "Stiffness Attribute", num_components: 1, default_value: ["stiffness"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "kwargs[\"node\"].hm().listFloatAttributes(kwargs)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { soft_stiffnessscaling == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "soft_dampingratio", label: "Damping Ratio", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != soft }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "soft_dampingratioscaling", label: "dampingratio scaling", menu_items: ["0", "1"], menu_labels: ["No Scaling", "Scale by Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "soft_dampingratioattribute", label: "Damping Ratio Attribute", num_components: 1, default_value: ["dampingratio"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "kwargs[\"node\"].hm().listFloatAttributes(kwargs)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { soft_dampingratioscaling == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "soft_enableangular", label: "Override Angular Stiffness and Damping Ratio", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { constraintdof == position }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "soft_angularstiffness", label: "Angular Stiffness", num_components: 1, default_value: [10], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ soft_enableangular == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { constraintdof == position }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "soft_angularstiffnessscaling", label: "angular stiffness scaling", menu_items: ["0", "1"], menu_labels: ["No Scaling", "Scale by Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ soft_enableangular == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { constraintdof == position }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "soft_angularstiffnessattribute", label: "Angular Stiffness Attribute", num_components: 1, default_value: ["angularstiffness"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "kwargs[\"node\"].hm().listFloatAttributes(kwargs)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ soft_enableangular == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { constraintdof == position } { soft_angularstiffnessscaling == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "soft_angulardampingratio", label: "Angular Damping Ratio", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ soft_enableangular == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { constraintdof == position }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "soft_angulardampingratioscaling", label: "angular dampingratio scaling", menu_items: ["0", "1"], menu_labels: ["No Scaling", "Scale by Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ soft_enableangular == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { constraintdof == position }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "soft_angulardampingratioattribute", label: "Angular Damping Ratio Attribute", num_components: 1, default_value: ["angulardampingratio"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "kwargs[\"node\"].hm().listFloatAttributes(kwargs)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ soft_enableangular == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { constraintdof == position } { soft_angulardampingratioscaling == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder2", label: "Plasticity", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft }");
			hou_parm_template2.setTags({"group_type": "collapsible"});
			let hou_parm_template3 = new hou.ToggleParmTemplate({name: "soft_enableplasticity", label: "Enable Plasticity", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != soft }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { constraintdof == rotation }");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "soft_plasticthreshold", label: "Threshold", num_components: 1, default_value: [0.1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != soft } { soft_enableplasticity == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { constraintdof == rotation }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "soft_plasticthresholdscaling", label: "plasticthreshold scaling", menu_items: ["0", "1"], menu_labels: ["No Scaling", "Scale by Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ soft_enableplasticity == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { constraintdof == rotation }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "soft_plasticthresholdattribute", label: "Threshold Attribute", num_components: 1, default_value: ["plasticthreshold"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "kwargs[\"node\"].hm().listFloatAttributes(kwargs)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ soft_enableplasticity == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { soft_plasticthresholdscaling == 0 } { constraintdof == rotation }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "soft_plasticthresholdratio", label: "Ratio of Current Rest Length", default_value: true});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ soft_enableplasticity == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { constraintdof == rotation }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "soft_plasticrate", label: "Rate", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != soft } { soft_enableplasticity == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { constraintdof == rotation }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "soft_plasticratescaling", label: "plasticrate scaling", menu_items: ["0", "1"], menu_labels: ["No Scaling", "Scale by Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ soft_enableplasticity == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { constraintdof == rotation }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "soft_plasticrateattribute", label: "Rate Attribute", num_components: 1, default_value: ["plasticrate"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "kwargs[\"node\"].hm().listFloatAttributes(kwargs)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ soft_enableplasticity == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { soft_plasticratescaling == 0 } { constraintdof == rotation }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "soft_plastichardening", label: "Hardening", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != soft } { soft_enableplasticity == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { constraintdof == rotation }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "soft_plastichardeningscaling", label: "plastichardening scaling", menu_items: ["0", "1"], menu_labels: ["No Scaling", "Scale by Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ soft_enableplasticity == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { constraintdof == rotation }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "soft_plastichardeningattribute", label: "Hardening Attribute", num_components: 1, default_value: ["plastichardening"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "kwargs[\"node\"].hm().listFloatAttributes(kwargs)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ soft_enableplasticity == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { soft_plastichardeningscaling == 0 } { constraintdof == rotation }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "soft_enableangularplasticity", label: "Enable Angular Plasticity", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != soft } { soft_enableangular == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { constraintdof == position }");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "soft_angularplasticthreshold", label: "Angular Threshold", num_components: 1, default_value: [10], min: 0, max: 360, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != soft } { soft_enableangular == 0 } { soft_enableangularplasticity == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { constraintdof == position }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "soft_angularplasticthresholdscaling", label: "angularplasticthreshold scaling", menu_items: ["0", "1"], menu_labels: ["No Scaling", "Scale by Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ soft_enableangular == 0 } { soft_enableangularplasticity == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { constraintdof == position }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "soft_angularplasticthresholdattribute", label: "Angular Threshold Attribute", num_components: 1, default_value: ["angularplasticthreshold"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "kwargs[\"node\"].hm().listFloatAttributes(kwargs)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ soft_enableangular == 0 } { soft_enableangularplasticity == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { soft_angularplasticthresholdscaling == 0 } { constraintdof == position }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "soft_angularplasticrate", label: "Angular Rate", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != soft } { soft_enableangular == 0 } { soft_enableangularplasticity == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { constraintdof == position }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "soft_angularplasticratescaling", label: "angularplasticrate scaling", menu_items: ["0", "1"], menu_labels: ["No Scaling", "Scale by Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ soft_enableangular == 0 } { soft_enableangularplasticity == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { constraintdof == position }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "soft_angularplasticrateattribute", label: "Angular Rate Attribute", num_components: 1, default_value: ["angularplasticrate"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "kwargs[\"node\"].hm().listFloatAttributes(kwargs)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ soft_enableangular == 0 } { soft_enableangularplasticity == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { soft_angularplasticratescaling == 0 } { constraintdof == position }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "soft_angularplastichardening", label: "Angular Hardening", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != soft } { soft_enableangular == 0 } { soft_enableangularplasticity == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { constraintdof == position }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "soft_angularplastichardeningscaling", label: "angularplastichardening scaling", menu_items: ["0", "1"], menu_labels: ["No Scaling", "Scale by Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ soft_enableangular == 0 } { soft_enableangularplasticity == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { constraintdof == position }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "soft_angularplastichardeningattribute", label: "Angular Hardening Attribute", num_components: 1, default_value: ["angularplastichardening"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "kwargs[\"node\"].hm().listFloatAttributes(kwargs)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ soft_enableangular == 0 } { soft_enableangularplasticity == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { soft_angularplastichardeningscaling == 0 } { constraintdof == position }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "soft_constraintiterations", label: "Constraint Iterations", num_components: 1, default_value: [null], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != soft }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "soft_disablecollisions", label: "Disable Collisions", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != soft }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "soft_uselocalproperties", label: "Use VEXpressions", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "soft_localexpression", label: "localpropertiesexpression", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import vexpressionmenu\n\nreturn vexpressionmenu.buildSnippetMenu('rbdconstraintproperties/softlocalexpression')", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != soft } { soft_uselocalproperties == 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setTags({"editor": "1", "editorlang": "vex", "script_action": "import vexpressionmenu\n\nnode = kwargs['node']\nparmname = 'soft_localexpression'\n\nvexpressionmenu.createSpareParmsFromChCalls(node, parmname)", "script_action_help": "Creates spare parameters for each unique call of ch() ", "script_action_icon": "BUTTONS_create_parm_from_ch", "script_callback_language": "hscript"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "hard_constraintname", label: "Constraint Name", num_components: 1, default_value: ["Hard"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != hard }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != hard }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "hard_cfm", label: "Constraint Force Mixing", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != hard }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != hard }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "hard_cfmscaling", label: "cfm scaling", menu_items: ["0", "1"], menu_labels: ["No Scaling", "Scale by Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != hard }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "hard_cfmattribute", label: "Constraint Force Mixing Attribute", num_components: 1, default_value: ["cfm"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "kwargs[\"node\"].hm().listFloatAttributes(kwargs)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != hard } { hard_cfmscaling == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "hard_erp", label: "Error Reduction Parameter", num_components: 1, default_value: [0.2], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != hard }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != hard }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "hard_erpscaling", label: "erp scaling", menu_items: ["0", "1"], menu_labels: ["No Scaling", "Scale by Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != hard }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "hard_erpattribute", label: "Error Reduction Parameter Attribute", num_components: 1, default_value: ["erp"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "kwargs[\"node\"].hm().listFloatAttributes(kwargs)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != hard } { hard_erpscaling == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "hard_angularmotor", label: "Angular Motor", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != hard }");
			hou_parm_template2.setTags({"group_type": "collapsible"});
			hou_parm_template2.setTabConditional(hou.parmCondType.HideWhen, "{ constrainttype != hard }");
			hou_parm_template3 = new hou.IntParmTemplate({name: "hard_numangularmotors", label: "Number of Motors", num_components: 1, default_value: [null], min: null, max: 3, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "hard_axis1", label: "Axis 1", num_components: 3, default_value: [1, 0, 0], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ hard_numangularmotors <= 0 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "hard_axis2", label: "Axis 2", num_components: 3, default_value: [0, 1, 0], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ hard_numangularmotors < 2 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "hard_targetw", label: "Relative Angular Velocity", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ hard_numangularmotors <= 0 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "hard_maxangularimpulse", label: "Max Impulse", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ hard_numangularmotors <= 0 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "hard_constraintiterations", label: "Constraint Iterations", num_components: 1, default_value: [null], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != hard }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != hard }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "hard_disablecollisions", label: "Disable Collisions", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != hard }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != hard }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "hard_uselocalproperties", label: "Use VEXpressions", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != hard }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "hard_localexpression", label: "localpropertiesexpression", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import vexpressionmenu\n\nreturn vexpressionmenu.buildSnippetMenu('rbdconstraintproperties/hardlocalexpression')", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != hard } { hard_uselocalproperties == 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setTags({"editor": "1", "editorlang": "vex", "script_action": "import vexpressionmenu\n\nnode = kwargs['node']\nparmname = 'hard_localexpression'\n\nvexpressionmenu.createSpareParmsFromChCalls(node, parmname)", "script_action_help": "Creates spare parameters for each unique call of ch() ", "script_action_icon": "BUTTONS_create_parm_from_ch", "script_callback_language": "hscript"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "cone_constraintname", label: "Constraint Name", num_components: 1, default_value: ["ConeTwist"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != cone }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != cone }");
			hou_parm_template2.hide(true);
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "cone_max_up_rotation", label: "Max Up Rotation", num_components: 1, default_value: [180], min: 0, max: 180, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != cone }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != cone }");
			hou_parm_template2.hide(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "cone_max_out_rotation", label: "Max Out Rotation", num_components: 1, default_value: [180], min: 0, max: 180, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != cone }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != cone }");
			hou_parm_template2.hide(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "cone_max_twist", label: "Max Twist", num_components: 1, default_value: [0], min: 0, max: 180, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != cone }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != cone }");
			hou_parm_template2.hide(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "cone_softness", label: "Softness", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != cone }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != cone }");
			hou_parm_template2.hide(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "cone_cfm", label: "Constraint Force Mixing", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != cone }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != cone }");
			hou_parm_template2.hide(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "cone_bias_factor", label: "Bias Factor", num_components: 1, default_value: [0.3], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != cone }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != cone }");
			hou_parm_template2.hide(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "cone_relaxation_factor", label: "Relaxation Factor", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != cone }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != cone }");
			hou_parm_template2.hide(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "cone_positioncfm", label: "Position CFM", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != cone }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != cone }");
			hou_parm_template2.hide(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "cone_positionerp", label: "Position ERP", num_components: 1, default_value: [0.3], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != cone }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != cone }");
			hou_parm_template2.hide(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "cone_goal_twist_axis", label: "Goal Twist Axis", num_components: 3, default_value: [1, 0, 0], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != cone }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != cone }");
			hou_parm_template2.hide(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "cone_goal_up_axis", label: "Goal Up Axis", num_components: 3, default_value: [0, 1, 0], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != cone }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != cone }");
			hou_parm_template2.hide(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "cone_constrained_twist_axis", label: "Constrained Twist Axis", num_components: 3, default_value: [1, 0, 0], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != cone }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != cone }");
			hou_parm_template2.hide(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "cone_constrained_up_axis", label: "Constrained Up Axis", num_components: 3, default_value: [0, 1, 0], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != cone }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != cone }");
			hou_parm_template2.hide(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "cone_constraintiterations", label: "Constraint Iterations", num_components: 1, default_value: [null], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != cone }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != cone }");
			hou_parm_template2.hide(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "cone_disablecollisions", label: "Disable Collisions", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != cone }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != cone }");
			hou_parm_template2.hide(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "cone_uselocalproperties", label: "Use VEXpressions", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != cone }");
			hou_parm_template2.hide(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "cone_localexpression", label: "localpropertiesexpression", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import vexpressionmenu\n\nreturn vexpressionmenu.buildSnippetMenu('rbdconstraintproperties/conelocalexpression')", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != cone } { cone_uselocalproperties == 0 }");
			hou_parm_template2.hide(true);
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setTags({"editor": "1", "editorlang": "vex", "script_action": "import vexpressionmenu\n\nnode = kwargs['node']\nparmname = 'softlocalpropertiesexpression'\n\nvexpressionmenu.createSpareParmsFromChCalls(node, parmname)", "script_action_help": "Creates spare parameters for each unique call of ch() ", "script_action_icon": "BUTTONS_create_parm_from_ch", "script_callback_language": "hscript"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "usenextconstraint", label: "Switch Constraint Type When Broken", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != glue }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != glue }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder1", label: "Next Constraint", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template2.setTabConditional(hou.parmCondType.DisableWhen, "{ constrainttype != glue } { usenextconstraint == 0 }");
			hou_parm_template2.setTabConditional(hou.parmCondType.HideWhen, "{ constrainttype != glue } { usenextconstraint == 0 }");
			hou_parm_template3 = new hou.MenuParmTemplate({name: "next_constrainttype", label: "Constraint Type", menu_items: ["soft"], menu_labels: ["Soft"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ usenextconstraint == 0 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "next_constraintdof", label: "Degrees of Freedom", menu_items: ["all", "position", "rotation"], menu_labels: ["Position and Rotation", "Position Only", "Rotation Only"], default_value: 0, default_expression: "soft", default_expression_language: hou.scriptLanguage.Hscript, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ usenextconstraint == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "next_soft_constraintname", label: "Constraint Name", num_components: 1, default_value: ["Soft"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ usenextconstraint == 0 } { next_constrainttype != soft }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "next_soft_stiffness", label: "Stiffness", num_components: 1, default_value: [10], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ usenextconstraint == 0 } { next_constrainttype != soft }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "next_soft_stiffnessscaling", label: "stiffness scaling", menu_items: ["0", "1"], menu_labels: ["No Scaling", "Scale by Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "next_soft_stiffnessattribute", label: "Stiffness Attribute", num_components: 1, default_value: ["stiffness"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "kwargs[\"node\"].hm().listFloatAttributes(kwargs)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_soft_stiffnessscaling == 0 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "next_soft_dampingratio", label: "Damping Ratio", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ usenextconstraint == 0 } { next_constrainttype != soft }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "next_soft_dampingratioscaling", label: "dampingratio scaling", menu_items: ["0", "1"], menu_labels: ["No Scaling", "Scale by Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "next_soft_dampingratioattribute", label: "Damping Ratio Attribute", num_components: 1, default_value: ["dampingratio"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "kwargs[\"node\"].hm().listFloatAttributes(kwargs)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_soft_dampingratioscaling == 0 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "next_soft_enableangular", label: "Override Angular Stiffness and Damping Ratio", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_constraintdof == position }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "next_soft_angularstiffness", label: "Angular Stiffness", num_components: 1, default_value: [10], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ next_soft_enableangular == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_constraintdof == position }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "next_soft_angularstiffnessscaling", label: "angular stiffness scaling", menu_items: ["0", "1"], menu_labels: ["No Scaling", "Scale by Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ next_soft_enableangular == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_constraintdof == position }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "next_soft_angularstiffnessattribute", label: "Angular Stiffness Attribute", num_components: 1, default_value: ["angularstiffness"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "kwargs[\"node\"].hm().listFloatAttributes(kwargs)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ next_soft_enableangular == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_constraintdof == position } { next_soft_angularstiffnessscaling == 0 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "next_soft_angulardampingratio", label: "Angular Damping Ratio", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ next_soft_enableangular == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_constraintdof == position }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "next_soft_angulardampingratioscaling", label: "angular dampingratio scaling", menu_items: ["0", "1"], menu_labels: ["No Scaling", "Scale by Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ next_soft_enableangular == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_constraintdof == position }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "next_soft_angulardampingratioattribute", label: "Angular Damping Ratio Attribute", num_components: 1, default_value: ["angulardampingratio"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "kwargs[\"node\"].hm().listFloatAttributes(kwargs)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ next_soft_enableangular == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_constraintdof == position } { next_soft_angulardampingratioscaling == 0 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "folder3", label: "Plasticity", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft }");
			hou_parm_template3.setTags({"group_type": "collapsible"});
			let hou_parm_template4 = new hou.ToggleParmTemplate({name: "next_soft_enableplasticity", label: "Enable Plasticity", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_constraintdof == rotation }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "next_soft_plasticthreshold", label: "Threshold", num_components: 1, default_value: [0.1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ next_constrainttype != soft } { next_soft_enableplasticity == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_constraintdof == rotation }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.MenuParmTemplate({name: "next_soft_plasticthresholdscaling", label: "plasticthreshold scaling", menu_items: ["0", "1"], menu_labels: ["No Scaling", "Scale by Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ next_soft_enableplasticity == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_constraintdof == rotation }");
			hou_parm_template4.hideLabel(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "next_soft_plasticthresholdattribute", label: "Threshold Attribute", num_components: 1, default_value: ["plasticthreshold"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "kwargs[\"node\"].hm().listFloatAttributes(kwargs)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ next_soft_enableplasticity == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_soft_plasticthresholdscaling == 0 } { next_constraintdof == rotation }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "next_soft_plasticthresholdratio", label: "Ratio of Current Rest Length", default_value: true});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ next_soft_enableplasticity == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_constraintdof == rotation }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "next_soft_plasticrate", label: "Rate", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ next_constrainttype != soft } { next_soft_enableplasticity == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_constraintdof == rotation }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.MenuParmTemplate({name: "next_soft_plasticratescaling", label: "plasticrate scaling", menu_items: ["0", "1"], menu_labels: ["No Scaling", "Scale by Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ next_soft_enableplasticity == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_constraintdof == rotation }");
			hou_parm_template4.hideLabel(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "next_soft_plasticrateattribute", label: "Rate Attribute", num_components: 1, default_value: ["plasticrate"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "kwargs[\"node\"].hm().listFloatAttributes(kwargs)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ next_soft_enableplasticity == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_soft_plasticratescaling == 0 } { next_constraintdof == rotation }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "next_soft_plastichardening", label: "Hardening", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ next_constrainttype != soft } { next_soft_enableplasticity == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_constraintdof == rotation }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.MenuParmTemplate({name: "next_soft_plastichardeningscaling", label: "plastichardening scaling", menu_items: ["0", "1"], menu_labels: ["No Scaling", "Scale by Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ next_soft_enableplasticity == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_constraintdof == rotation }");
			hou_parm_template4.hideLabel(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "next_soft_plastichardeningattribute", label: "Hardening Attribute", num_components: 1, default_value: ["plastichardening"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "kwargs[\"node\"].hm().listFloatAttributes(kwargs)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ next_soft_enableplasticity == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_soft_plastichardeningscaling == 0 } { next_constraintdof == rotation }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "next_soft_enableangularplasticity", label: "Enable Angular Plasticity", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ next_soft_enableangular == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_constraintdof == position }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "next_soft_angularplasticthreshold", label: "Angular Threshold", num_components: 1, default_value: [10], min: 0, max: 360, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ next_soft_enableangular == 0 } { next_constrainttype != soft } { next_soft_enableangularplasticity == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_constraintdof == position }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.MenuParmTemplate({name: "next_soft_angularplasticthresholdscaling", label: "angularplasticthreshold scaling", menu_items: ["0", "1"], menu_labels: ["No Scaling", "Scale by Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ next_soft_enableangular == 0 } { next_soft_enableangularplasticity == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_constraintdof == position }");
			hou_parm_template4.hideLabel(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "next_soft_angularplasticthresholdattribute", label: "Angular Threshold Attribute", num_components: 1, default_value: ["angularplasticthreshold"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "kwargs[\"node\"].hm().listFloatAttributes(kwargs)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ next_soft_enableangular == 0 } { next_soft_enableangularplasticity == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_soft_angularplasticthresholdscaling == 0 } { next_constraintdof == position }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "next_soft_angularplasticrate", label: "Angular Rate", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ next_soft_enableangular == 0 } { next_constrainttype != soft } { next_soft_enableangularplasticity == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_constraintdof == position }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.MenuParmTemplate({name: "next_soft_angularplasticratescaling", label: "angularplasticrate scaling", menu_items: ["0", "1"], menu_labels: ["No Scaling", "Scale by Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ next_soft_enableangular == 0 } { next_soft_enableangularplasticity == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_constraintdof == position }");
			hou_parm_template4.hideLabel(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "next_soft_angularplasticrateattribute", label: "Angular Rate Attribute", num_components: 1, default_value: ["angularplasticrate"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "kwargs[\"node\"].hm().listFloatAttributes(kwargs)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ next_soft_enableangular == 0 } { next_soft_enableangularplasticity == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_soft_angularplasticratescaling == 0 } { next_constraintdof == position }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "next_soft_angularplastichardening", label: "Angular Hardening", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ next_soft_enableangular == 0 } { next_constrainttype != soft } { next_soft_enableangularplasticity == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_constraintdof == position }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.MenuParmTemplate({name: "next_soft_angularplastichardeningscaling", label: "angularplastichardening scaling", menu_items: ["0", "1"], menu_labels: ["No Scaling", "Scale by Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ next_soft_enableangular == 0 } { next_soft_enableangularplasticity == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_constraintdof == position }");
			hou_parm_template4.hideLabel(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "next_soft_angularplastichardeningattribute", label: "Angular Hardening Attribute", num_components: 1, default_value: ["angularplastichardening"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "kwargs[\"node\"].hm().listFloatAttributes(kwargs)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ next_soft_enableangular == 0 } { next_soft_enableangularplasticity == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_soft_angularplastichardeningscaling == 0 } { next_constraintdof == position }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "next_soft_constraintiterations", label: "Constraint Iterations", num_components: 1, default_value: [null], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ usenextconstraint == 0 } { next_constrainttype != soft }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "next_soft_disablecollisions", label: "Disable Collisions", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ usenextconstraint == 0 } { next_constrainttype != soft }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "next_soft_uselocalproperties", label: "Use VEXpressions", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "next_soft_localexpression", label: "localpropertiesexpression", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import vexpressionmenu\n\nreturn vexpressionmenu.buildSnippetMenu('rbdconstraintproperties/softlocalexpression')", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != soft } { next_soft_uselocalproperties == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"editor": "1", "editorlang": "vex", "script_action": "import vexpressionmenu\n\nnode = kwargs['node']\nparmname = 'next_soft_localexpression'\n\nvexpressionmenu.createSpareParmsFromChCalls(node, parmname)", "script_action_help": "Creates spare parameters for each unique call of ch() ", "script_action_icon": "BUTTONS_create_parm_from_ch", "script_callback_language": "hscript"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "next_hard_constraintname", label: "Constraint Name", num_components: 1, default_value: ["Hard"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ next_constrainttype != hard }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != hard }");
			hou_parm_template3.hide(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "next_hard_cfm", label: "Constraint Force Mixing", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ next_constrainttype != hard }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != hard }");
			hou_parm_template3.hide(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "next_hard_erp", label: "Error Reduction Parameter", num_components: 1, default_value: [0.2], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ next_constrainttype != hard }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != hard }");
			hou_parm_template3.hide(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "next_hard_angularmotor", label: "Angular Motor", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != hard }");
			hou_parm_template3.hide(true);
			hou_parm_template3.setTags({"group_type": "collapsible"});
			hou_parm_template3.setTabConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != hard }");
			hou_parm_template4 = new hou.IntParmTemplate({name: "next_hard_numangularmotors", label: "Number of Motors", num_components: 1, default_value: [0], min: 0, max: 3, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template4.hide(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "next_hard_axis1", label: "Axis 1", num_components: 3, default_value: [1, 0, 0], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ next_hard_numangularmotors == 0 }");
			hou_parm_template4.hide(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "next_hard_axis2", label: "Axis 2", num_components: 3, default_value: [0, 1, 0], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ next_hard_numangularmotors < 2 }");
			hou_parm_template4.hide(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "next_hard_targetw", label: "Relative Angular Velocity", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ next_hard_numangularmotors == 0 }");
			hou_parm_template4.hide(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "next_hard_maxangularimpulse", label: "Max Impulse", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ next_hard_numangularmotors == 0 }");
			hou_parm_template4.hide(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "next_hard_constraintiterations", label: "Constraint Iterations", num_components: 1, default_value: [null], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ next_constrainttype != hard }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != hard }");
			hou_parm_template3.hide(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "next_hard_disablecollisions", label: "Disable Collisions", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ next_constrainttype != hard }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != hard }");
			hou_parm_template3.hide(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "next_hard_uselocalproperties", label: "Use VEXpressions", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ next_constrainttype != hard }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != hard }");
			hou_parm_template3.hide(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "next_hard_localexpression", label: "localpropertiesexpression", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import vexpressionmenu\n\nreturn vexpressionmenu.buildSnippetMenu('rbdconstraintproperties/hardlocalexpression')", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ next_constrainttype != hard } { next_hard_uselocalproperties == 0 }");
			hou_parm_template3.hide(true);
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"editor": "1", "editorlang": "vex", "script_action": "import vexpressionmenu\n\nnode = kwargs['node']\nparmname = 'softlocalpropertiesexpression'\n\nvexpressionmenu.createSpareParmsFromChCalls(node, parmname)", "script_action_help": "Creates spare parameters for each unique call of ch() ", "script_action_icon": "BUTTONS_create_parm_from_ch", "script_callback_language": "hscript"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			
            this.parmTemplateGroup = hou_parm_template_group;
            this.parmTemplateGroup.linkNode(this);
        }
    }
    hou.registerType('SOP/Dynamics/RBD/rbdconstraintproperties',_hnt_SOP_rbdconstraintproperties)
    return _hnt_SOP_rbdconstraintproperties
}
        