
export default function (hou) {
    class _hnt_SOP_featherwidth extends hou.extend(hou._HoudiniBase).with(hou._SubgraphMixin) {
        static is_root = false;
        static id = 'SOP/Character FX/Feathers/featherwidth';
        static category = '/SOP';
        static houdiniType = 'featherwidth';
        static title = 'Feather Width';
        static icon = '/editor/assets/imgs/nodes/_hnt_SOP_featherwidth.svg';
        constructor() {
            super();
            this.flags['houdini_type'] = this.__proto__.constructor.houdiniType;
            
            const inputs = ['SOP', 'SOP', 'SOP'];
            const outputs = ['SOP', 'SOP', 'SOP'];

            for(var i=0;i<inputs.length;i++) this.addInput(''+i,inputs[i]);        
            for(var j=0;j<outputs.length;j++) this.addOutput(''+j,outputs[j]);
        }
        parmTemplatesInit() {
            let hou_parm_template_group = new hou.ParmTemplateGroup();
			this.parmTemplateGroup = hou_parm_template_group;
			let hou_parm_template = new hou.ToggleParmTemplate({name: "createshaftwidth", label: "Create Shaft Width", default_value: true});
			hou_parm_template.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template.setTags({"script_callback_language": "python"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "shaftwidth", label: "Shaft Width", num_components: 1, default_value: [0.005], min: 0, max: 0.1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Logarithmic, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ createshaftwidth == 0 }");
			hou_parm_template.setJoinWithNext(true);
			hou_parm_template.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template.setTags({"script_callback_language": "python"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.MenuParmTemplate({name: "shaftwidthoverride", label: "Shaft Width Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ createshaftwidth == 0 }");
			hou_parm_template.hideLabel(true);
			hou_parm_template.setJoinWithNext(true);
			hou_parm_template.setTags({"parmoverride_mainparm": "shaftwidth"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.MenuParmTemplate({name: "shaftwidthoptions", label: "Shaft Width Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ createshaftwidth == 0 }");
			hou_parm_template.hideLabel(true);
			hou_parm_template.setTags({"parmoverride_mainparm": "shaftwidth"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "shaftwidthinrange", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ createshaftwidth == 0 } { shaftwidthoverride == none }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ shaftwidthoptions != 1 shaftwidthoptions != 3 }");
			hou_parm_template.setJoinWithNext(true);
			hou_parm_template.setTags({"parmoverride_mainparm": "shaftwidth"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "shaftwidthoutrange", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ createshaftwidth == 0 } { shaftwidthoverride == none }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ shaftwidthoptions != 1 shaftwidthoptions != 3 }");
			hou_parm_template.setTags({"parmoverride_mainparm": "shaftwidth"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.RampParmTemplate({name: "shaftwidthremapramp", label: "Shaft Width Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ createshaftwidth == 0 }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ shaftwidthoptions != 2 shaftwidthoptions != 3 }");
			hou_parm_template.setTags({"parmoverride_mainparm": "shaftwidth"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "shaftwidthcurveattrib", label: "Shaft Width Attrib", num_components: 1, default_value: ["shaftwidth"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ createshaftwidth == 0 }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ shaftwidthoverride != curveattrib }");
			hou_parm_template.setTags({"parmoverride_mainparm": "shaftwidth"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "shaftwidthattrib", label: "Shaft Width Attrib", num_components: 1, default_value: ["shaftwidth"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ createshaftwidth == 0 }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ shaftwidthoverride != skinattrib }");
			hou_parm_template.setTags({"parmoverride_mainparm": "shaftwidth", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Shaft Width Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "shaftwidthtexture", label: "Shaft Width Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ createshaftwidth == 0 }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ shaftwidthoverride != texture }");
			hou_parm_template.setTags({"parmoverride_mainparm": "shaftwidth"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "shaftwidthtextureprim", label: "Shaft Width Texture", num_components: 1, default_value: ["shaftwidth"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ createshaftwidth == 0 }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ shaftwidthoverride != textureprim }");
			hou_parm_template.setJoinWithNext(true);
			hou_parm_template.setTags({"parmoverride_mainparm": "shaftwidth", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Shaft Width Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.MenuParmTemplate({name: "shaftwidthuvmode", label: "UV Mode", menu_items: ["skinuv", "curveuv"], menu_labels: ["Skin UV", "Curve UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ createshaftwidth == 0 }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ shaftwidthoverride != textureprim }");
			hou_parm_template.hideLabel(true);
			hou_parm_template.setTags({"parmoverride_mainparm": "shaftwidth"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ToggleParmTemplate({name: "createbarbwidth", label: "Create Barb Width", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template.setTags({"script_callback_language": "python"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "barbwidth", label: "Barb Width", num_components: 1, default_value: [0.0002], min: 0, max: 0.1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Logarithmic, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ createbarbwidth == 0 }");
			hou_parm_template.setJoinWithNext(true);
			hou_parm_template.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template.setTags({"script_callback_language": "python"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.MenuParmTemplate({name: "barbwidthoverride", label: "Barb Width Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ createbarbwidth == 0 }");
			hou_parm_template.hideLabel(true);
			hou_parm_template.setJoinWithNext(true);
			hou_parm_template.setTags({"parmoverride_mainparm": "barbwidth"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.MenuParmTemplate({name: "barbwidthoptions", label: "Barb Width Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ createbarbwidth == 0 }");
			hou_parm_template.hideLabel(true);
			hou_parm_template.setTags({"parmoverride_mainparm": "barbwidth"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "barbwidthinrange", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ createbarbwidth == 0 } { barbwidthoverride == none }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ barbwidthoptions != 1 barbwidthoptions != 3 }");
			hou_parm_template.setJoinWithNext(true);
			hou_parm_template.setTags({"parmoverride_mainparm": "barbwidth"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "barbwidthoutrange", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ createbarbwidth == 0 } { barbwidthoverride == none }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ barbwidthoptions != 1 barbwidthoptions != 3 }");
			hou_parm_template.setTags({"parmoverride_mainparm": "barbwidth"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ToggleParmTemplate({name: "barbwidthmapramptobarbs", label: "Map Ramp to Barbs", default_value: false});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ createbarbwidth == 0 }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ barbwidthoptions != 2 barbwidthoptions != 3 }");
			hou_parm_template.setTags({"parmoverride_mainparm": "barbwidth"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.RampParmTemplate({name: "barbwidthremapramp", label: "Barb Width Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ createbarbwidth == 0 }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ barbwidthoptions != 2 barbwidthoptions != 3 }");
			hou_parm_template.setTags({"parmoverride_mainparm": "barbwidth"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "barbwidthcurveattrib", label: "Barb Width Attrib", num_components: 1, default_value: ["barbwidth"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ createbarbwidth == 0 }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ barbwidthoverride != curveattrib }");
			hou_parm_template.setTags({"parmoverride_mainparm": "barbwidth"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "barbwidthattrib", label: "Barb Width Attrib", num_components: 1, default_value: ["barbwidth"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ createbarbwidth == 0 }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ barbwidthoverride != skinattrib }");
			hou_parm_template.setTags({"parmoverride_mainparm": "barbwidth", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Barb Width Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "barbwidthtexture", label: "Barb Width Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ createbarbwidth == 0 }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ barbwidthoverride != texture }");
			hou_parm_template.setTags({"parmoverride_mainparm": "barbwidth"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "barbwidthtextureprim", label: "Barb Width Texture", num_components: 1, default_value: ["barbwidth"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ createbarbwidth == 0 }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ barbwidthoverride != textureprim }");
			hou_parm_template.setJoinWithNext(true);
			hou_parm_template.setTags({"parmoverride_mainparm": "barbwidth", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Barb Width Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.MenuParmTemplate({name: "barbwidthuvmode", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ createbarbwidth == 0 }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ barbwidthoverride != textureprim }");
			hou_parm_template.hideLabel(true);
			hou_parm_template.setTags({"parmoverride_mainparm": "barbwidth"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "skinuvattrib", label: "Skin UV Attribute", num_components: 1, default_value: ["uv"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "ptmenu = kwargs['node'].generateInputAttribMenu(\n    1,\n    hou.attribType.Point,\n    hou.attribData.Float,\n    min_size=3,\n    array_type=False)\nvtxmenu = kwargs['node'].generateInputAttribMenu(\n    1,\n    hou.attribType.Vertex,\n    hou.attribData.Float,\n    min_size=3,\n    array_type=False)\n\nreturn ptmenu + vtxmenu", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template.setTags({"script_callback_language": "python"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "featheruvattrib", label: "Feather UV Attribute", num_components: 1, default_value: ["uv"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "ptmenu = kwargs['node'].generateInputAttribMenu(\n    0,\n    hou.attribType.Point,\n    hou.attribData.Float,\n    min_size=3,\n    array_type=False)\n\nreturn ptmenu", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template.setTags({"script_callback_language": "python"});
			hou_parm_template_group.append(hou_parm_template);
			
            this.parmTemplateGroup = hou_parm_template_group;
            this.parmTemplateGroup.linkNode(this);
        }
    }
    hou.registerType('SOP/Character FX/Feathers/featherwidth',_hnt_SOP_featherwidth)
    return _hnt_SOP_featherwidth
}
        