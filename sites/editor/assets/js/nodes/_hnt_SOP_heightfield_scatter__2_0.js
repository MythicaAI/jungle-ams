
export default function (hou) {
    class _hnt_SOP_heightfield_scatter__2_0 extends hou.extend(hou._HoudiniBase).with(hou._SubgraphMixin) {
        static is_root = false;
        static id = 'SOP/Environments/Terrain/heightfield_scatter::2.0';
        static category = '/SOP';
        static houdiniType = 'heightfield_scatter::2.0';
        static title = 'HeightField Scatter';
        static icon = '/editor/assets/imgs/nodes/_hnt_SOP_heightfield_scatter__2_0.svg';
        constructor() {
            super();
            this.flags['houdini_type'] = this.__proto__.constructor.houdiniType;
            
            const inputs = ['SOP', 'SOP', 'SOP'];
            const outputs = ['SOP'];

            for(var i=0;i<inputs.length;i++) this.addInput(''+i,inputs[i]);        
            for(var j=0;j<outputs.length;j++) this.addOutput(''+j,outputs[j]);
        }
        parmTemplatesInit() {
            let hou_parm_template_group = new hou.ParmTemplateGroup();
			this.parmTemplateGroup = hou_parm_template_group;
			let hou_parm_template = new hou.StringParmTemplate({name: "tag", label: "Tag Name", num_components: 1, default_value: ["$OS"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.MenuParmTemplate({name: "scattermethod", label: "Scatter Method", menu_items: ["coverage", "density", "totalpointcount", "perpointcount"], menu_labels: ["By Coverage using Mask Layer", "By Density using Mask Layer", "Total Point Count using Mask Layer", "Per Point Count using Source Points"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder1", label: "Scattering", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			let hou_parm_template2 = new hou.StringParmTemplate({name: "layer", label: "Mask Layer", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils \n\nreturn terraintoolutils.buildNameMenu(kwargs['node'])", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ hasinput(1) == 0 } { scattermethod == perpointcount }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ scattermethod == perpointcount }");
			hou_parm_template2.setTags({"script_action": "import terraintoolutils\n\nterraintoolutils.createMaskPaint(kwargs, layername=kwargs['node'].parm('layer').eval(), input_num=1)", "script_action_help": "Add a Mask Paint", "script_action_icon": "SOP_paint"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "coverage", label: "Coverage", num_components: 1, default_value: [0.5], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ scattermethod != coverage }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ scattermethod != coverage }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "units": ""});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "density", label: "Density", num_components: 1, default_value: [0.01], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Logarithmic, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ scattermethod != density }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ scattermethod != density }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "units": "m-2"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "totalpointcount", label: "Total Point Count", num_components: 1, default_value: [1000], min: 1, max: 100000, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ scattermethod != totalpointcount }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ scattermethod != totalpointcount }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "sourcetag", label: "Source Point Tag", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ scattermethod != perpointcount }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ scattermethod != perpointcount }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "perpointcount_method", label: "Per Point Count Method", menu_items: ["poissondist", "exactnumber"], menu_labels: ["Poisson Distribution", "Exact Number"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ scattermethod != perpointcount }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ scattermethod != perpointcount }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "perpointcount_exactnumber", label: "Exact Number", num_components: 1, default_value: [10], min: 0, max: 100, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ scattermethod != perpointcount } { perpointcount_method != exactnumber }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ scattermethod != perpointcount } { perpointcount_method != exactnumber }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "perpointcount_poissonrange", label: "Range", num_components: 2, default_value: [0, 20], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.MinMax, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ scattermethod != perpointcount } { perpointcount_method != poissondist }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ scattermethod != perpointcount } { perpointcount_method != poissondist }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "positioning_method", label: "Positioning Method", menu_items: ["offset", "origin", "ratio"], menu_labels: ["Offset", "Origin", "Ratio"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ scattermethod != perpointcount }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ scattermethod != perpointcount }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "positioning_origin", label: "Source Origin Radius", num_components: 2, default_value: [0, 10], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.MinMax});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ scattermethod != perpointcount } { positioning_method != origin }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ scattermethod != perpointcount } { positioning_method != origin }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "positioning_offset", label: "Source Inner Radius Offset", num_components: 2, default_value: [0, 10], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.MinMax});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ scattermethod != perpointcount } { positioning_method != offset }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ scattermethod != perpointcount } { positioning_method != offset }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "positioning_ratio", label: "Source Inner Radius Ratio", num_components: 2, default_value: [1, 2], min: 0, max: 5, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.MinMax});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ scattermethod != perpointcount } { positioning_method != ratio }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ scattermethod != perpointcount } { positioning_method != ratio }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "outerradius", label: "Outer Radius", num_components: 1, default_value: [1], min: 0, max: 2, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "falloff", label: "Falloff", num_components: 1, default_value: [0.5], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder2", label: "Variability", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template2 = new hou.MenuParmTemplate({name: "variability_method", label: "Method", menu_items: ["uniformdist", "normaldist", "exactscale"], menu_labels: ["Uniform Distribution", "Normal Distribution", "Exact Scale"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "variability_exactscale", label: "Exact Scale", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ variability_method != exactscale }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ variability_method != exactscale }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "variability_unifromrange", label: "Range", num_components: 2, default_value: [0.5, 1.5], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.MinMax});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ variability_method != uniformdist }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ variability_method != uniformdist }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "variability_normalrange", label: "Range", num_components: 2, default_value: [0.5, 1.5], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.MinMax});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ variability_method != normaldist }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ variability_method != normaldist }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "variability_normalspread", label: "Spread", num_components: 1, default_value: [0.5], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ variability_method != normaldist }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ variability_method != normaldist }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder0", label: "Relaxation", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "relax_points", label: "Relax Points", default_value: true});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "relax_selfoverlap", label: "Self Overlap", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ relax_points == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ relax_points == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "relax_avoidtag", label: "Avoid Point Tag", num_components: 1, default_value: ["*"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ relax_points == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ relax_points == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "relax_maskcutoff", label: "Mask Cut Off", num_components: 1, default_value: [0.25], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ relax_points == 0 } { scattermethod == perpointcount } { layer == \\\"\\\" }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ relax_points == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "relax_iterations", label: "Iterations", num_components: 1, default_value: [10], min: 0, max: 100, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ relax_points == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ relax_points == 0 }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "relax_removingrate", label: "Removing Rate", num_components: 1, default_value: [0.1], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ relax_points == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ relax_points == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "relax_stepratio", label: "Stepping Ratio", num_components: 1, default_value: [0.75], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ relax_points == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ relax_points == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "relax_allowoutofbounds", label: "Allow Out of Bounds Points", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ relax_points == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ relax_points == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "relax_pointremovalmethod", label: "Point Removal Method", menu_items: ["onlyflag", "remove"], menu_labels: ["Only Flag", "Remove"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ relax_points == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ relax_points == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ToggleParmTemplate({name: "keepscatterpoints", label: "Keep Incoming Scatter Points", default_value: true});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ToggleParmTemplate({name: "keepterrain", label: "Keep Incoming Terrain", default_value: true});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ToggleParmTemplate({name: "matchnormalterrain", label: "Match Normals with Terrain", default_value: true});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ToggleParmTemplate({name: "matchslopeterrain", label: "Match Direction with Slope", default_value: true});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "randomup", label: "Randomize Up", num_components: 1, default_value: [0], min: 0, max: 180, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Angle, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "randomyaw", label: "Randomize Yaw", num_components: 1, default_value: [0], min: 0, max: 180, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Angle, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ToggleParmTemplate({name: "instancenewpoints", label: "Instance on New Points", default_value: true});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ hasinput(2) == 0 }");
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.MenuParmTemplate({name: "piecemode", label: "Define Pieces", menu_items: ["attribute", "connectivity", "single"], menu_labels: ["From Attribute", "From Connectivity", "Single Piece"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "pieceattrib", label: "Piece Attrib", num_components: 1, default_value: ["class"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils \n\nreturn terraintoolutils.buildPrimAttribMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ piecemode != attribute }");
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "quant", label: "Quantization", num_components: 1, default_value: [0.01], min: 0, max: 0.1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.IntParmTemplate({name: "seed", label: "Global Seed", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ToggleParmTemplate({name: "useemergencylimit", label: "Use Max Points", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template.hideLabel(true);
			hou_parm_template.setJoinWithNext(true);
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.IntParmTemplate({name: "emergencylimit", label: "Max Points", num_components: 1, default_value: [1000000], min: 1000, max: 10000000, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ useemergencylimit == 0 }");
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			
            this.parmTemplateGroup = hou_parm_template_group;
            this.parmTemplateGroup.linkNode(this);
        }
    }
    hou.registerType('SOP/Environments/Terrain/heightfield_scatter::2.0',_hnt_SOP_heightfield_scatter__2_0)
    return _hnt_SOP_heightfield_scatter__2_0
}
        