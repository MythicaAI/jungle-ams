
export default function (hou) {
    class _hnt_DOP_sandconfigureobject extends hou.extend(hou._HoudiniBase).with(hou._SubgraphMixin) {
        static is_root = false;
        static id = 'DOP/Other/sandconfigureobject';
        static category = '/DOP';
        static houdiniType = 'sandconfigureobject';
        static title = 'Sand Configure Object';
        static icon = '/editor/assets/imgs/nodes/_hnt_DOP_sandconfigureobject.svg';
        constructor() {
            super();
            this.flags['houdini_type'] = this.__proto__.constructor.houdiniType;
            
            const inputs = ['DOP'];
            const outputs = ['DOP', 'DOP', 'DOP', 'DOP'];

            for(var i=0;i<inputs.length;i++) this.addInput(''+i,inputs[i]);        
            for(var j=0;j<outputs.length;j++) this.addOutput(''+j,outputs[j]);
        }
        parmTemplatesInit() {
            let hou_parm_template_group = new hou.ParmTemplateGroup();
			this.parmTemplateGroup = hou_parm_template_group;
			let hou_parm_template = new hou.ToggleParmTemplate({name: "orig_surface_twod", label: "Two Dimensional", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template.setJoinWithNext(true);
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.MenuParmTemplate({name: "orig_surface_voxelplane", label: "Plane", menu_items: ["xy", "yz", "zx"], menu_labels: ["XY plane", "YZ plane", "ZX plane"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.MenuParmTemplate({name: "uniformvoxels", label: "Division Method", menu_items: ["nonsquare", "x", "y", "z", "max"], menu_labels: ["Non Square", "X Axis", "Y Axis", "Z Axis", "Max Axis"], default_value: 4, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.IntParmTemplate({name: "uniformdiv", label: "Uniform Divisions", num_components: 1, default_value: [10], min: 1, max: 300, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ uniformvoxels == nonsquare }");
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.IntParmTemplate({name: "div", label: "Divisions", num_components: 3, default_value: [10, 10, 10], min: 1, max: 1000, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ uniformvoxels != nonsquare }");
			hou_parm_template.setTags({"autoscope": "0000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "size", label: "Size", num_components: 3, default_value: [1, 1, 1], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template.setTags({"autoscope": "0000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "t", label: "Center", num_components: 3, default_value: [0, 0, 0], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template.setTags({"autoscope": "0000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "std_switcher_0_1", label: "Guides", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			let hou_parm_template2 = new hou.FolderParmTemplate({name: "folder0", label: "Visualization", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			let hou_parm_template3 = new hou.ToggleParmTemplate({name: "surface_vis_showguide", label: "Show Guide Geometry", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "surface_vis_color", label: "Surface", num_components: 3, default_value: [0.9, 0.45, 0], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "velocity_vis_showguide", label: "Show Guide Geometry", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "velocity_vis_color", label: "Velocity", num_components: 3, default_value: [1, 1, 1], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "collision_vis_showguide", label: "Show Guide Geometry", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "collision_vis_color", label: "Collision", num_components: 3, default_value: [1, 1, 1], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "pressure_vis_showguide", label: "Show Guide Geometry", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "pressure_vis_color", label: "Pressure", num_components: 3, default_value: [0, 0, 1], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "strain_vis_showguide", label: "Show Guide Geometry", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "strain_vis_color", label: "Strain", num_components: 3, default_value: [1, 0, 0], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "display", label: "Display Particles", default_value: true});
			hou_parm_template3.setTags({"autoscope": "0000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder0_1", label: "Surface", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"import_enable": "1", "import_source": "op:surface_vis"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "surface_vis_usebox", label: "Bounding Box", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "usebox"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "surface_vis_useboxhash", label: "Bounding Box Hash", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_vis_usebox == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "useboxhash"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "surface_vis_usesmoke", label: "Use Smoke   ", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "usesmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "surface_vis_guideremapsmoke", label: "Remap Smoke", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_vis_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "guideremapsmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "surface_vis_guidesmokedensity", label: "Smoke Density", num_components: 1, default_value: [10], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_vis_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "guidesmokedensity"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "surface_vis_guideuseplane", label: "Use Plane     ", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_vis_usesmoke == 1 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "guideuseplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "surface_vis_guideplane", label: "Plane Orientation", menu_items: ["xy", "yz", "zx"], menu_labels: ["XY plane", "YZ plane", "ZX plane"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_vis_usesmoke == 1 } { surface_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "guideplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "surface_vis_guideplaneval", label: "Plane Position", num_components: 1, default_value: [0], min: null, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_vis_usesmoke == 1 } { surface_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "guideplaneval"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "surface_vis_guidevismode", label: "Visualization Mode", menu_items: ["none", "false", "pink", "mono", "blackbody", "bipartite"], menu_labels: ["No Mapping", "Infra-Red", "White to Red", "Grayscale", "Black Body", "Two-Tone"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_vis_usesmoke == 1 surface_vis_guideremapsmoke == 0 } { surface_vis_usesmoke == 0 surface_vis_guideuseplane == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "guidevismode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "surface_vis_guidevisdensitymode", label: "Alpha Mapping", menu_items: ["none", "increasing", "decreasing", "hill", "valley", "step", "square"], menu_labels: ["No Mapping", "Increasing", "Decreasing", "Hill", "Valley", "Step", "Square"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_vis_usesmoke == 1 surface_vis_guideremapsmoke == 0 } { surface_vis_usesmoke == 0 surface_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "guidevisdensitymode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "surface_vis_guiderangemode", label: "Specify Range by Min/Max", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_vis_usesmoke == 1 surface_vis_guideremapsmoke == 0 } { surface_vis_usesmoke == 0 surface_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "guiderangemode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "surface_vis_guiderange", label: "Guide Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_vis_usesmoke == 1 surface_vis_guideremapsmoke == 0 } { surface_vis_usesmoke == 0 surface_vis_guideuseplane == 0 } { surface_vis_guiderangemode == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "guiderange"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "surface_vis_guiderangecenter", label: "Guide Range Center", num_components: 1, default_value: [0.5], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_vis_usesmoke == 1 surface_vis_guideremapsmoke == 0 } { surface_vis_usesmoke == 0 surface_vis_guideuseplane == 0 } { surface_vis_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "guiderangecenter"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "surface_vis_guiderangesize", label: "Guide Range Width", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_vis_usesmoke == 1 surface_vis_guideremapsmoke == 0 } { surface_vis_usesmoke == 0 surface_vis_guideuseplane == 0 } { surface_vis_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "guiderangesize"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "surface_vis_guideiso", label: "Iso Offset", num_components: 1, default_value: [0], min: null, max: 5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_vis_usesmoke == 1 } { surface_vis_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "guideiso"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "surface_vis_guideinvert", label: "Invert Iso", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_vis_usesmoke == 1 } { surface_vis_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "guideinvert"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder0_2", label: "Velocity", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"import_enable": "1", "import_source": "op:velocity_vis"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "velocity_vis_guideusebox", label: "Bounding Box", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity_vis", "import_token": "guideusebox"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "velocity_vis_guideuseboxhash", label: "Bounding Box Hash", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ velocity_vis_guideusebox == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity_vis", "import_token": "guideuseboxhash"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "velocity_vis_guideusesmoke", label: "Use Smoke", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity_vis", "import_token": "guideusesmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "velocity_vis_guidescale", label: "Scale", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity_vis", "import_token": "guidescale"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "velocity_vis_guideoverridediv", label: "Override Divisions", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity_vis", "import_token": "guideoverridediv"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "velocity_vis_guidediv", label: "Divisions", num_components: 3, default_value: [10, 10, 10], min: 1, max: 1000, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ velocity_vis_guideoverridediv == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity_vis", "import_token": "guidediv"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "velocity_vis_guidebarbs", label: "Use Barbs on Vectors", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ velocity_vis_guideusesmoke == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity_vis", "import_token": "guidebarbs"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "velocity_vis_guidepercomp", label: "Component Velocities", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ velocity_vis_guideusesmoke == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity_vis", "import_token": "guidepercomp"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "velocity_vis_guideusestreamers", label: "Use Streamers", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ velocity_vis_guideusesmoke == 1 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity_vis", "import_token": "guideusestreamers"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "velocity_vis_guideplane", label: "Plane Orientation", menu_items: ["xy", "yz", "zx"], menu_labels: ["XY plane", "YZ plane", "ZX plane"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ velocity_vis_guideusesmoke == 1 } { velocity_vis_guideusestreamers == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity_vis", "import_token": "guideplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "velocity_vis_guideplaneval", label: "Plane Position", num_components: 1, default_value: [0], min: null, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ velocity_vis_guideusesmoke == 1 } { velocity_vis_guideusestreamers == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity_vis", "import_token": "guideplaneval"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "velocity_vis_guidestreamerlen", label: "Streamer Length", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ velocity_vis_guideusesmoke == 1 } { velocity_vis_guideusestreamers == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity_vis", "import_token": "guidestreamerlen"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "velocity_vis_guidestreamerminspeed", label: "Streamer Minimum Speed", num_components: 1, default_value: [0.001], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ velocity_vis_guideusesmoke == 1 } { velocity_vis_guideusestreamers == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity_vis", "import_token": "guidestreamerminspeed"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "velocity_vis_guidevistype", label: "Visualization Type", menu_items: ["none", "distance", "speed", "origin", "dir"], menu_labels: ["None", "Distance", "Speed", "Origin", "Direction"], default_value: 2, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ velocity_vis_guideusesmoke == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity_vis", "import_token": "guidevistype"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "velocity_vis_guidevismode", label: "Visualization Mode", menu_items: ["false", "pink", "mono", "blackbody", "bipartite"], menu_labels: ["Infra-Red", "White to Red", "Grayscale", "Black Body", "Two-Tone"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ velocity_vis_guideusesmoke == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity_vis", "import_token": "guidevismode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "velocity_vis_guidevisscale", label: "Visualization Scale", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ velocity_vis_guideusesmoke == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity_vis", "import_token": "guidevisscale"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder0_3", label: "Collision", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"import_enable": "1", "import_source": "op:collision_vis"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "collision_vis_usebox", label: "Bounding Box", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision_vis", "import_token": "usebox"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "collision_vis_useboxhash", label: "Bounding Box Hash", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ collision_vis_usebox == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision_vis", "import_token": "useboxhash"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "collision_vis_usesmoke", label: "Use Smoke   ", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision_vis", "import_token": "usesmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "collision_vis_guideremapsmoke", label: "Remap Smoke", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ collision_vis_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision_vis", "import_token": "guideremapsmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "collision_vis_guidesmokedensity", label: "Smoke Density", num_components: 1, default_value: [10], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ collision_vis_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision_vis", "import_token": "guidesmokedensity"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "collision_vis_guideuseplane", label: "Use Plane     ", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ collision_vis_usesmoke == 1 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision_vis", "import_token": "guideuseplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "collision_vis_guideplane", label: "Plane Orientation", menu_items: ["xy", "yz", "zx"], menu_labels: ["XY plane", "YZ plane", "ZX plane"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ collision_vis_usesmoke == 1 } { collision_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision_vis", "import_token": "guideplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "collision_vis_guideplaneval", label: "Plane Position", num_components: 1, default_value: [0], min: null, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ collision_vis_usesmoke == 1 } { collision_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision_vis", "import_token": "guideplaneval"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "collision_vis_guidevismode", label: "Visualization Mode", menu_items: ["none", "false", "pink", "mono", "blackbody", "bipartite"], menu_labels: ["No Mapping", "Infra-Red", "White to Red", "Grayscale", "Black Body", "Two-Tone"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ collision_vis_usesmoke == 1 collision_vis_guideremapsmoke == 0 } { collision_vis_usesmoke == 0 collision_vis_guideuseplane == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision_vis", "import_token": "guidevismode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "collision_vis_guidevisdensitymode", label: "Alpha Mapping", menu_items: ["none", "increasing", "decreasing", "hill", "valley", "step", "square"], menu_labels: ["No Mapping", "Increasing", "Decreasing", "Hill", "Valley", "Step", "Square"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ collision_vis_usesmoke == 1 collision_vis_guideremapsmoke == 0 } { collision_vis_usesmoke == 0 collision_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision_vis", "import_token": "guidevisdensitymode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "collision_vis_guiderangemode", label: "Specify Range by Min/Max", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ collision_vis_usesmoke == 1 collision_vis_guideremapsmoke == 0 } { collision_vis_usesmoke == 0 collision_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision_vis", "import_token": "guiderangemode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "collision_vis_guiderange", label: "Guide Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ collision_vis_usesmoke == 1 collision_vis_guideremapsmoke == 0 } { collision_vis_usesmoke == 0 collision_vis_guideuseplane == 0 } { collision_vis_guiderangemode == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision_vis", "import_token": "guiderange"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "collision_vis_guiderangecenter", label: "Guide Range Center", num_components: 1, default_value: [0.5], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ collision_vis_usesmoke == 1 collision_vis_guideremapsmoke == 0 } { collision_vis_usesmoke == 0 collision_vis_guideuseplane == 0 } { collision_vis_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision_vis", "import_token": "guiderangecenter"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "collision_vis_guiderangesize", label: "Guide Range Width", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ collision_vis_usesmoke == 1 collision_vis_guideremapsmoke == 0 } { collision_vis_usesmoke == 0 collision_vis_guideuseplane == 0 } { collision_vis_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision_vis", "import_token": "guiderangesize"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "collision_vis_guideiso", label: "Iso Offset", num_components: 1, default_value: [0], min: null, max: 5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ collision_vis_usesmoke == 1 } { collision_vis_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision_vis", "import_token": "guideiso"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "collision_vis_guideinvert", label: "Invert Iso", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ collision_vis_usesmoke == 1 } { collision_vis_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision_vis", "import_token": "guideinvert"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder0_4", label: "Pressure", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"import_enable": "1", "import_source": "op:pressure_vis"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "pressure_vis_usebox", label: "Bounding Box", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pressure_vis", "import_token": "usebox"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "pressure_vis_useboxhash", label: "Bounding Box Hash", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ pressure_vis_usebox == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pressure_vis", "import_token": "useboxhash"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "pressure_vis_usesmoke", label: "Use Smoke   ", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pressure_vis", "import_token": "usesmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "pressure_vis_guideremapsmoke", label: "Remap Smoke", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ pressure_vis_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pressure_vis", "import_token": "guideremapsmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "pressure_vis_guidesmokedensity", label: "Smoke Density", num_components: 1, default_value: [10], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ pressure_vis_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pressure_vis", "import_token": "guidesmokedensity"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "pressure_vis_guideuseplane", label: "Use Plane     ", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ pressure_vis_usesmoke == 1 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pressure_vis", "import_token": "guideuseplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "pressure_vis_guideplane", label: "Plane Orientation", menu_items: ["xy", "yz", "zx"], menu_labels: ["XY plane", "YZ plane", "ZX plane"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ pressure_vis_usesmoke == 1 } { pressure_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pressure_vis", "import_token": "guideplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "pressure_vis_guideplaneval", label: "Plane Position", num_components: 1, default_value: [0], min: null, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ pressure_vis_usesmoke == 1 } { pressure_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pressure_vis", "import_token": "guideplaneval"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "pressure_vis_guidevismode", label: "Visualization Mode", menu_items: ["none", "false", "pink", "mono", "blackbody", "bipartite"], menu_labels: ["No Mapping", "Infra-Red", "White to Red", "Grayscale", "Black Body", "Two-Tone"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ pressure_vis_usesmoke == 1 pressure_vis_guideremapsmoke == 0 } { pressure_vis_usesmoke == 0 pressure_vis_guideuseplane == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pressure_vis", "import_token": "guidevismode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "pressure_vis_guidevisdensitymode", label: "Alpha Mapping", menu_items: ["none", "increasing", "decreasing", "hill", "valley", "step", "square"], menu_labels: ["No Mapping", "Increasing", "Decreasing", "Hill", "Valley", "Step", "Square"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ pressure_vis_usesmoke == 1 pressure_vis_guideremapsmoke == 0 } { pressure_vis_usesmoke == 0 pressure_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pressure_vis", "import_token": "guidevisdensitymode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "pressure_vis_guiderangemode", label: "Specify Range by Min/Max", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ pressure_vis_usesmoke == 1 pressure_vis_guideremapsmoke == 0 } { pressure_vis_usesmoke == 0 pressure_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pressure_vis", "import_token": "guiderangemode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "pressure_vis_guiderange", label: "Guide Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ pressure_vis_usesmoke == 1 pressure_vis_guideremapsmoke == 0 } { pressure_vis_usesmoke == 0 pressure_vis_guideuseplane == 0 } { pressure_vis_guiderangemode == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pressure_vis", "import_token": "guiderange"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "pressure_vis_guiderangecenter", label: "Guide Range Center", num_components: 1, default_value: [0.5], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ pressure_vis_usesmoke == 1 pressure_vis_guideremapsmoke == 0 } { pressure_vis_usesmoke == 0 pressure_vis_guideuseplane == 0 } { pressure_vis_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pressure_vis", "import_token": "guiderangecenter"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "pressure_vis_guiderangesize", label: "Guide Range Width", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ pressure_vis_usesmoke == 1 pressure_vis_guideremapsmoke == 0 } { pressure_vis_usesmoke == 0 pressure_vis_guideuseplane == 0 } { pressure_vis_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pressure_vis", "import_token": "guiderangesize"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "pressure_vis_guideiso", label: "Iso Offset", num_components: 1, default_value: [0], min: null, max: 5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ pressure_vis_usesmoke == 1 } { pressure_vis_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pressure_vis", "import_token": "guideiso"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "pressure_vis_guideinvert", label: "Invert Iso", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ pressure_vis_usesmoke == 1 } { pressure_vis_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pressure_vis", "import_token": "guideinvert"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder0_5", label: "Strain", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"import_enable": "1", "import_source": "op:strain_vis"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "strain_vis_guideusebox", label: "Bounding Box", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:strain_vis", "import_token": "guideusebox"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "strain_vis_guideuseboxhash", label: "Bounding Box Hash", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ strain_vis_guideusebox == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:strain_vis", "import_token": "guideuseboxhash"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "strain_vis_guideusesmoke", label: "Use Smoke", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:strain_vis", "import_token": "guideusesmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "strain_vis_guideuseplane", label: "Use Plane", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ strain_vis_guideusesmoke == 1 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:strain_vis", "import_token": "guideuseplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "strain_vis_guideplane", label: "Plane Orientation", menu_items: ["xy", "yz", "zx"], menu_labels: ["XY plane", "YZ plane", "ZX plane"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ strain_vis_guideusesmoke == 1 } { strain_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:strain_vis", "import_token": "guideplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "strain_vis_guideplaneval", label: "Plane Position", num_components: 1, default_value: [0], min: null, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ strain_vis_guideusesmoke == 1 } { strain_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:strain_vis", "import_token": "guideplaneval"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "strain_vis_guidevismode", label: "Visualization Mode", menu_items: ["false", "pink", "mono", "blackbody", "bipartite"], menu_labels: ["Infra-Red", "White to Red", "Grayscale", "Black Body", "Two-Tone"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ strain_vis_guideusesmoke == 1 } { strain_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:strain_vis", "import_token": "guidevismode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "strain_vis_guiderange", label: "Guide Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ strain_vis_guideusesmoke == 1 } { strain_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:strain_vis", "import_token": "guiderange"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "strain_vis_guideiso", label: "Iso Offset", num_components: 1, default_value: [0], min: null, max: 5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ strain_vis_guideusesmoke == 1 } { strain_vis_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:strain_vis", "import_token": "guideiso"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "std_switcher_0_1_1", label: "Initial State", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2 = new hou.StringParmTemplate({name: "soppath", label: "SOP Path", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.NodeReference, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setTags({"autoscope": "0000", "opfilter": "!!SOP!!", "oprelative": "."});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "closedends", label: "Closed Boundaries", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "closexneg", label: "-X", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ closedends == 0 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "closexpos", label: "+X", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ closedends == 0 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "closeyneg", label: "-Y", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ closedends == 0 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "closeypos", label: "+Y", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ closedends == 0 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "closezneg", label: "-Z", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ closedends == 0 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "closezpos", label: "+Z", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ closedends == 0 }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			
            this.parmTemplateGroup = hou_parm_template_group;
            this.parmTemplateGroup.linkNode(this);
        }
    }
    hou.registerType('DOP/Other/sandconfigureobject',_hnt_DOP_sandconfigureobject)
    return _hnt_DOP_sandconfigureobject
}
        