
export default function (hou) {
    class _hnt_SOP_groupcreate extends hou._HoudiniBase {
        static is_root = false;
        static id = 'SOP/Other/groupcreate';
        static category = '/SOP';
        static houdiniType = 'groupcreate';
        static title = 'Group Create';
        static icon = '/editor/assets/imgs/nodes/_hnt_SOP_groupcreate.svg';
        constructor() {
            super();
            this.flags['houdini_type'] = this.__proto__.constructor.houdiniType;
            
            const inputs = ['SOP', 'SOP'];
            const outputs = ['SOP'];

            for(var i=0;i<inputs.length;i++) this.addInput(''+i,inputs[i]);        
            for(var j=0;j<outputs.length;j++) this.addOutput(''+j,outputs[j]);
        }
        parmTemplatesInit() {
            let hou_parm_template_group = new hou.ParmTemplateGroup();
			this.parmTemplateGroup = hou_parm_template_group;
			let hou_parm_template = new hou.StringParmTemplate({name: "groupname", label: "Group Name", num_components: 1, default_value: ["group1"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.MenuParmTemplate({name: "grouptype", label: "Group Type", menu_items: ["primitive", "point", "edge", "vertex"], menu_labels: ["Primitives", "Points", "Edges", "Vertices"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.MenuParmTemplate({name: "mergeop", label: "Initial Merge", menu_items: ["replace", "union", "intersect", "subtract"], menu_labels: ["Replace Existing", "Union with Existing", "Intersect with Existing", "Subtract from Existing"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder0", label: "Base Group", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			let hou_parm_template2 = new hou.ToggleParmTemplate({name: "groupbase", label: "Enable", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "basegroup", label: "Base Group", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ groupbase == 0 }");
			hou_parm_template2.setTags({"script_action": "import soputils\nkwargs['geometrytype'] = kwargs['node'].parmTuple('grouptype')\nkwargs['inputindex'] = 0\nkwargs['ordered'] = kwargs['node'].parm('ordered').eval()\nsoputils.selectGroupParm(kwargs)", "script_action_help": "Select geometry from an available viewport.\nShift-click to turn on Select Groups.", "script_action_icon": "BUTTONS_reselect"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "ordered", label: "Create Ordered", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ groupbase == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "geotype", label: "Geometry Filter", menu_items: ["all", "bezierc", "bezier", "mesh", "Channel", "circle", "Hexahedron", "MetaSQuad", "meta", "nurbc", "nurb", "PackedAgent", "AlembicRef", "PackedDisk", "PackedDiskSequence", "PackedFragment", "PackedGeometry", "PackedUSD", "part", "poly", "polysoup", "sphere", "tetrahedron", "trifan", "tristrip", "tribez", "tube", "vdb", "volume"], menu_labels: ["All Types", "Bezier Curve", "Bezier Surface", "Bilinear Mesh", "Channel", "Circle", "Hexahedron", "Meta Super-quad", "Metaball", "NURBS Curve", "NURBS Surface", "Packed Agent", "Packed Alembic", "Packed Disk", "Packed Disk Sequence", "Packed Fragment", "Packed Geometry", "Packed USD", "Particle System", "Polygon", "Polygon Soup", "Sphere", "Tetrahedron", "Triangle Fan", "Triangle Strip", "Triangular Bezier Patch", "Tube", "VDB", "Volume"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ groupbase == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "switcher3", label: "Keep in Bounding Regions", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "groupbounding", label: "Enable", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "boundtype", label: "Bounding Type", menu_items: ["usebbox", "usebsphere", "usebobject", "usebvolume", "usebconvex"], menu_labels: ["Bounding Box", "Bounding Sphere", "Bounding Object (points or vertices only)", "Bounding Volume (points or vertices only)", "Bounding Convex Hull (points or vertices only)"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ groupbounding == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "size", label: "Size", num_components: 3, default_value: [1, 1, 1], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ groupbounding == 0 } { boundtype != usebbox boundtype != usebsphere }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "t", label: "Center", num_components: 3, default_value: [0, 0, 0], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ groupbounding == 0 } { boundtype != usebbox boundtype != usebsphere }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ButtonParmTemplate({name: "initbounds", label: "Initialize to Input Bounds"});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ groupbounding == 0 } { boundtype != usebbox boundtype != usebsphere }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "includenotwhollycontained", label: "Include Partially Contained Entities", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ groupbounding == 0 } { boundtype != usebbox boundtype != usebsphere boundtype != usebconvex }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "iso", label: "Iso Surface", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ groupbounding == 0 } { boundtype != usebvolume boundtype != usebconvex }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "invertvolume", label: "Invert", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ groupbounding == 0 } { boundtype != usebvolume boundtype != usebconvex }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "switcher4", label: "Keep by Normals", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "groupnormal", label: "Enable", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ grouptype == vertex }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "camerapath", label: "Backface from", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.NodeReference, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ grouptype == vertex }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ groupnormal == 0 } { grouptype == vertex }");
			hou_parm_template2.setTags({"opfilter": "!!OBJ!!", "oprelative": "."});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "nonplanar", label: "Add Non-Planar Polygons", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ grouptype != primitive } { grouptype == vertex }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ groupnormal == 0 } { grouptype == vertex }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "nonplanartol", label: "Non-Planar Polygons Tolerance", num_components: 1, default_value: [0.001], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ grouptype != primitive } { nonplanar == 0 } { grouptype == vertex }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ groupnormal == 0 } { grouptype == vertex }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "dir", label: "Direction", num_components: 3, default_value: [0, 0, 1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Vector, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ grouptype == primitive nonplanar == 1 } { camerapath != \\\"\\\" } { grouptype == vertex }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ groupnormal == 0 } { grouptype == vertex }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "angle", label: "Spread Angle", num_components: 1, default_value: [180], min: 0, max: 180, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Angle, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ grouptype == primitive nonplanar == 1 } { camerapath != \\\"\\\" } { grouptype == vertex }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ groupnormal == 0 } { grouptype == vertex }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "oppositenormals", label: "Include Normals Matching Opposite Direction", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ grouptype == vertex }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ groupnormal == 0 } { grouptype == vertex }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "switcher5", label: "Include by Edges", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "groupedges", label: "Enable", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ grouptype == vertex }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "dominedgeangle", label: "Min Edge Angle", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ grouptype == point } { grouptype == vertex }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ groupedges == 0 } { grouptype == vertex }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "minedgeangle", label: "Min Edge Angle", num_components: 1, default_value: [20], min: 0, max: 360, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Angle, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ grouptype == point } { dominedgeangle == 0 } { grouptype == vertex }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ groupedges == 0 } { grouptype == vertex }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "domaxedgeangle", label: "Max Edge Angle", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ grouptype == point } { grouptype == vertex }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ groupedges == 0 } { grouptype == vertex }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "maxedgeangle", label: "Max Edge Angle", num_components: 1, default_value: [20], min: 0, max: 360, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Angle, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ grouptype == point } { domaxedgeangle == 0 } { grouptype == vertex }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ groupedges == 0 } { grouptype == vertex }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "edgeanglebetweenedges", label: "Edge Angle Uses Angle Between Edges", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ grouptype != edge } { grouptype == vertex }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ groupedges == 0 } { grouptype == vertex }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "dominedgelen", label: "Min Edge Length", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ grouptype != edge } { grouptype == vertex }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ groupedges == 0 } { grouptype == vertex }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "minedgelen", label: "Min Edge Length", num_components: 1, default_value: [0], min: 0, max: 100, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ grouptype != edge } { dominedgelen == 0 } { grouptype == vertex }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ groupedges == 0 } { grouptype == vertex }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "domaxedgelen", label: "Max Edge Length", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ grouptype != edge } { grouptype == vertex }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ groupedges == 0 } { grouptype == vertex }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "maxedgelen", label: "Max Edge Length", num_components: 1, default_value: [0], min: 0, max: 100, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ grouptype != edge } { domaxedgelen == 0 } { grouptype == vertex }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ groupedges == 0 } { grouptype == vertex }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "dodepth", label: "Edge Depth", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ grouptype != point } { grouptype == vertex }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ groupedges == 0 } { grouptype == vertex }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "edgestep", label: "Edge Depth", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ grouptype != point } { dodepth == 0 } { grouptype == vertex }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ groupedges == 0 } { grouptype == vertex }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "edgeptgrp", label: "Point Group", num_components: 1, default_value: ["0"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ grouptype != point } { dodepth == 0 } { grouptype == vertex }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ groupedges == 0 } { grouptype == vertex }");
			hou_parm_template2.setTags({"script_action": "import soputils\nkwargs['geometrytype'] = (hou.geometryType.Points,)\nkwargs['inputindex'] = 0\nsoputils.selectGroupParm(kwargs)", "script_action_help": "Select geometry from an available viewport.\nShift-click to turn on Select Groups.", "script_action_icon": "BUTTONS_reselect"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "unshared", label: "Unshared Edges", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ grouptype == vertex }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ groupedges == 0 } { grouptype == vertex }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "boundarygroups", label: "Create Boundary Groups", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ grouptype != point } { unshared == 0 } { grouptype == vertex }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ groupedges == 0 } { grouptype == vertex }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "switcher6", label: "Keep by Random Chance", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "grouprandom", label: "Enable", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "globalseed", label: "Global Seed", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ grouprandom == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "useseedattrib", label: "Use Seed Attribute", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ grouprandom == 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "seedattrib", label: "Seed Attribute", num_components: 1, default_value: ["id"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ useseedattrib == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ grouprandom == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "percent", label: "Percent", num_components: 1, default_value: [50], min: 0, max: 100, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ grouprandom == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			
            this.parmTemplateGroup = hou_parm_template_group;
            this.parmTemplateGroup.linkNode(this);
        }
    }
    hou.registerType('SOP/Other/groupcreate',_hnt_SOP_groupcreate)
    return _hnt_SOP_groupcreate
}
        