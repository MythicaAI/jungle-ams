
export default function (hou) {
    class _hnt_SOP_labs__biome_initialize__1_0 extends hou.extend(hou._HoudiniBase).with(hou._SubgraphMixin) {
        static is_root = false;
        static id = 'SOP/Labs/World Building/Biomes/labs::biome_initialize::1.0';
        static category = '/SOP/labs';
        static houdiniType = 'labs::biome_initialize::1.0';
        static title = 'Labs Biome Initialize (Beta)';
        static icon = '/editor/assets/imgs/nodes/_hnt_SOP_labs__biome_initialize__1_0.svg';
        constructor() {
            super();
            this.flags['houdini_type'] = this.__proto__.constructor.houdiniType;
            
            const inputs = ['SOP', 'SOP'];
            const outputs = ['SOP', 'SOP'];

            for(var i=0;i<inputs.length;i++) this.addInput(''+i,inputs[i]);        
            for(var j=0;j<outputs.length;j++) this.addOutput(''+j,outputs[j]);
        }
        parmTemplatesInit() {
            let hou_parm_template_group = new hou.ParmTemplateGroup();
			this.parmTemplateGroup = hou_parm_template_group;
			let hou_parm_template = new hou.SeparatorParmTemplate({name: "sepparm7"});
			hou_parm_template.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "biomeprofile", label: "Biome Profile", num_components: 1, default_value: ["$HIP/data/biome/biomeprofile.json"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Any, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template.setTags({"script_callback_language": "python"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.SeparatorParmTemplate({name: "sepparm2"});
			hou_parm_template.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "fd_terrain3", label: "Terrain Input", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			let hou_parm_template2 = new hou.IntParmTemplate({name: "terraintype", label: "Terrain Input Type", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2"], menu_labels: ["Houdini HeightField", "Terrain Mesh", "Heightfield Image"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "fd_hf2", label: "Houdini HeightField", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ terraintype != 0 }");
			hou_parm_template2.setTags({"group_type": "simple", "sidefx::look": "blank"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "fd_hf_3", label: "Terrain Mesh", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ terraintype != 1 }");
			hou_parm_template2.setTags({"group_type": "simple", "sidefx::look": "blank"});
			let hou_parm_template3 = new hou.FolderParmTemplate({name: "fd_meshsettings2", label: "Terrain Settings", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setTags({"group_type": "simple"});
			let hou_parm_template4 = new hou.FloatParmTemplate({name: "gridspacing_mesh", label: "Grid Spacing", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setTags({"autoscope": "1000000000000000"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FolderParmTemplate({name: "fd_customsize2", label: "Custom Size", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ autosize == 1 }");
			hou_parm_template4.setTags({"group_type": "simple", "sidefx::look": "blank"});
			let hou_parm_template5 = new hou.FloatParmTemplate({name: "size2", label: "Terrain Size", num_components: 2, default_value: [1000, 1000], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template5.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template5.setTags({"autoscope": "0000000000000000", "script_callback_language": "python"});
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template5 = new hou.FloatParmTemplate({name: "t2", label: "Center", num_components: 3, default_value: [0, 0, 0], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template5.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template5.setTags({"autoscope": "0000000000000000", "script_callback_language": "python"});
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "uniformscale2", label: "Uniform Scale", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "autosize", label: "Auto Size Height Field", default_value: true});
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "fd_hf_4", label: "Heightfield Image", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ terraintype != 2 }");
			hou_parm_template2.setTags({"group_type": "simple", "sidefx::look": "blank"});
			hou_parm_template3 = new hou.FolderParmTemplate({name: "fd_imgsettings2", label: "Image Settings", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setTags({"group_type": "simple"});
			hou_parm_template4 = new hou.StringParmTemplate({name: "filename", label: "File", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "filechooser_mode": "read"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.MenuParmTemplate({name: "monoop", label: "Channel", menu_items: ["lum", "ntsclum", "average", "max", "min", "magnitude", "hue", "saturation", "red", "green", "blue"], menu_labels: ["Luminance", "NTSC Luminance", "Average", "Maximum Component", "Minimum Component", "Magnitude", "Hue", "Saturation", "Red", "Green", "Blue"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template4.setTags({"autoscope": "1000000000000000"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "fd_imagehf_terrain_settings2", label: "Terrain Settings", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setTags({"group_type": "simple"});
			hou_parm_template4 = new hou.FloatParmTemplate({name: "gridspacing", label: "Grid Spacing", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "heightscale", label: "Height Scale", num_components: 1, default_value: [2000], min: 0, max: 100, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setTags({"autoscope": "0000000000000000"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "clampmintoggle", label: "Clamp Min", default_value: false});
			hou_parm_template4.hideLabel(true);
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "clampmin", label: "Clamp Minimum", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ clampmintoggle == 0 }");
			hou_parm_template4.setTags({"autoscope": "0000000000000000"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "clampmaxtoggle", label: "Clamp Max", default_value: false});
			hou_parm_template4.hideLabel(true);
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "clampmax", label: "Clamp Maximum", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ clampmaxtoggle == 0 }");
			hou_parm_template4.setTags({"autoscope": "0000000000000000"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FolderParmTemplate({name: "fd_imagehf_transform2", label: "Transform", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template4.setTags({"group_type": "collapsible"});
			hou_parm_template5 = new hou.MenuParmTemplate({name: "orient", label: "Orientation", menu_items: ["xy", "yz", "zx"], menu_labels: ["XY", "YZ", "ZX"], default_value: 2, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template5.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template5.setTags({"autoscope": "0000000000000000", "script_callback_language": "python"});
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template5 = new hou.MenuParmTemplate({name: "sampling", label: "Sampling", menu_items: ["center", "corner"], menu_labels: ["Center", "Corner"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template5.setTags({"autoscope": "0000000000000000"});
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template5 = new hou.FloatParmTemplate({name: "t", label: "Center", num_components: 2, default_value: [0, 0], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template5.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template5.setTags({"autoscope": "0000000000000000", "script_callback_language": "python"});
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template5 = new hou.FloatParmTemplate({name: "uniformscale", label: "Uniform Scale", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template5.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template5.setTags({"script_callback_language": "python"});
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "fd_terrain3_1", label: "Biome Input", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2 = new hou.FolderParmTemplate({name: "fd_inputtype", label: "Input Type", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template3 = new hou.IntParmTemplate({name: "biomeinput", label: "Biome Input Type", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3", "4"], menu_labels: ["Image File", "Photoshop File", "Houdini Curves", "Houdini HeightField Layers", "Mesh with Attributes"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback": "", "script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.SeparatorParmTemplate({name: "sepparm6"});
			hou_parm_template3.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "fd_imagefile2", label: "Image File", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ biomeinput != 0 }");
			hou_parm_template3.setTags({"group_type": "simple", "sidefx::look": "blank"});
			hou_parm_template4 = new hou.MenuParmTemplate({name: "imagetype", label: "Image Type", menu_items: ["0", "1"], menu_labels: ["File Path", "COP Network"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "imginput", label: "Image Input", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ imagetype != 0 }");
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "filechooser_mode": "read"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "copinput", label: "COP Input", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.NodeReference, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ imagetype != 1 }");
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"oprelative": ".", "script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "imgmatchsize", label: "Match Size to Terrain", default_value: false});
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.SeparatorParmTemplate({name: "sepparm8"});
			hou_parm_template4.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FolderParmTemplate({name: "fd_gen", label: "Biome Generation", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template4.setTags({"group_type": "simple"});
			hou_parm_template5 = new hou.IntParmTemplate({name: "numcolors", label: "Number of Colors", num_components: 1, default_value: [10], min: 1, max: 100, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template5.setScriptCallback("hou.phm().generateColors(kwargs['node'].node('END_color_generating'))");
			hou_parm_template5.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template5.setTags({"autoscope": "0000000000000000", "script_callback": "hou.phm().generateColors(kwargs['node'].node('END_color_generating'))", "script_callback_language": "python"});
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template5 = new hou.FloatParmTemplate({name: "strength", label: "Region Smoothing", num_components: 1, default_value: [25], min: 0, max: 50, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template5.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template5.setTags({"autoscope": "0000000000000000", "script_callback_language": "python"});
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template5 = new hou.FolderParmTemplate({name: "fd_neighbors", label: "Neighbor Consolidation", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template5.setTags({"group_type": "collapsible"});
			let hou_parm_template6 = new hou.FloatParmTemplate({name: "extweight", label: "Extended Influence", num_components: 1, default_value: [5], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template6.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template6.setTags({"autoscope": "0000000000000000", "script_callback_language": "python"});
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.IntParmTemplate({name: "iterations", label: "Iterations", num_components: 1, default_value: [2], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template6.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template6.setTags({"autoscope": "0000000000000000", "script_callback_language": "python"});
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.SeparatorParmTemplate({name: "sepparm5"});
			hou_parm_template4.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FolderParmTemplate({name: "fd_biomeassignmentimg2", label: "Biome Assignment", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template4.setTags({"group_type": "simple"});
			hou_parm_template5 = new hou.ButtonParmTemplate({name: "generatecolors", label: "Extract Regions"});
			hou_parm_template5.setScriptCallback("hou.phm().generateColors(kwargs['node'].node('END_color_generating'))");
			hou_parm_template5.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template5.setTags({"export_disable": "1", "script_callback": "hou.phm().generateColors(kwargs['node'].node('END_color_generating'))", "script_callback_language": "python"});
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template5 = new hou.SeparatorParmTemplate({name: "sepparm02___2"});
			hou_parm_template5.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template5 = new hou.FolderParmTemplate({name: "fd_extractcol", label: "Extracted Colors", folder_type: hou.folderType.MultiparmBlock, default_value: 0, ends_tab_group: false});
			hou_parm_template6 = new hou.FloatParmTemplate({name: "extcolor#", label: "Visualization Color", num_components: 3, default_value: [1, 1, 1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template6.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template6.setTags({"colortype": "val", "script_callback_language": "python"});
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.StringParmTemplate({name: "biomename#", label: "Biome Name", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "list = hou.phm().setBiomeName(kwargs[\'node\'])\n\n#Next four lines gets the current value of the menu\n    #And if it\'s empty, sets it as \"default\" to the first value of list\nid = kwargs[\'script_multiparm_index\']\nvalue = hou.pwd().parm(\"biomename\" + str(id)).eval()\nif value == \'\' and list != \'\':\n    hou.pwd().parm(\"biomename\" + str(id)).set(list[0])\n    \nreturn list", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template6.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template6.setTags({"script_callback_language": "python"});
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.IntParmTemplate({name: "biomehierarchy_img#", label: "Biome Hierarchy", num_components: 1, default_value: [1], min: 1, max: 20, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template6.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template6.setTags({"script_callback_language": "python"});
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.SeparatorParmTemplate({name: "sepparm03_#"});
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.SeparatorParmTemplate({name: "sepparm02_#"});
			hou_parm_template6.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "fd_photoshop2", label: "Photoshop File", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ biomeinput != 1 }");
			hou_parm_template3.setTags({"group_type": "simple", "sidefx::look": "blank"});
			hou_parm_template4 = new hou.StringParmTemplate({name: "file", label: "File", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template4.setTags({"filechooser_pattern": "*.psd"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ButtonParmTemplate({name: "reload", label: "Reload PSD"});
			hou_parm_template4.setScriptCallback("kwargs['node'].node(psd_input).parm('reload').pressButton()");
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "script_callback": "kwargs['node'].node(psd_input).parm('reload').pressButton()"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "psdmatchsize", label: "Match Size to Terrain", default_value: false});
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.SeparatorParmTemplate({name: "sepparm"});
			hou_parm_template4.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FolderParmTemplate({name: "fd_biomeassignpsd2", label: "Biome Assignment", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template4.setTags({"group_type": "simple"});
			hou_parm_template5 = new hou.FolderParmTemplate({name: "folder1", label: "Layers To Extract", folder_type: hou.folderType.MultiparmBlock, default_value: 0, ends_tab_group: false});
			hou_parm_template5.setTags({"autoscope": "0000000000000000"});
			hou_parm_template6 = new hou.StringParmTemplate({name: "layer_name#", label: "Layer Name", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import hou\n\ntry:\n    AllModuleNames = set(kwargs['node'].node('psd_input/cop2net/remove_default_planes').planes())\n    ModulePairs = [[x, x] for x in AllModuleNames]\n    return sum(ModulePairs, [])\nexcept:\n    return ['', '']", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.StringParmTemplate({name: "biomename_psd#", label: "Biome Name", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "id = kwargs[\'script_multiparm_index\']\nlist = hou.phm().setBiomeName(kwargs[\'node\'])\n\n#Next four lines gets the current value of the menu\n#And if it\'s empty, sets it as \"default\" to the first value of list\n\nvalue = hou.pwd().parm(\"biomename_psd\" + str(id)).eval()\nif value == \'\' and list != \'\':\n    hou.pwd().parm(\"biomename_psd\" + str(id)).set(list[0])  \n    \nreturn list", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template6.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template6.setTags({"script_callback_language": "python"});
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.IntParmTemplate({name: "biomehierarchy_psd#", label: "Biome Hierarchy", num_components: 1, default_value: [1], min: 1, max: 20, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template6.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template6.setTags({"script_callback_language": "python"});
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.FloatParmTemplate({name: "thresh#", label: "Brightness Threshold", num_components: 1, default_value: [0.01], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template6.setTags({"autoscope": "0000000000000000"});
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.FloatParmTemplate({name: "viscol_psd#", label: "Visualization Color", num_components: 3, default_value: [1, 1, 1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template6.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template6.setTags({"script_callback_language": "python"});
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.FolderParmTemplate({name: "fd_advanced_#_3", label: "Advanced", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template6.setTags({"group_type": "collapsible"});
			let hou_parm_template7 = new hou.FloatParmTemplate({name: "step#", label: "Resample Step", num_components: 1, default_value: [10], min: 0.001, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template7.setTags({"autoscope": "0000000000000000"});
			hou_parm_template6.addParmTemplate(hou_parm_template7);
			hou_parm_template7 = new hou.FloatParmTemplate({name: "inlinepointremoval#", label: "Inline Point Threshold", num_components: 1, default_value: [1], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template6.addParmTemplate(hou_parm_template7);
			hou_parm_template7 = new hou.FloatParmTemplate({name: "shrink_uvs#", label: "Shrink UVs", num_components: 1, default_value: [0.005], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template7.setTags({"autoscope": "0000000000000000"});
			hou_parm_template6.addParmTemplate(hou_parm_template7);
			hou_parm_template7 = new hou.ToggleParmTemplate({name: "shapeexpand#", label: "Label", default_value: false});
			hou_parm_template7.hideLabel(true);
			hou_parm_template7.setJoinWithNext(true);
			hou_parm_template6.addParmTemplate(hou_parm_template7);
			hou_parm_template7 = new hou.MenuParmTemplate({name: "op#", label: "Shape", menu_items: ["expand", "shrink"], menu_labels: ["Expand", "Shrink"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template7.setConditional(hou.parmCondType.DisableWhen, "{ shapeexpand# == 0 }");
			hou_parm_template7.setTags({"autoscope": "0000000000000000"});
			hou_parm_template6.addParmTemplate(hou_parm_template7);
			hou_parm_template7 = new hou.FloatParmTemplate({name: "size_psd#", label: "Size", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template7.setConditional(hou.parmCondType.HideWhen, "{ shapeexpand# == 0 }");
			hou_parm_template7.setTags({"autoscope": "0000000000000000"});
			hou_parm_template6.addParmTemplate(hou_parm_template7);
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.SeparatorParmTemplate({name: "sepparm2_#_3"});
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.SeparatorParmTemplate({name: "_sepparm3_#"});
			hou_parm_template6.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "fd_houdinicurves2", label: "Houdini Curves", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ biomeinput != 2 }");
			hou_parm_template3.setTags({"group_type": "simple", "sidefx::look": "blank"});
			hou_parm_template4 = new hou.ButtonParmTemplate({name: "createcurvehda", label: "Create Curve Setup HDA"});
			hou_parm_template4.setScriptCallback("hou.phm().createCurveNode(hou.pwd())");
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback": "hou.phm().createCurveNode(hou.pwd())", "script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.SeparatorParmTemplate({name: "sepparm4"});
			hou_parm_template4.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FolderParmTemplate({name: "fd_curveviz", label: "Biome Visualization", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template4.setTags({"group_type": "simple"});
			hou_parm_template5 = new hou.ButtonParmTemplate({name: "curveregion", label: "Load Biomes"});
			hou_parm_template5.setScriptCallback("hou.phm().generateCurveBiomes(kwargs['node'])");
			hou_parm_template5.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template5.setTags({"script_callback": "hou.phm().generateCurveBiomes(kwargs['node'])", "script_callback_language": "python"});
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template5 = new hou.SeparatorParmTemplate({name: "sepparm9"});
			hou_parm_template5.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template5 = new hou.FolderParmTemplate({name: "fd_curvebiomeviz", label: "Number of Biomes", folder_type: hou.folderType.MultiparmBlock, default_value: 0, ends_tab_group: false});
			hou_parm_template6 = new hou.StringParmTemplate({name: "biomename_curve#", label: "Biome Name", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "list = hou.phm().setBiomeName(kwargs[\'node\'])\n\n#Next four lines gets the current value of the menu\n#And if it\'s empty, sets it as \"default\" to the first value of list\nid = kwargs[\'script_multiparm_index\']\nvalue = hou.pwd().parm(\"biomename_curve\" + str(id)).eval()\nif value == \'\' and list != \'\':\n    hou.pwd().parm(\"biomename_curve\" + str(id)).set(list[0])\n    return list\n    \nelse:\n    return [value, value]\n    ", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template6.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template6.setTags({"script_callback_language": "python"});
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.FloatParmTemplate({name: "curvevizcol#", label: "Visualization Color", num_components: 3, default_value: [1, 1, 1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template6.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template6.setTags({"script_callback_language": "python"});
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.SeparatorParmTemplate({name: "sepparm9_#"});
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "fd_houdinihflayers2", label: "Houdini HeightField Layers", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ biomeinput != 3 }");
			hou_parm_template3.setTags({"group_type": "simple", "sidefx::look": "blank"});
			hou_parm_template4 = new hou.MenuParmTemplate({name: "layerhierarchy", label: "Layer Hierarchy Type", menu_items: ["0", "1"], menu_labels: ["Dominant Layer Value", "Manual Hierarchy Value"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FolderParmTemplate({name: "fd_biomeclass2", label: "Biome Classification", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template4.setTags({"group_type": "simple", "sidefx::look": "blank"});
			hou_parm_template5 = new hou.FolderParmTemplate({name: "fd_biomeassignmenthf2", label: "Biome Assignment", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template5.setTags({"group_type": "simple"});
			hou_parm_template6 = new hou.FolderParmTemplate({name: "fd_layers", label: "Layers", folder_type: hou.folderType.MultiparmBlock, default_value: 0, ends_tab_group: false});
			hou_parm_template7 = new hou.StringParmTemplate({name: "layername#", label: "Layer", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs[\'node\'].node(\"IN_BIOME\"))", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template7.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template7.setTags({"script_callback_language": "python"});
			hou_parm_template6.addParmTemplate(hou_parm_template7);
			hou_parm_template7 = new hou.StringParmTemplate({name: "biomename_hf_#", label: "Biome Name", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "list = hou.phm().setBiomeName(kwargs[\'node\'])\n\n\n#Next four lines gets the current value of the menu\n#And if it\'s empty, sets it as \"default\" to the first value of list\nid = kwargs[\'script_multiparm_index\']\nvalue = hou.pwd().parm(\"biomename_hf_\" + str(id)).eval()\nif value == \'\' and list != \'\':\n    hou.pwd().parm(\"biomename_hf_\" + str(id)).set(list[0]) \n    \nreturn list", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template7.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template7.setTags({"script_callback_language": "python"});
			hou_parm_template6.addParmTemplate(hou_parm_template7);
			hou_parm_template7 = new hou.IntParmTemplate({name: "biomehierarchy_hf#", label: "Biome Hierarchy", num_components: 1, default_value: [1], min: 1, max: 20, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template7.setConditional(hou.parmCondType.HideWhen, "{ layerhierarchy != 1 }");
			hou_parm_template7.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template7.setTags({"script_callback_language": "python"});
			hou_parm_template6.addParmTemplate(hou_parm_template7);
			hou_parm_template7 = new hou.FloatParmTemplate({name: "vizcol_hf#", label: "Visualization Color", num_components: 3, default_value: [1, 1, 1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template7.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template7.setTags({"script_callback_language": "python"});
			hou_parm_template6.addParmTemplate(hou_parm_template7);
			hou_parm_template7 = new hou.SeparatorParmTemplate({name: "sepparm2_#_4"});
			hou_parm_template6.addParmTemplate(hou_parm_template7);
			hou_parm_template7 = new hou.SeparatorParmTemplate({name: "_sepparm3_#_2"});
			hou_parm_template7.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template6.addParmTemplate(hou_parm_template7);
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "fd_meshwithattrib2", label: "Mesh with Attributes", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ biomeinput != 4 }");
			hou_parm_template3.setTags({"group_type": "simple", "sidefx::look": "blank"});
			hou_parm_template4 = new hou.StringParmTemplate({name: "attrname", label: "Attribute Name", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "r = []\nnode = kwargs['node']\ninputs = node.inputs()\n\nif inputs and inputs[1]:\n\n    geo = inputs[1].geometry()\n    \n    if geo:\n    \n        attrs = geo.primAttribs()\n       \n        for a in attrs:\n            if not a.isArrayType() and a.size() == 1:\n                r.extend([a.name(), a.name()])\n                \nreturn r", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template4.setScriptCallback("hou.phm().refreshValues(kwargs['node'])");
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback": "hou.phm().refreshValues(kwargs['node'])", "script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.SeparatorParmTemplate({name: "sepparm3"});
			hou_parm_template4.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FolderParmTemplate({name: "fd_biomeassignmentmesh2", label: "Biome Assignment", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template4.setTags({"group_type": "simple"});
			hou_parm_template5 = new hou.FolderParmTemplate({name: "fd_attribute", label: "Attribute Settings", folder_type: hou.folderType.MultiparmBlock, default_value: 0, ends_tab_group: false});
			hou_parm_template6 = new hou.StringParmTemplate({name: "attrvalue#", label: "Attribute Value", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "#This script gets stored Attribute Name values and populates menu dropdown with choices\n\nnode = kwargs[\'node\']\ninputs = node.inputs()\nuniqueVals = []\nuniqueValsFormatted = []\n\nif inputs and inputs[1]:\n    uniqueVals = node.parm(\"attribvalcontainer\").eval()\n    \n    #Formatting list from the stored string value into correct data type, so we eliminate unecessary characters\n    uniqueVals = list(uniqueVals.split(\",\"))\n    #Menu items only show every other entry, so we populate the array twice \n    for u in uniqueVals:\n        uniqueValsFormatted.extend([u, u])\n\n        \nreturn uniqueValsFormatted\n                ", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template6.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template6.setTags({"script_callback_language": "python"});
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.StringParmTemplate({name: "biomename_meshattr#", label: "Biome Name", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "list = hou.phm().setBiomeName(kwargs[\'node\'])\n\n#Next four lines gets the current value of the menu\n#And if it\'s empty, sets it as \"default\" to the first value of list\nid = kwargs[\'script_multiparm_index\']\nvalue = hou.pwd().parm(\"biomename_meshattr\" + str(id)).eval()\nif value == \'\' and list != \'\':\n    hou.pwd().parm(\"biomename_meshattr\" + str(id)).set(list[0])\n    \n    \nreturn list", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template6.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template6.setTags({"script_callback_language": "python"});
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.IntParmTemplate({name: "biomehierarchy_mesh#", label: "Biome Hierarchy", num_components: 1, default_value: [1], min: 1, max: 20, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template6.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template6.setTags({"script_callback_language": "python"});
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.FloatParmTemplate({name: "vizcol_mesh#", label: "Visualization Color", num_components: 3, default_value: [1, 1, 1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template6.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template6.setTags({"script_callback_language": "python"});
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.SeparatorParmTemplate({name: "sepparm2_#_5"});
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.SeparatorParmTemplate({name: "sepparm#_7"});
			hou_parm_template6.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template5 = new hou.ButtonParmTemplate({name: "loadvalues", label: "Load Values"});
			hou_parm_template5.setScriptCallback("hou.phm().loadValues(kwargs['node'])");
			hou_parm_template5.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template5.setTags({"script_callback": "hou.phm().loadValues(kwargs['node'])", "script_callback_language": "python"});
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template5 = new hou.ButtonParmTemplate({name: "refreshvalues", label: "Refresh Values"});
			hou_parm_template5.setScriptCallback("hou.phm().refreshValues(kwargs['node'])");
			hou_parm_template5.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template5.setTags({"script_callback": "hou.phm().refreshValues(kwargs['node'])", "script_callback_language": "python"});
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "attribvalcontainer", label: "Attribute Value Container", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template4.hide(true);
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"editor": "0", "script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "fd_inputtype_1", label: "Biome Overlap", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "cutout", label: "Enable Cutout", default_value: false});
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			
            this.parmTemplateGroup = hou_parm_template_group;
            this.parmTemplateGroup.linkNode(this);
        }
    }
    hou.registerType('SOP/Labs/World Building/Biomes/labs::biome_initialize::1.0',_hnt_SOP_labs__biome_initialize__1_0)
    return _hnt_SOP_labs__biome_initialize__1_0
}
        