
export default function (hou) {
    class _hnt_SOP_ballisticpath extends hou.extend(hou._HoudiniBase).with(hou._SubgraphMixin) {
        static is_root = false;
        static id = 'SOP/Geometry/Curves/ballisticpath';
        static category = '/SOP';
        static houdiniType = 'ballisticpath';
        static title = 'Ballistic Path';
        static icon = '/editor/assets/imgs/nodes/_hnt_SOP_ballisticpath.svg';
        constructor() {
            super();
            this.flags['houdini_type'] = this.__proto__.constructor.houdiniType;
            
            const inputs = ['SOP'];
            const outputs = ['SOP'];

            for(var i=0;i<inputs.length;i++) this.addInput(''+i,inputs[i]);        
            for(var j=0;j<outputs.length;j++) this.addOutput(''+j,outputs[j]);
        }
        parmTemplatesInit() {
            let hou_parm_template_group = new hou.ParmTemplateGroup();
			this.parmTemplateGroup = hou_parm_template_group;
			let hou_parm_template = new hou.FolderParmTemplate({name: "folder6", label: "General", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			let hou_parm_template2 = new hou.StringParmTemplate({name: "group", label: "Group", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a split1 group", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.StringToggle});
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "script_action": "import soputils\nkwargs['geometrytype'] = hou.geometryType.Points\nkwargs['inputindex'] = 0\nsoputils.selectGroupParm(kwargs)", "script_action_help": "Select geometry from an available viewport.", "script_action_icon": "BUTTONS_reselect"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "launchmethod", label: "Launch Method", menu_items: ["free", "targeted"], menu_labels: ["Free", "Targeted"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "lifefree", label: "Life", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ launchmethod != free }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_action": "def getParmValues(kwargs, valueparm_name):\n    node = kwargs['node']\n    return { 'parms': { 'attrib': 'life',\n                        'operation': 'set',\n                        'valuetype': 1,                                                                       \n                        'singlevalue': node.parm(valueparm_name).eval(),\n                        'rangemethod': 'midplusminusrange',\n                        'midvalue': node.parm(valueparm_name).eval(),\n                        'rangevalue': node.parm(valueparm_name).eval() * 0.25,\n                        'enable_postprocess': 1,                          \n                        'doclampmin': 1,\n                        'clampminvalue': 0,                        \n                       }\n           }\n           \nimport soptoolutils\nsoptoolutils.buildAttribAdjustFromActionButton(kwargs,\n                                              'attribadjustfloat',\n                                               getParmValues(kwargs,\n                                                             'lifefree'))", "script_action_help": "Create a randomization node to further tweak the parameter's value.", "script_action_icon": "BUTTONS_randomize", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "targetposattrib", label: "Target Position", num_components: 1, default_value: ["targetP"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "r = []\nnode = hou.pwd()\ninputs = node.inputs()\nif inputs and inputs[0]:\n    geo = inputs[0].geometry()\n    if geo:\n        attrs = geo.pointAttribs()\n        for a in attrs:\n            if a.dataType() == hou.attribData.Float and not a.isArrayType() and a.size() == 3:\n                r.extend([a.name(), a.name()])\nreturn r", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ launchmethod != targeted }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_action": "def getParmValues(kwargs):\n    node = kwargs['node']\n    \n    return { 'parms': { 'attrib': kwargs['node'].evalParm('targetposattrib'),\n                        'enable_preprocess': 1,\n                        'doinitvalue': 1,\n                        'initvaluefrom' : 2,\n                        'initvecattrib' : 'P',\n                        'dirlen_valuetype': 1,\n                        'dirlen_noiserange': 2,\n                        'dirlen_rangemin': 1,\n                        'dirlen_rangemintype': 1,\n                        'dirlen_rangeminscalex': -10,\n                        'dirlen_rangeminscaley': 0,\n                        'dirlen_rangeminscalez': 10,\n                        'dirlen_rangemax': 1,\n                        'dirlen_rangemaxtype': 1,\n                        'dirlen_rangemaxscalex': 10,\n                        'dirlen_rangemaxscaley': 0,\n                        'dirlen_rangemaxscalez': -10,\n                       }\n           }\n\nimport soptoolutils\nadjust_node = soptoolutils.buildAttribAdjustFromActionButton(kwargs,\n                                               'attribadjustvector',\n                                               getParmValues(kwargs))\n", "script_action_help": "Create a randomization node to further tweak the parameter's value.", "script_action_icon": "BUTTONS_randomize", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "targetingmethod", label: "Targeting Method", menu_items: ["life", "height", "heightplane", "initialangle", "targetangle", "minenergy"], menu_labels: ["Life", "Height", "Height Plane", "Initial Angle", "Target Angle", "Minimal Energy"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ launchmethod != targeted }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "lifetarget", label: "Life", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ launchmethod != targeted } { targetingmethod != life }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_action": "def getParmValues(kwargs, valueparm_name):\n    node = kwargs['node']\n    return { 'parms': { 'attrib': 'life',\n                        'operation': 'set',\n                        'valuetype': 1,                                                                      \n                        'singlevalue': node.parm(valueparm_name).eval(),\n                        'rangemethod': 'midplusminusrange',\n                        'midvalue': node.parm(valueparm_name).eval(),\n                        'rangevalue': node.parm(valueparm_name).eval() * 0.25,\n                        'enable_postprocess': 1,\n                        'doclampmin': 1,\n                        'clampminvalue': 0\n                       }\n           }\n           \nimport soptoolutils\nsoptoolutils.buildAttribAdjustFromActionButton(kwargs,\n                                              'attribadjustfloat',\n                                               getParmValues(kwargs,\n                                                             'lifefree'))\n", "script_action_help": "Create a randomization node to further tweak the parameter's value.", "script_action_icon": "BUTTONS_randomize", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "height", label: "Height", num_components: 1, default_value: [1], min: 0, max: 100, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ launchmethod != targeted } { targetingmethod != height }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_action": "def getParmValues(kwargs, valueparm_name):\n    node = kwargs['node']\n    return { 'parms': { 'attrib': 'height',\n                        'operation': 'set',\n                        'valuetype': 1,                                                                      \n                        'singlevalue': node.parm(valueparm_name).eval(),\n                        'rangemethod': 'midplusminusrange',\n                        'midvalue': node.parm(valueparm_name).eval(),\n                        'rangevalue': node.parm(valueparm_name).eval() * 0.25,\n                        'enable_postprocess': 1,                           \n                        'doclampmin': 1,\n                        'clampminvalue': 0\n                       }\n           }\n           \nimport soptoolutils\nsoptoolutils.buildAttribAdjustFromActionButton(kwargs,\n                                              'attribadjustfloat',\n                                               getParmValues(kwargs,\n                                                             'height'))", "script_action_help": "Create a randomization node to further tweak the parameter's value.", "script_action_icon": "BUTTONS_randomize", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "heightplanepos", label: "Plane Position", num_components: 3, default_value: [0, 1, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ launchmethod != targeted } { targetingmethod != heightplane }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_action": "def getParmValues(kwargs, valueparm_name):\n    node = kwargs[\'node\']\n    return { \'parms\': { \'attrib\': \'hplaneP\',\n                        \'enable_preprocess\': 1,\n                        \'doinitvalue\': 1,\n                        \'initvaluefrom\' : 0,\n                        \'initvaluex\' : node.parm(valueparm_name + \"x\").eval(),\n                        \'initvaluey\' : node.parm(valueparm_name + \"y\").eval(),\n                        \'initvaluez\' : node.parm(valueparm_name + \"z\").eval(),\n                       }\n           }\n\nimport soptoolutils\nsoptoolutils.buildAttribAdjustFromActionButton(kwargs,\n                                               \'attribadjustvector\',\n                                               getParmValues(kwargs,\n                                                             \'heightplanepos\'))", "script_action_help": "Create a randomization node to further tweak the parameter's value.", "script_action_icon": "BUTTONS_randomize", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "heightplanenormal", label: "Plane Normal", num_components: 3, default_value: [0, 1, 0], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ launchmethod != targeted } { targetingmethod != heightplane }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_action": "def getParmValues(kwargs, valueparm_name):\n    node = kwargs[\'node\']\n    return { \'parms\': { \'attrib\': \'hplaneN\',\n                        \'enable_preprocess\': 1,\n                        \'doinitvalue\': 1,\n                        \'initvaluefrom\' : 0,\n                        \'initvaluex\' : node.parm(valueparm_name + \"x\").eval(),\n                        \'initvaluey\' : node.parm(valueparm_name + \"y\").eval(),\n                        \'initvaluez\' : node.parm(valueparm_name + \"z\").eval(),\n                       }\n           }\n\nimport soptoolutils\nsoptoolutils.buildAttribAdjustFromActionButton(kwargs,\n                                               \'attribadjustvector\',\n                                               getParmValues(kwargs,\n                                                             \'heightplanenormal\'))", "script_action_help": "Create a randomization node to further tweak the parameter's value.", "script_action_icon": "BUTTONS_randomize", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "angleinitial", label: "Initial Angle", num_components: 1, default_value: [45], min: 0, max: 90, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Angle, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ launchmethod != targeted } { targetingmethod != initialangle }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_action": "def getParmValues(kwargs, valueparm_name):\n    node = kwargs['node']\n    return { 'parms': { 'attrib': 'angle',\n                        'operation': 'set',\n                        'valuetype': 1,                                                                       \n                        'singlevalue': node.parm(valueparm_name).eval(),\n                        'rangemethod': 'midplusminusrange',\n                        'midvalue': node.parm(valueparm_name).eval(),\n                        'rangevalue': node.parm(valueparm_name).eval() * 0.25,\n                        'enable_postprocess': 1,\n                        'doclampmin': 1,\n                        'clampminvalue': 0\n                       }\n           }\n           \nimport soptoolutils\nsoptoolutils.buildAttribAdjustFromActionButton(kwargs,\n                                              'attribadjustfloat',\n                                               getParmValues(kwargs,\n                                                             'angleinitial'))", "script_action_help": "Create a randomization node to further tweak the parameter's value.", "script_action_icon": "BUTTONS_randomize", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "angletarget", label: "Target Angle", num_components: 1, default_value: [45], min: 0, max: 90, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Angle, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ launchmethod != targeted } { targetingmethod != targetangle }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_action": "def getParmValues(kwargs, valueparm_name):\n    node = kwargs['node']\n    return { 'parms': { 'attrib': 'angle',\n                        'operation': 'set',\n                        'valuetype': 1,                                                                       \n                        'singlevalue': node.parm(valueparm_name).eval(),\n                        'rangemethod': 'midplusminusrange',\n                        'midvalue': node.parm(valueparm_name).eval(),\n                        'rangevalue': node.parm(valueparm_name).eval() * 0.25,\n                        'enable_postprocess': 1, \n                        'doclampmin': 1,\n                        'clampminvalue': 0\n                       }\n           }\n           \nimport soptoolutils\nsoptoolutils.buildAttribAdjustFromActionButton(kwargs,\n                                              'attribadjustfloat',\n                                               getParmValues(kwargs,\n                                                             'angletarget'))", "script_action_help": "Create a randomization node to further tweak the parameter's value.", "script_action_icon": "BUTTONS_randomize", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder0", label: "Projectile Properties", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template2 = new hou.FloatParmTemplate({name: "drag", label: "Drag", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "script_action": "def getParmValues(kwargs, valueparm_name):\n    node = kwargs['node']\n    return { 'parms': { 'attrib': 'drag',\n                        'operation': 'set',\n                        'valuetype': 1,                                                                       \n                        'singlevalue': node.parm(valueparm_name).eval(),\n                        'rangemethod': 'midplusminusrange',\n                        'midvalue': node.parm(valueparm_name).eval(),\n                        'rangevalue': node.parm(valueparm_name).eval() * 0.25,\n                        'enable_postprocess': 1,                          \n                        'doclampmin': 1,\n                        'clampminvalue': 0\n                       }\n           }\n           \nimport soptoolutils\nsoptoolutils.buildAttribAdjustFromActionButton(kwargs,\n                                              'attribadjustfloat',\n                                               getParmValues(kwargs,\n                                                             'drag'))", "script_action_help": "Create a randomization node to further tweak the parameter's value.", "script_action_icon": "BUTTONS_randomize", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "mass", label: "Mass", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "script_action": "def getParmValues(kwargs, valueparm_name):\n    node = kwargs['node']\n    return { 'parms': { 'attrib': 'mass',\n                        'operation': 'set',\n                        'valuetype': 1,                                                                       \n                        'singlevalue': node.parm(valueparm_name).eval(),\n                        'rangemethod': 'midplusminusrange',\n                        'midvalue': node.parm(valueparm_name).eval(),\n                        'rangevalue': node.parm(valueparm_name).eval() * 0.25,\n                        'enable_postprocess': 1,                          \n                        'doclampmin': 1,\n                        'clampminvalue': 0\n                       }\n           }\n           \nimport soptoolutils\nsoptoolutils.buildAttribAdjustFromActionButton(kwargs,\n                                              'attribadjustfloat',\n                                               getParmValues(kwargs,\n                                                             'mass'))", "script_action_help": "Create a randomization node to further tweak the parameter's value.", "script_action_icon": "BUTTONS_randomize", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "gravity", label: "Gravity", num_components: 3, default_value: [0, null, 0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "fps", label: "FPS", num_components: 1, default_value: [24], min: 0, max: 120, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "substep", label: "Substeps", num_components: 1, default_value: [1], min: 1, max: 5, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder5", label: "Basic Collision", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "clip", label: "Clip Below Height", default_value: false});
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "clipheight", label: "Clip Height", num_components: 1, default_value: [0], min: null, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ clip != 1 }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "docollision", label: "Enable Static Collision", default_value: false});
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "collisiongeopath", label: "Collision Geometry Path", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.NodeReference, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ docollision != 1 }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"oprelative": ".", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "bouncenum", label: "Number of Bounces", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ docollision != 1 }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "bounce", label: "Bounce", num_components: 1, default_value: [0.5], min: 0, max: 2, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ docollision != 1 }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "bounceforward", label: "Bounce Forward", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ docollision != 1 }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder4", label: "Ouptut", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "doattribcopy", label: "Copy Source Attributes", default_value: true});
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "copyattribs", label: "Attributes", num_components: 1, default_value: ["*"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "r = []\nnode = hou.pwd()\ninputs = node.inputs()\nif inputs and inputs[0]:\n    geo = inputs[0].geometry()\n    if geo:\n        attrs = geo.pointAttribs()\n        for a in attrs:            \n            r.extend([a.name(), a.name()])\nreturn r", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ doattribcopy != 1 }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "doattribpromote", label: "Promote Attributes", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ doattribcopy != 1 }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "createvattrib", label: "Velocity", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "vscale", label: "Velocity", num_components: 1, default_value: [1], min: 0, max: 24, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ createvattrib != 1 }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "script_action": "from soputils import actionToggleVisualizer\n\nkwargs['attribname'] = 'v'\n\nfrom soputils import actionToggleVisualizer\nactionToggleVisualizer(kwargs)", "script_action_help": "Toggle visualization Ctrl-LMB: Open the visualization editor", "script_action_icon": "VIEW_visualization", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "createpathnumattrib", label: "Path Number", default_value: false});
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "pathnumattrib", label: "Path Number", num_components: 1, default_value: ["pathnum"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ createpathnumattrib != 1 }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "createpathpointsnumattrib", label: "Number of Points per Path", default_value: false});
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "pathpointnumattrib", label: "Number of Points per Path", num_components: 1, default_value: ["pathpointsnum"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ createpathpointsnumattrib != 1 }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "createpathpointidxattrib", label: "Path Point Index", default_value: false});
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "pathpointidxattrib", label: "Path Point Index", num_components: 1, default_value: ["pathpointidx"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ createpathpointidxattrib != 1 }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "createlaunchspeed", label: "Launch Speed", default_value: false, default_expression: "relpos", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "launchspeedattrib", label: "Launch Speed", num_components: 1, default_value: ["launchspeed"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ createlaunchspeed != 1 }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "createendtime", label: "End Time", default_value: false, default_expression: "relpos", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "endtimeattrib", label: "End Time", num_components: 1, default_value: ["endtime"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ createendtime != 1 }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "createrelpos", label: "Relative Position", default_value: false, default_expression: "relpos", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "relposattrib", label: "Relative Position", num_components: 1, default_value: ["relpos"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ createrelpos != 1 }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			
            this.parmTemplateGroup = hou_parm_template_group;
            this.parmTemplateGroup.linkNode(this);
        }
    }
    hou.registerType('SOP/Geometry/Curves/ballisticpath',_hnt_SOP_ballisticpath)
    return _hnt_SOP_ballisticpath
}
        