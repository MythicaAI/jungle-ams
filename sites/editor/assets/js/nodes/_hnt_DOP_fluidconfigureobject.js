
export default function (hou) {
    class _hnt_DOP_fluidconfigureobject extends hou.extend(hou._HoudiniBase).with(hou._SubgraphMixin) {
        static is_root = false;
        static id = 'DOP/Other/fluidconfigureobject';
        static category = '/DOP';
        static houdiniType = 'fluidconfigureobject';
        static title = 'Fluid Configure Object';
        static icon = '/editor/assets/imgs/nodes/_hnt_DOP_fluidconfigureobject.svg';
        constructor() {
            super();
            this.flags['houdini_type'] = this.__proto__.constructor.houdiniType;
            
            const inputs = ['DOP'];
            const outputs = ['DOP', 'DOP', 'DOP', 'DOP'];

            for(var i=0;i<inputs.length;i++) this.addInput(''+i,inputs[i]);        
            for(var j=0;j<outputs.length;j++) this.addOutput(''+j,outputs[j]);
        }
        parmTemplatesInit() {
            let hou_parm_template_group = new hou.ParmTemplateGroup();
			this.parmTemplateGroup = hou_parm_template_group;
			let hou_parm_template = new hou.ToggleParmTemplate({name: "twod", label: "Two Dimensional", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template.setJoinWithNext(true);
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.MenuParmTemplate({name: "voxelplane", label: "Plane", menu_items: ["xy", "yz", "zx"], menu_labels: ["XY plane", "YZ plane", "ZX plane"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.MenuParmTemplate({name: "uniformvoxels", label: "Division Method", menu_items: ["nonsquare", "x", "y", "z", "max", "size"], menu_labels: ["Non Square", "X Axis", "Y Axis", "Z Axis", "Max Axis", "By Size"], default_value: 4, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.IntParmTemplate({name: "uniformdiv", label: "Uniform Divisions", num_components: 1, default_value: [10], min: 1, max: 300, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ uniformvoxels == nonsquare } { uniformvoxels == size }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ uniformvoxels == nonsquare } { uniformvoxels == size }");
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.IntParmTemplate({name: "div", label: "Divisions", num_components: 3, default_value: [10, 10, 10], min: 1, max: 1000, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ uniformvoxels != nonsquare }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ uniformvoxels != nonsquare }");
			hou_parm_template.setTags({"autoscope": "0000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "divsize", label: "Division Size", num_components: 1, default_value: [0.1], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ uniformvoxels != size }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ uniformvoxels != size }");
			hou_parm_template.setTags({"autoscope": "0000000000000000", "units": "m1"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "size", label: "Size", num_components: 3, default_value: [1, 1, 1], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template.setTags({"autoscope": "0000", "units": "m1"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "t", label: "Center", num_components: 3, default_value: [0, 0, 0], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template.setTags({"autoscope": "0000", "units": "m1"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "std_switcher_0", label: "Guides", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			let hou_parm_template2 = new hou.FolderParmTemplate({name: "folder0", label: "Visualization", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			let hou_parm_template3 = new hou.ToggleParmTemplate({name: "surface_showguide", label: "Show Guide Geometry", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "surface_color", label: "Surface", num_components: 3, default_value: [0, 0.9, 0.9], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "velocity_showguide", label: "Show Guide Geometry", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "velocity_color", label: "Velocity", num_components: 3, default_value: [1, 1, 1], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "collision_showguide", label: "Show Guide Geometry", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "collision_color", label: "Collision", num_components: 3, default_value: [1, 1, 1], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "source_showguide", label: "Show Guide Geometry", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "source_color", label: "Source", num_components: 3, default_value: [0.45, 0.9, 0], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "sink_showguide", label: "Show Guide Geometry", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "sink_color", label: "Sink", num_components: 3, default_value: [0.9, 0, 0], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "pump_showguide", label: "Show Guide Geometry", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "pump_color", label: "Pump", num_components: 3, default_value: [0, 0, 1], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "show_surfels_display", label: "Surfels", default_value: false});
			hou_parm_template3.setTags({"autoscope": "0000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder0_1", label: "Surface", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"import_enable": "1", "import_source": "op:surface"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "surface_usebox", label: "Bounding Box", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface", "import_token": "usebox"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "surface_useboxhash", label: "Bounding Box Hash", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_usebox == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface", "import_token": "useboxhash"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "surface_usesmoke", label: "Use Smoke   ", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface", "import_token": "usesmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "surface_guideremapsmoke", label: "Remap Smoke", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface", "import_token": "guideremapsmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "surface_guidesmokedensity", label: "Smoke Density", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface", "import_token": "guidesmokedensity"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "surface_guideuseplane", label: "Use Plane     ", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_usesmoke == 1 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface", "import_token": "guideuseplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "surface_guideplane", label: "Plane Orientation", menu_items: ["xy", "yz", "zx"], menu_labels: ["XY plane", "YZ plane", "ZX plane"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_usesmoke == 1 } { surface_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface", "import_token": "guideplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "surface_guideplaneval", label: "Plane Position", num_components: 1, default_value: [0], min: null, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_usesmoke == 1 } { surface_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface", "import_token": "guideplaneval"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "surface_guidevismode", label: "Visualization Mode", menu_items: ["none", "false", "pink", "mono", "blackbody", "bipartite"], menu_labels: ["No Mapping", "Infra-Red", "White to Red", "Grayscale", "Black Body", "Two-Tone"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_usesmoke == 1 surface_guideremapsmoke == 0 } { surface_usesmoke == 0 surface_guideuseplane == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface", "import_token": "guidevismode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "surface_guidevisdensitymode", label: "Alpha Mapping", menu_items: ["none", "increasing", "decreasing", "hill", "valley", "step", "square"], menu_labels: ["No Mapping", "Increasing", "Decreasing", "Hill", "Valley", "Step", "Square"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_usesmoke == 1 surface_guideremapsmoke == 0 } { surface_usesmoke == 0 surface_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface", "import_token": "guidevisdensitymode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "surface_guiderangemode", label: "Specify Range by Min/Max", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_usesmoke == 1 surface_guideremapsmoke == 0 } { surface_usesmoke == 0 surface_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface", "import_token": "guiderangemode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "surface_guiderange", label: "Guide Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_usesmoke == 1 surface_guideremapsmoke == 0 } { surface_usesmoke == 0 surface_guideuseplane == 0 } { surface_guiderangemode == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface", "import_token": "guiderange"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "surface_guiderangecenter", label: "Guide Range Center", num_components: 1, default_value: [0.5], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_usesmoke == 1 surface_guideremapsmoke == 0 } { surface_usesmoke == 0 surface_guideuseplane == 0 } { surface_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface", "import_token": "guiderangecenter"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "surface_guiderangesize", label: "Guide Range Width", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_usesmoke == 1 surface_guideremapsmoke == 0 } { surface_usesmoke == 0 surface_guideuseplane == 0 } { surface_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface", "import_token": "guiderangesize"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "surface_guideiso", label: "Iso Offset", num_components: 1, default_value: [0], min: null, max: 5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_usesmoke == 1 } { surface_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface", "import_token": "guideiso"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "surface_guideinvert", label: "Invert Iso", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_usesmoke == 1 } { surface_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface", "import_token": "guideinvert"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder0_2", label: "Velocity", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"import_enable": "1", "import_source": "op:velocity"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "velocity_guideusebox", label: "Bounding Box", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity", "import_token": "guideusebox"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "velocity_guideuseboxhash", label: "Bounding Box Hash", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ velocity_guideusebox == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity", "import_token": "guideuseboxhash"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "velocity_guideusesmoke", label: "Use Smoke", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity", "import_token": "guideusesmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "velocity_guidescale", label: "Scale", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity", "import_token": "guidescale"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "velocity_guideoverridediv", label: "Override Divisions", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity", "import_token": "guideoverridediv"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "velocity_guidediv", label: "Divisions", num_components: 3, default_value: [10, 10, 10], min: 1, max: 1000, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ velocity_guideoverridediv == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity", "import_token": "guidediv"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "velocity_guidebarbs", label: "Use Barbs on Vectors", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ velocity_guideusesmoke == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity", "import_token": "guidebarbs"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "velocity_guidepercomp", label: "Component Velocities", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ velocity_guideusesmoke == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity", "import_token": "guidepercomp"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "velocity_guideusestreamers", label: "Use Streamers", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ velocity_guideusesmoke == 1 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity", "import_token": "guideusestreamers"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "velocity_guideuseplane", label: "Use Plane", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ velocity_guideusesmoke == 1 } { velocity_guideusestreamers == 1 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity", "import_token": "guideuseplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "velocity_guideplane", label: "Plane Orientation", menu_items: ["xy", "yz", "zx"], menu_labels: ["XY plane", "YZ plane", "ZX plane"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ velocity_guideusesmoke == 1 } { velocity_guideusestreamers == 0 velocity_guideuseplane == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity", "import_token": "guideplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "velocity_guideplaneval", label: "Plane Position", num_components: 1, default_value: [0], min: null, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ velocity_guideusesmoke == 1 } { velocity_guideusestreamers == 0 velocity_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity", "import_token": "guideplaneval"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "velocity_guidestreamerlen", label: "Streamer Length", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ velocity_guideusesmoke == 1 } { velocity_guideusestreamers == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity", "import_token": "guidestreamerlen"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "velocity_guidestreamerminspeed", label: "Streamer Minimum Speed", num_components: 1, default_value: [0.001], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ velocity_guideusesmoke == 1 } { velocity_guideusestreamers == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity", "import_token": "guidestreamerminspeed"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "velocity_guidevistype", label: "Visualization Type", menu_items: ["none", "distance", "speed", "origin", "dir", "value"], menu_labels: ["None", "Distance", "Speed", "Origin", "Direction", "Value"], default_value: 2, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ velocity_guideusesmoke == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity", "import_token": "guidevistype"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "velocity_guidevismode", label: "Visualization Mode", menu_items: ["false", "pink", "mono", "blackbody", "bipartite"], menu_labels: ["Infra-Red", "White to Red", "Grayscale", "Black Body", "Two-Tone"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ velocity_guideusesmoke == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity", "import_token": "guidevismode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "velocity_guidevisscale", label: "Visualization Scale", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ velocity_guideusesmoke == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity", "import_token": "guidevisscale"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "velocity_guiderange", label: "Visualization Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ velocity_guideusesmoke == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:velocity", "import_token": "guiderange"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder0_3", label: "Collision", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"import_enable": "1", "import_source": "op:collision"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "collision_usebox", label: "Bounding Box", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision", "import_token": "usebox"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "collision_useboxhash", label: "Bounding Box Hash", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ collision_usebox == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision", "import_token": "useboxhash"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "collision_usesmoke", label: "Use Smoke   ", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision", "import_token": "usesmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "collision_guideremapsmoke", label: "Remap Smoke", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ collision_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision", "import_token": "guideremapsmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "collision_guidesmokedensity", label: "Smoke Density", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ collision_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision", "import_token": "guidesmokedensity"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "collision_guideuseplane", label: "Use Plane     ", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ collision_usesmoke == 1 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision", "import_token": "guideuseplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "collision_guideplane", label: "Plane Orientation", menu_items: ["xy", "yz", "zx"], menu_labels: ["XY plane", "YZ plane", "ZX plane"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ collision_usesmoke == 1 } { collision_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision", "import_token": "guideplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "collision_guideplaneval", label: "Plane Position", num_components: 1, default_value: [0], min: null, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ collision_usesmoke == 1 } { collision_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision", "import_token": "guideplaneval"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "collision_guidevismode", label: "Visualization Mode", menu_items: ["none", "false", "pink", "mono", "blackbody", "bipartite"], menu_labels: ["No Mapping", "Infra-Red", "White to Red", "Grayscale", "Black Body", "Two-Tone"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ collision_usesmoke == 1 collision_guideremapsmoke == 0 } { collision_usesmoke == 0 collision_guideuseplane == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision", "import_token": "guidevismode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "collision_guidevisdensitymode", label: "Alpha Mapping", menu_items: ["none", "increasing", "decreasing", "hill", "valley", "step", "square"], menu_labels: ["No Mapping", "Increasing", "Decreasing", "Hill", "Valley", "Step", "Square"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ collision_usesmoke == 1 collision_guideremapsmoke == 0 } { collision_usesmoke == 0 collision_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision", "import_token": "guidevisdensitymode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "collision_guiderangemode", label: "Specify Range by Min/Max", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ collision_usesmoke == 1 collision_guideremapsmoke == 0 } { collision_usesmoke == 0 collision_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision", "import_token": "guiderangemode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "collision_guiderange", label: "Guide Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ collision_usesmoke == 1 collision_guideremapsmoke == 0 } { collision_usesmoke == 0 collision_guideuseplane == 0 } { collision_guiderangemode == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision", "import_token": "guiderange"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "collision_guiderangecenter", label: "Guide Range Center", num_components: 1, default_value: [0.5], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ collision_usesmoke == 1 collision_guideremapsmoke == 0 } { collision_usesmoke == 0 collision_guideuseplane == 0 } { collision_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision", "import_token": "guiderangecenter"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "collision_guiderangesize", label: "Guide Range Width", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ collision_usesmoke == 1 collision_guideremapsmoke == 0 } { collision_usesmoke == 0 collision_guideuseplane == 0 } { collision_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision", "import_token": "guiderangesize"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "collision_guideiso", label: "Iso Offset", num_components: 1, default_value: [0], min: null, max: 5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ collision_usesmoke == 1 } { collision_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision", "import_token": "guideiso"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "collision_guideinvert", label: "Invert Iso", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ collision_usesmoke == 1 } { collision_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:collision", "import_token": "guideinvert"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder0_4", label: "Source", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"import_enable": "1", "import_source": "op:source"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "source_usebox", label: "Bounding Box", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:source", "import_token": "usebox"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "source_useboxhash", label: "Bounding Box Hash", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ source_usebox == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:source", "import_token": "useboxhash"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "source_usesmoke", label: "Use Smoke   ", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:source", "import_token": "usesmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "source_guideremapsmoke", label: "Remap Smoke", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ source_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:source", "import_token": "guideremapsmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "source_guidesmokedensity", label: "Smoke Density", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ source_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:source", "import_token": "guidesmokedensity"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "source_guideuseplane", label: "Use Plane     ", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ source_usesmoke == 1 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:source", "import_token": "guideuseplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "source_guideplane", label: "Plane Orientation", menu_items: ["xy", "yz", "zx"], menu_labels: ["XY plane", "YZ plane", "ZX plane"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ source_usesmoke == 1 } { source_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:source", "import_token": "guideplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "source_guideplaneval", label: "Plane Position", num_components: 1, default_value: [0], min: null, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ source_usesmoke == 1 } { source_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:source", "import_token": "guideplaneval"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "source_guidevismode", label: "Visualization Mode", menu_items: ["none", "false", "pink", "mono", "blackbody", "bipartite"], menu_labels: ["No Mapping", "Infra-Red", "White to Red", "Grayscale", "Black Body", "Two-Tone"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ source_usesmoke == 1 source_guideremapsmoke == 0 } { source_usesmoke == 0 source_guideuseplane == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:source", "import_token": "guidevismode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "source_guidevisdensitymode", label: "Alpha Mapping", menu_items: ["none", "increasing", "decreasing", "hill", "valley", "step", "square"], menu_labels: ["No Mapping", "Increasing", "Decreasing", "Hill", "Valley", "Step", "Square"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ source_usesmoke == 1 source_guideremapsmoke == 0 } { source_usesmoke == 0 source_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:source", "import_token": "guidevisdensitymode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "source_guiderangemode", label: "Specify Range by Min/Max", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ source_usesmoke == 1 source_guideremapsmoke == 0 } { source_usesmoke == 0 source_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:source", "import_token": "guiderangemode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "source_guiderange", label: "Guide Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ source_usesmoke == 1 source_guideremapsmoke == 0 } { source_usesmoke == 0 source_guideuseplane == 0 } { source_guiderangemode == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:source", "import_token": "guiderange"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "source_guiderangecenter", label: "Guide Range Center", num_components: 1, default_value: [0.5], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ source_usesmoke == 1 source_guideremapsmoke == 0 } { source_usesmoke == 0 source_guideuseplane == 0 } { source_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:source", "import_token": "guiderangecenter"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "source_guiderangesize", label: "Guide Range Width", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ source_usesmoke == 1 source_guideremapsmoke == 0 } { source_usesmoke == 0 source_guideuseplane == 0 } { source_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:source", "import_token": "guiderangesize"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "source_guideiso", label: "Iso Offset", num_components: 1, default_value: [0], min: null, max: 5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ source_usesmoke == 1 } { source_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:source", "import_token": "guideiso"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "source_guideinvert", label: "Invert Iso", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ source_usesmoke == 1 } { source_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:source", "import_token": "guideinvert"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder0_5", label: "Sink", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"import_enable": "1", "import_source": "op:sink"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "sink_usebox", label: "Bounding Box", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:sink", "import_token": "usebox"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "sink_useboxhash", label: "Bounding Box Hash", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sink_usebox == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:sink", "import_token": "useboxhash"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "sink_usesmoke", label: "Use Smoke   ", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:sink", "import_token": "usesmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "sink_guideremapsmoke", label: "Remap Smoke", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sink_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:sink", "import_token": "guideremapsmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "sink_guidesmokedensity", label: "Smoke Density", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sink_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:sink", "import_token": "guidesmokedensity"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "sink_guideuseplane", label: "Use Plane     ", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sink_usesmoke == 1 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:sink", "import_token": "guideuseplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "sink_guideplane", label: "Plane Orientation", menu_items: ["xy", "yz", "zx"], menu_labels: ["XY plane", "YZ plane", "ZX plane"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sink_usesmoke == 1 } { sink_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:sink", "import_token": "guideplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "sink_guideplaneval", label: "Plane Position", num_components: 1, default_value: [0], min: null, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sink_usesmoke == 1 } { sink_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:sink", "import_token": "guideplaneval"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "sink_guidevismode", label: "Visualization Mode", menu_items: ["none", "false", "pink", "mono", "blackbody", "bipartite"], menu_labels: ["No Mapping", "Infra-Red", "White to Red", "Grayscale", "Black Body", "Two-Tone"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sink_usesmoke == 1 sink_guideremapsmoke == 0 } { sink_usesmoke == 0 sink_guideuseplane == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:sink", "import_token": "guidevismode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "sink_guidevisdensitymode", label: "Alpha Mapping", menu_items: ["none", "increasing", "decreasing", "hill", "valley", "step", "square"], menu_labels: ["No Mapping", "Increasing", "Decreasing", "Hill", "Valley", "Step", "Square"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sink_usesmoke == 1 sink_guideremapsmoke == 0 } { sink_usesmoke == 0 sink_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:sink", "import_token": "guidevisdensitymode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "sink_guiderangemode", label: "Specify Range by Min/Max", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sink_usesmoke == 1 sink_guideremapsmoke == 0 } { sink_usesmoke == 0 sink_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:sink", "import_token": "guiderangemode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "sink_guiderange", label: "Guide Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sink_usesmoke == 1 sink_guideremapsmoke == 0 } { sink_usesmoke == 0 sink_guideuseplane == 0 } { sink_guiderangemode == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:sink", "import_token": "guiderange"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "sink_guiderangecenter", label: "Guide Range Center", num_components: 1, default_value: [0.5], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sink_usesmoke == 1 sink_guideremapsmoke == 0 } { sink_usesmoke == 0 sink_guideuseplane == 0 } { sink_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:sink", "import_token": "guiderangecenter"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "sink_guiderangesize", label: "Guide Range Width", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sink_usesmoke == 1 sink_guideremapsmoke == 0 } { sink_usesmoke == 0 sink_guideuseplane == 0 } { sink_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:sink", "import_token": "guiderangesize"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "sink_guideiso", label: "Iso Offset", num_components: 1, default_value: [0], min: null, max: 5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sink_usesmoke == 1 } { sink_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:sink", "import_token": "guideiso"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "sink_guideinvert", label: "Invert Iso", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sink_usesmoke == 1 } { sink_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:sink", "import_token": "guideinvert"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder0_6", label: "Pump", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"import_enable": "1", "import_source": "op:pump"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "pump_usebox", label: "Bounding Box", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pump", "import_token": "usebox"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "pump_useboxhash", label: "Bounding Box Hash", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ pump_usebox == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pump", "import_token": "useboxhash"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "pump_usesmoke", label: "Use Smoke   ", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pump", "import_token": "usesmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "pump_guideremapsmoke", label: "Remap Smoke", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ pump_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pump", "import_token": "guideremapsmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "pump_guidesmokedensity", label: "Smoke Density", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ pump_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pump", "import_token": "guidesmokedensity"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "pump_guideuseplane", label: "Use Plane     ", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ pump_usesmoke == 1 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pump", "import_token": "guideuseplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "pump_guideplane", label: "Plane Orientation", menu_items: ["xy", "yz", "zx"], menu_labels: ["XY plane", "YZ plane", "ZX plane"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ pump_usesmoke == 1 } { pump_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pump", "import_token": "guideplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "pump_guideplaneval", label: "Plane Position", num_components: 1, default_value: [0], min: null, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ pump_usesmoke == 1 } { pump_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pump", "import_token": "guideplaneval"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "pump_guidevismode", label: "Visualization Mode", menu_items: ["none", "false", "pink", "mono", "blackbody", "bipartite"], menu_labels: ["No Mapping", "Infra-Red", "White to Red", "Grayscale", "Black Body", "Two-Tone"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ pump_usesmoke == 1 pump_guideremapsmoke == 0 } { pump_usesmoke == 0 pump_guideuseplane == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pump", "import_token": "guidevismode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "pump_guidevisdensitymode", label: "Alpha Mapping", menu_items: ["none", "increasing", "decreasing", "hill", "valley", "step", "square"], menu_labels: ["No Mapping", "Increasing", "Decreasing", "Hill", "Valley", "Step", "Square"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ pump_usesmoke == 1 pump_guideremapsmoke == 0 } { pump_usesmoke == 0 pump_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pump", "import_token": "guidevisdensitymode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "pump_guiderangemode", label: "Specify Range by Min/Max", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ pump_usesmoke == 1 pump_guideremapsmoke == 0 } { pump_usesmoke == 0 pump_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pump", "import_token": "guiderangemode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "pump_guiderange", label: "Guide Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ pump_usesmoke == 1 pump_guideremapsmoke == 0 } { pump_usesmoke == 0 pump_guideuseplane == 0 } { pump_guiderangemode == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pump", "import_token": "guiderange"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "pump_guiderangecenter", label: "Guide Range Center", num_components: 1, default_value: [0.5], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ pump_usesmoke == 1 pump_guideremapsmoke == 0 } { pump_usesmoke == 0 pump_guideuseplane == 0 } { pump_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pump", "import_token": "guiderangecenter"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "pump_guiderangesize", label: "Guide Range Width", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ pump_usesmoke == 1 pump_guideremapsmoke == 0 } { pump_usesmoke == 0 pump_guideuseplane == 0 } { pump_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pump", "import_token": "guiderangesize"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "pump_guideiso", label: "Iso Offset", num_components: 1, default_value: [0], min: null, max: 5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ pump_usesmoke == 1 } { pump_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pump", "import_token": "guideiso"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "pump_guideinvert", label: "Invert Iso", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ pump_usesmoke == 1 } { pump_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:pump", "import_token": "guideinvert"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "std_switcher_0_1", label: "Initial Data", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2 = new hou.StringParmTemplate({name: "surface_soppath", label: "SDF SOP Path", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.NodeReference, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setTags({"autoscope": "0000", "opfilter": "!!SOP!!", "oprelative": "."});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "velocity_soppath", label: "Velocity SOP Path", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.NodeReference, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "opfilter": "!!SOP!!", "oprelative": "."});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "usetransform", label: "Use Object Transform", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "closedends", label: "Closed Boundaries", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "closexneg", label: "-X", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ closedends == 0 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "closexpos", label: "+X", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ closedends == 0 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "closeyneg", label: "-Y", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ closedends == 0 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "closeypos", label: "+Y", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ closedends == 0 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "closezneg", label: "-Z", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ closedends == 0 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "closezpos", label: "+Z", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ closedends == 0 }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "border", label: "Border Type", menu_items: ["constant", "repeat", "streak"], menu_labels: ["Constant", "Repeat", "Streak"], default_value: 2, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "positionpath", label: "Position Data Path", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "std_switcher_0_2", label: "Physical", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2 = new hou.FloatParmTemplate({name: "bounce", label: "Bounce", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "friction", label: "Friction", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "dynamicfriction", label: "Dynamic Friction Scale", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "temperature", label: "Temperature", num_components: 1, default_value: [0], min: 0, max: 100, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "std_switcher_0_3", label: "Slice", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2 = new hou.IntParmTemplate({name: "slice", label: "Slice", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "slicediv", label: "Slice Divisions", num_components: 3, default_value: [1, 1, 1], min: 1, max: 5, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "sliceoverlapneg", label: "Overlap Voxels Negative", num_components: 3, default_value: [4, 4, 4], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "sliceoverlappos", label: "Overlap Voxels Positive", num_components: 3, default_value: [4, 4, 4], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			
            this.parmTemplateGroup = hou_parm_template_group;
            this.parmTemplateGroup.linkNode(this);
        }
    }
    hou.registerType('DOP/Other/fluidconfigureobject',_hnt_DOP_fluidconfigureobject)
    return _hnt_DOP_fluidconfigureobject
}
        