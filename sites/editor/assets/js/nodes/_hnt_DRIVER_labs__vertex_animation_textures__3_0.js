
export default function (hou) {
    class _hnt_DRIVER_labs__vertex_animation_textures__3_0 extends hou.extend(hou._HoudiniBase).with(hou._SubgraphMixin) {
        static is_root = false;
        static id = 'DRIVER/Labs/Game Engine/labs::vertex_animation_textures::3.0';
        static category = '/DRIVER/labs';
        static houdiniType = 'labs::vertex_animation_textures::3.0';
        static title = 'Labs Vertex Animation Textures';
        static icon = '/editor/assets/imgs/nodes/_hnt_DRIVER_labs__vertex_animation_textures__3_0.svg';
        constructor() {
            super();
            this.flags['houdini_type'] = this.__proto__.constructor.houdiniType;
            
            const inputs = [];
            const outputs = ['DRIVER'];

            for(var i=0;i<inputs.length;i++) this.addInput(''+i,inputs[i]);        
            for(var j=0;j<outputs.length;j++) this.addOutput(''+j,outputs[j]);
        }
        parmTemplatesInit() {
            let hou_parm_template_group = new hou.ParmTemplateGroup();
			this.parmTemplateGroup = hou_parm_template_group;
			let hou_parm_template = new hou.ButtonParmTemplate({name: "renderall", label: "Render All"});
			hou_parm_template.hideLabel(true);
			hou_parm_template.setJoinWithNext(true);
			hou_parm_template.setScriptCallback("kwargs[\"node\"].hm().cookAndRender(kwargs[\"node\"])");
			hou_parm_template.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template.setTags({"script_callback": "kwargs[\"node\"].hm().cookAndRender(kwargs[\"node\"])", "script_callback_language": "python"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ButtonParmTemplate({name: "execute", label: "Render"});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"takecontrol": "always"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ButtonParmTemplate({name: "renderdialog", label: "Controls..."});
			hou_parm_template.hide(true);
			hou_parm_template.hideLabel(true);
			hou_parm_template.setTags({"takecontrol": "always"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ButtonParmTemplate({name: "resetsims", label: "Reset Internal Simulations"});
			hou_parm_template.hide(true);
			hou_parm_template.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template.setTags({"button_icon": "", "script_callback_language": "python"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.IntParmTemplate({name: "mode", label: "Mode / Target Engine", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Soft-Body Deformation (Soft)", "Rigid-Body Dynamics (Rigid)", "Dynamic Remeshing (Fluid)", "Particle Sprites (Sprite)"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ mode == 2 fluidpass == 1 }");
			hou_parm_template.setJoinWithNext(true);
			hou_parm_template.setScriptCallback("kwargs[\"node\"].hm().switchMode(kwargs[\"node\"])");
			hou_parm_template.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template.setTags({"script_callback": "kwargs[\"node\"].hm().switchMode(kwargs[\"node\"])", "script_callback_language": "python"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "engine", label: "Target Engine", num_components: 1, default_value: ["unreal"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["unreal", "unity", "custom"], menu_labels: ["Unreal Engine", "Unity", "Custom"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ mode == 2 fluidpass == 1 }");
			hou_parm_template.hideLabel(true);
			hou_parm_template.setScriptCallback("kwargs[\"node\"].hm().setEnginePreset(kwargs[\"node\"])");
			hou_parm_template.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template.setTags({"script_callback": "kwargs[\"node\"].hm().setEnginePreset(kwargs[\"node\"])", "script_callback_language": "python"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.IntParmTemplate({name: "f", label: "Start/End", num_components: 2, default_value: [0, 0], default_expression: ["$RFSTART", "$RFEND"], default_expression_language: [hou.scriptLanguage.Hscript, hou.scriptLanguage.Hscript], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ mode == 2 fluidpass == 1 }");
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "soppath", label: "Input Geometry", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.NodeReference, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ mode == 2 fluidpass == 1 }");
			hou_parm_template.setTags({"opfilter": "!!SOP!!", "oprelative": "."});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "fd_settings_1_1", label: "Settings", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			let hou_parm_template2 = new hou.FolderParmTemplate({name: "fd_soft", label: "Soft-Body Deformation", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template2.setTabConditional(hou.parmCondType.HideWhen, "{ mode != 0 }");
			let hou_parm_template3 = new hou.ToggleParmTemplate({name: "packnorm_soft", label: "Export Compressed Normals in Position Alpha", default_value: false});
			hou_parm_template3.setScriptCallback("if kwargs[\"node\"].evalParm(\"packnorm_soft\") == 1: kwargs[\"node\"].setParms({\"override_pa\": 0})");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback": "if kwargs[\"node\"].evalParm(\"packnorm_soft\") == 1: kwargs[\"node\"].setParms({\"override_pa\": 0})", "script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "fd_rigid", label: "Rigid-Body Dynamics", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template2.setTabConditional(hou.parmCondType.HideWhen, "{ mode != 1 }");
			hou_parm_template3 = new hou.MenuParmTemplate({name: "pivotencoding", label: "Pivot Accuracy", menu_items: ["0", "1", "2"], menu_labels: ["High (Best Performance at Low Memory Footprint)", "Very High (Best Quality at Low Memory Footprint)", "Maximum (Must Turn On Use Full Precision UVs in Unreal)"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ engine == unity }");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "script_callback": "", "script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "slerpmode", label: "Rotation Interpolation", menu_items: ["0", "1"], menu_labels: ["Accurate Multi-RPF Slerp with Angular Velocity", "Basic Short-Path Slerp without Angular Velocity"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "rigidsmoothtrajectory", label: "Support Smoothly Interpolated Trajectories", default_value: false});
			hou_parm_template3.setScriptCallback("if kwargs[\"node\"].evalParm(\"rigidsmoothtrajectory\") == 1: kwargs[\"node\"].setParms({\"override_c\": 0})");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback": "if kwargs[\"node\"].evalParm(\"rigidsmoothtrajectory\") == 1: kwargs[\"node\"].setParms({\"override_c\": 0})", "script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "fd_rigid_edgecase", label: "Edge Case Handling", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ slerpmode == 1 }");
			hou_parm_template3.setTags({"group_type": "collapsible"});
			hou_parm_template3.setTabConditional(hou.parmCondType.HideWhen, "{ slerpmode == 1 }");
			let hou_parm_template4 = new hou.FloatParmTemplate({name: "maxrpf", label: "Max RPF Allowed", num_components: 1, default_value: [50], min: 1, max: 100, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "slerpedgecaseoffset", label: "Slerp Edge Case Offset", num_components: 1, default_value: [10], min: 0, max: 20, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "slerpedgecaseseed", label: "Slerp Edge Case Seed", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ slerpmode == 1 }");
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "fd_fluid", label: "Dynamic Remeshing", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template2.setTabConditional(hou.parmCondType.HideWhen, "{ mode != 2 }");
			hou_parm_template3 = new hou.MenuParmTemplate({name: "fluidpass", label: "Render Pass", menu_items: ["0", "1"], menu_labels: ["First Pass (Geometry, Lookup Table, Data/Material)", "Second Pass (Animation Textures)"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setScriptCallback("kwargs[\"node\"].setParms({\"enable_lookup\": 1 - kwargs[\"node\"].evalParm(\"fluidpass\"), \"croptextofirstframe\": max(0, kwargs[\"node\"].evalParm(\"croptextofirstframe\") - kwargs[\"node\"].evalParm(\"fluidpass\"))})");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback": "kwargs[\"node\"].setParms({\"enable_lookup\": 1 - kwargs[\"node\"].evalParm(\"fluidpass\"), \"croptextofirstframe\": max(0, kwargs[\"node\"].evalParm(\"croptextofirstframe\") - kwargs[\"node\"].evalParm(\"fluidpass\"))})", "script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "packnorm_fluid", label: "Export Compressed Normals in Position Alpha", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ fluiduvinalphas == 1 } { mode == 2 fluidpass == 1 }");
			hou_parm_template3.setScriptCallback("if kwargs[\"node\"].evalParm(\"packnorm_fluid\") == 1 : kwargs[\"node\"].setParms({\"fluiduvinalphas\": 0, \"override_pa\" : 0})");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback": "if kwargs[\"node\"].evalParm(\"packnorm_fluid\") == 1 : kwargs[\"node\"].setParms({\"fluiduvinalphas\": 0, \"override_pa\" : 0})", "script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "fluiduvinalphas", label: "Export Surface UVs in Position Alpha and Color Alpha", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ packnorm_fluid == 1 } { mode == 2 fluidpass == 1 }");
			hou_parm_template3.setScriptCallback("if kwargs[\"node\"].evalParm(\"fluiduvinalphas\") == 1 : kwargs[\"node\"].setParms({\"packnorm_fluid\": 0, \"override_pa\": 0, \"override_a\": 0})");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback": "if kwargs[\"node\"].evalParm(\"fluiduvinalphas\") == 1 : kwargs[\"node\"].setParms({\"packnorm_fluid\": 0, \"override_pa\": 0, \"override_a\": 0})", "script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "fluiduvinrg", label: "Export Surface UVs in Color Red and Green", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ mode == 2 fluidpass == 1 }");
			hou_parm_template3.setScriptCallback("if kwargs[\"node\"].evalParm(\"fluiduvinrg\") == 1 : kwargs[\"node\"].setParms({\"override_c\": 0})");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback": "if kwargs[\"node\"].evalParm(\"fluiduvinrg\") == 1 : kwargs[\"node\"].setParms({\"override_c\": 0})", "script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "fd_fluid_clean", label: "Cleanup", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setTags({"group_type": "collapsible"});
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "enablefuse", label: "Enable Fuse", default_value: false});
			hou_parm_template4.hideLabel(true);
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "fusegroup", label: "Fuse Point Group", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "r = []\nnode = hou.node(hou.parm(\"soppath\").evalAsString())\ninputs = node.inputs()\nif inputs and inputs[0]:\n    geo = inputs[0].geometry()\n    if geo:\n        c = \'point\'\n        if c == \'point\':\n            groups = geo.pointGroups()\n            \n        for g in groups:\n            r.extend([g.name(), g.name()])\n            \nreturn r", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ mode == 2 fluidpass == 1 } { enablefuse == 0 }");
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fusedist", label: "Fuse Distance", num_components: 1, default_value: [0.01], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ mode == 2 fluidpass == 1 } { enablefuse == 0 }");
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "fixoverlaps", label: "Fix Overlaps", default_value: false});
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "deleteoverlappairs", label: "Delete Overlap Pairs", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fixoverlaps == 0 }");
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "fd_sprite", label: "Particle Sprites", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template2.setTabConditional(hou.parmCondType.HideWhen, "{ mode != 3 }");
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "supportparticleinterpolate", label: "Support Particle Interframe Interpolation", default_value: true});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ customshapes == 1 multishapes == 1 }");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "cardshape", label: "Card Shape", menu_items: ["0", "1", "2"], menu_labels: ["Square Cards", "Triangle Cards (50% Triangle Count; Less Overshading)", "Hexagon Cards (200% Triangle Count; Less Transparency Overdraw)"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ customshapes == 1 }");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "cardorient_square", label: "Square Orientation", menu_items: ["0", "1"], menu_labels: ["Default", "Diamond"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ customshapes == 1 } { cardshape != 0 }");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "cardorient_tri", label: "Triangle Orientation", menu_items: ["0", "1"], menu_labels: ["Up-Pointing", "Down-Pointing"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ customshapes == 1 } { cardshape != 1 }");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "cardorient_hex", label: "Hexagon Orientation", menu_items: ["0", "1"], menu_labels: ["Left-Right-Pointing", "Up-Down-Pointing"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ customshapes == 1 } { cardshape != 2 }");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "fd_customcards", label: "Custom Cards", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setTags({"group_type": "simple"});
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "customshapes", label: "Enable Custom Shapes", default_value: false});
			hou_parm_template4.hideLabel(true);
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template4.setScriptCallback("kwargs[\"node\"].hm().toggleCustomShapes(kwargs[\"node\"])");
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback": "kwargs[\"node\"].hm().toggleCustomShapes(kwargs[\"node\"])", "script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "customshapepath", label: "Custom ZX Shapes", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.NodeReference, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ customshapes == 0 }");
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"opfilter": "!!SOP!!", "oprelative": ".", "script_callback": "", "script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.MenuParmTemplate({name: "shapeinputtype", label: "Shape Input Type", menu_items: ["0", "1"], menu_labels: ["Filled Polygons", "Closed Hollow Curves"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ customshapes == 0 }");
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "multishapes", label: "Multiple Shape Variants with Shape ID Attribute", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ customshapes == 0 }");
			hou_parm_template4.setScriptCallback("if kwargs[\"node\"].evalParm(\"customshapes\") * kwargs[\"node\"].evalParm(\"multishapes\") == 1: kwargs[\"node\"].setParms({\"supportparticleinterpolate\": 1})");
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback": "if kwargs[\"node\"].evalParm(\"customshapes\") * kwargs[\"node\"].evalParm(\"multishapes\") == 1: kwargs[\"node\"].setParms({\"supportparticleinterpolate\": 1})", "script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "shapeidattrib", label: "Shape ID Attribute", num_components: 1, default_value: ["shape_id"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ multishapes == 0 } { customshapes == 0 }");
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "shapewattrib", label: "Shape Weight Attribute", num_components: 1, default_value: ["shape_weight"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ multishapes == 0 } { customshapes == 0 }");
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "shapekeeprelscale", label: "Preserve Relative Scales of Different Shapes", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ multishapes == 0 } { customshapes == 0 }");
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "reversenorm", label: "Reverse Custom Card Normals", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ customshapes == 0 }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "fd_general", label: "All Modes", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "inputiscached", label: "Input Geometry Is Cached to Integer Frames", default_value: true});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ mode == 2 fluidpass == 1 }");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "lookupdataformat", label: "Lookup Table Format", menu_items: ["0", "1"], menu_labels: ["HDR (EXR/TIFF as RGBA 16/32 in Engine)", "Non-HDR (Any Format as RGBA 8 in Engine)"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ mode == 2 fluidpass == 1 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 2 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback": "", "script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "imageformat_lookup", label: "Lookup Image Format", menu_items: ["exr", "tiff", "png", "tga"], menu_labels: [".exr", ".tiff", ".png", ".tga"], default_value: 2, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ mode == 2 fluidpass == 1 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 2 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "normalizedata", label: "Texture Format", menu_items: ["0", "1"], menu_labels: ["HDR (EXR/TIFF as RGBA 16/32 in Engine)", "Non-HDR (Any Format as RGBA 8 in Engine)"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ mode == 2 fluidpass == 1 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setScriptCallback("if kwargs[\"node\"].parm(\"normalizedata\").evalAsInt() + kwargs[\"node\"].parm(\"allowhdrsplitpos\").evalAsInt() == 0 : kwargs[\"node\"].setParms({\"splitpos\": kwargs[\"node\"].parm(\"normalizedata\").evalAsInt(), \"enable_pos2\": kwargs[\"node\"].parm(\"normalizedata\").evalAsInt()})");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback": "if kwargs[\"node\"].parm(\"normalizedata\").evalAsInt() + kwargs[\"node\"].parm(\"allowhdrsplitpos\").evalAsInt() == 0 : kwargs[\"node\"].setParms({\"splitpos\": kwargs[\"node\"].parm(\"normalizedata\").evalAsInt(), \"enable_pos2\": kwargs[\"node\"].parm(\"normalizedata\").evalAsInt()})", "script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "imageformat", label: "Image Format", menu_items: ["exr", "tiff", "png", "tga"], menu_labels: [".exr", ".tiff", ".png", ".tga"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ mode == 2 fluidpass == 1 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "splitpos", label: "Split Positions into Two Textures", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ mode == 2 fluidpass == 1 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ normalizedata == 0 allowhdrsplitpos == 0 }");
			hou_parm_template3.setScriptCallback("kwargs[\"node\"].setParms({\"enable_pos2\": kwargs[\"node\"].parm(\"splitpos\").evalAsInt()})");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback": "kwargs[\"node\"].setParms({\"enable_pos2\": kwargs[\"node\"].parm(\"splitpos\").evalAsInt()})", "script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "addsparecol", label: "Export Spare Color Texture", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ mode == 2 fluidpass == 1 }");
			hou_parm_template3.setScriptCallback("kwargs[\"node\"].setParms({\"enable_col2\": kwargs[\"node\"].evalParm(\"addsparecol\")})");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback": "kwargs[\"node\"].setParms({\"enable_col2\": kwargs[\"node\"].evalParm(\"addsparecol\")})", "script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "exportvtxcol", label: "Export Static Mesh Vertex Colors", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ mode == 2 } { mode == 3 customshapes == 0 }");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "debugplane", label: "Include Hidden Debug Plane in Geometry", default_value: true});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ engine != unreal } { mode == 2 fluidpass == 1 }");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.SeparatorParmTemplate({name: "sepparm2"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "fd_replace", label: "Export Custom Attributes", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setTags({"group_type": "collapsible"});
			hou_parm_template3.setTabConditional(hou.parmCondType.DisableWhen, "{ mode == 2 fluidpass == 1 }");
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "override_pa", label: "Override P A", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ packnorm_soft == 1 mode == 0 } { packnorm_fluid == 1 mode == 2 } { fluiduvinalphas == 1 mode == 2 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ packnorm_soft == 1 mode == 0 } { packnorm_fluid == 1 mode == 2 } { fluiduvinalphas == 1 mode == 2 }");
			hou_parm_template4.hideLabel(true);
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "attrib_to_replace_pa", label: "In Position Alpha", num_components: 1, default_value: ["age"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "r = []\nnode = hou.node(hou.parm(\"soppath\").evalAsString())\ninputs = node.inputs()\nif inputs and inputs[0]:\n    geo = inputs[0].geometry()\n    if geo:\n        c = \'point\'\n        if c == \'detail\':\n            attrs = geo.globalAttribs()\n        elif c == \'primitive\':\n            attrs = geo.primAttribs()\n        elif c == \'point\':\n            attrs = geo.pointAttribs()\n        else: # vertex\n            attrs = geo.vertexAttribs()\n            \n        attribtype = \'float\' \n        for a in attrs:\n            if \'float\' in attribtype and a.dataType() == hou.attribData.Float and not a.isArrayType() and a.size() == 1:\n                r.extend([a.name(), a.name()])\n            if \'vec\' in attribtype and a.dataType() == hou.attribData.Float and not a.isArrayType() and a.size() == 3:\n                r.extend([a.name(), a.name()])\nreturn r", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ override_pa == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ packnorm_soft == 1 mode == 0 } { packnorm_fluid == 1 mode == 2 } { fluiduvinalphas == 1 mode == 2 }");
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "override_c", label: "Override C", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fluiduvinrg == 1 mode == 2 } { rigidsmoothtrajectory == 1 mode == 1 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fluiduvinrg == 1 mode == 2 } { rigidsmoothtrajectory == 1 mode == 1 }");
			hou_parm_template4.hideLabel(true);
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "attrib_to_replace_c", label: "In Color", num_components: 1, default_value: ["v"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "r = []\nnode = hou.node(hou.parm(\"soppath\").evalAsString())\ninputs = node.inputs()\nif inputs and inputs[0]:\n    geo = inputs[0].geometry()\n    if geo:\n        c = \'point\'\n        if c == \'detail\':\n            attrs = geo.globalAttribs()\n        elif c == \'primitive\':\n            attrs = geo.primAttribs()\n        elif c == \'point\':\n            attrs = geo.pointAttribs()\n        else: # vertex\n            attrs = geo.vertexAttribs()\n            \n        attribtype = \'vec\' \n        for a in attrs:\n            if \'float\' in attribtype and a.dataType() == hou.attribData.Float and not a.isArrayType() and a.size() == 1:\n                r.extend([a.name(), a.name()])\n            if \'vec\' in attribtype and a.dataType() == hou.attribData.Float and not a.isArrayType() and a.size() == 3:\n                r.extend([a.name(), a.name()])\nreturn r", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ override_c == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fluiduvinrg == 1 mode == 2 } { rigidsmoothtrajectory == 1 mode == 1 }");
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "override_a", label: "Override A", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fluiduvinalphas == 1 mode == 2 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fluiduvinalphas == 1 mode == 2 }");
			hou_parm_template4.hideLabel(true);
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "attrib_to_replace_a", label: "In Color Alpha", num_components: 1, default_value: ["opacity"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "r = []\nnode = hou.node(hou.parm(\"soppath\").evalAsString())\ninputs = node.inputs()\nif inputs and inputs[0]:\n    geo = inputs[0].geometry()\n    if geo:\n        c = \'point\'\n        if c == \'detail\':\n            attrs = geo.globalAttribs()\n        elif c == \'primitive\':\n            attrs = geo.primAttribs()\n        elif c == \'point\':\n            attrs = geo.pointAttribs()\n        else: # vertex\n            attrs = geo.vertexAttribs()\n            \n        attribtype = \'float\' \n        for a in attrs:\n            if \'float\' in attribtype and a.dataType() == hou.attribData.Float and not a.isArrayType() and a.size() == 1:\n                r.extend([a.name(), a.name()])\n            if \'vec\' in attribtype and a.dataType() == hou.attribData.Float and not a.isArrayType() and a.size() == 3:\n                r.extend([a.name(), a.name()])\nreturn r", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ override_a == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fluiduvinalphas == 1 mode == 2 }");
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.SeparatorParmTemplate({name: "sepparm4"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_finaltexsize", label: "lb_finaltexsize", column_labels: ["Last Render\'s Texture Size: `ch(\"finaltexsizex\")` × `ch(\"finaltexsizey\")`"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ enablecooking == 1 } { previewtexsize == 1 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "finaltexsizex", label: "Final Texture Size X", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.hide(true);
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "finaltexsizey", label: "Final Texture Size Y", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.hide(true);
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_finaltexsizelive", label: "lb_finaltexsizelive", column_labels: ["Expected Texture Size: `(1 - ch(\"padpowtwo\")) * ch(\"textures/size/size1\") + ch(\"padpowtwo\") * ch(\"textures/size/pow2sizex\")` × `(1 - ch(\"padpowtwo\")) * ch(\"textures/size/size2\") + ch(\"padpowtwo\") * ch(\"textures/size/pow2sizey\")`"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ enablecooking == 0 previewtexsize == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "targettexsize_lookup", label: "Lookup Table Width", num_components: 1, default_value: ["2048"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["32", "64", "128", "256", "512", "1024", "2048", "4096", "8192"], menu_labels: ["32", "64", "128", "256", "512", "1024", "2048", "4096", "8192"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ mode == 2 fluidpass == 1 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 2 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "targettexsize", label: "Target Texture Width", num_components: 1, default_value: ["1024"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["32", "64", "128", "256", "512", "1024", "2048", "4096", "8192"], menu_labels: ["32", "64", "128", "256", "512", "1024", "2048", "4096", "8192"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ mode == 2 fluidpass == 1 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "previewtexsize", label: "Preview Texture Size (Slow)", default_value: false});
			hou_parm_template3.setScriptCallback("if kwargs[\"node\"].evalParm(\"previewtexsize\") == 1 : kwargs[\"node\"].parm(\"resetsims\").pressButton()");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback": "if kwargs[\"node\"].evalParm(\"previewtexsize\") == 1 : kwargs[\"node\"].parm(\"resetsims\").pressButton()", "script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "padpowtwo", label: "Pad Texture Size to Powers of Two", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ mode == 2 fluidpass == 1 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.SeparatorParmTemplate({name: "sepparm"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_maxptcount", label: "lb_maxptcount", column_labels: ["Input Geometry Limit: `ch(\"targettexsize\") * min(floor(8192 / (ch(\"f2\") - ch(\"f1\") + 1)), 1980)` Points per Frame"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode == 2 } { mode == 1 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_maxpptcount", label: "lb_maxpptcount", column_labels: ["Input Geometry Limit: `ch(\"targettexsize\") * min(floor(8192 / (ch(\"f2\") - ch(\"f1\") + 1)), 1980)` Packed Points per Frame"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 1 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_maxptcounthelp", label: "lb_maxptcounthelp", column_labels: ["To increase this limit, increase Target Texture Width or shorten export frame range."]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode == 2 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_maxtricount", label: "lb_maxtricount", column_labels: ["Input Geometry Limit: `floor(ch(\"targettexsize_lookup\") * min(floor(8192 / (ch(\"f2\") - ch(\"f1\") + 1)), 1980) / 3)` Triangles per Frame"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 2 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_maxtricounthelp", label: "lb_maxtricounthelp", column_labels: ["To increase this limit, increase Lookup Table Width or shorten export frame range."]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 2 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.SeparatorParmTemplate({name: "sepparm5"});
			hou_parm_template3.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "fd_settings_1_1_1", label: "Input", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTabConditional(hou.parmCondType.DisableWhen, "{ mode == 2 fluidpass == 1 }");
			hou_parm_template2 = new hou.FolderParmTemplate({name: "fd_inputrequirements", label: "Current Mode and Engine Input Requirements", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_expected_soft1", label: "lb_expected_soft", column_labels: ["Constant topology with consistent point count"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_expected_soft2", label: "lb_expected_soft", column_labels: ["Turn on Facet SOP's Unique Points for selected group to preserve hard edge normals"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_expected_soft3", label: "lb_expected_soft", column_labels: ["Required:    P"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_expected_soft4", label: "lb_expected_soft", column_labels: ["Optional:    Cd,  Alpha,  <uv>,  <N>,  <tangentu>"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_expected_soft5", label: "lb_expected_soft", column_labels: ["To export Spare Color:    Cd2,  Alpha2"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_expected_soft6", label: "lb_expected_soft", column_labels: ["To export Static Mesh Vertex Color:    <Cd_v>,  <Alpha_v>"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_expected_soft7", label: "lb_expected_soft", column_labels: ["To export LODs:    lod0_ptnum,  <uv>,  <N>"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_expected_soft8", label: "lb_expected_soft", column_labels: ["Do not include:    ^<uv2>"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_expected_rigid1", label: "lb_expected_rigid", column_labels: ["Packed geometry with consistent piece count"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 1 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_expected_rigid2", label: "lb_expected_rigid", column_labels: ["Required:    [P],  [pivot],  [orient]"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 1 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_expected_rigid3", label: "lb_expected_rigid", column_labels: ["Optional:    [pscale],  [Cd],  [Alpha],  <uv>,  <N>,  <tangentu>"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 1 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_expected_rigid4", label: "lb_expected_rigid", column_labels: ["To enable Multi-RPF Slerp:    [w]"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 1 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_expected_rigid5", label: "lb_expected_rigid", column_labels: ["To export Spare Color:    [Cd2],  [Alpha2]"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 1 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_expected_rigid6", label: "lb_expected_rigid", column_labels: ["To export Static Mesh Vertex Color:    <Cd_v>,  <Alpha_v>"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 1 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_expected_rigid7", label: "lb_expected_rigid", column_labels: ["To export LODs:    [lod0_ptnum],  <uv>,  <N>"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 1 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_expected_rigid8", label: "lb_expected_rigid", column_labels: ["Do not include:    ^<uv2>,  ^<uv3>,  ^<uv4>"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 1 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_expected_rigid9", label: "lb_expected_rigid", column_labels: ["Do not include if supporting Real-Time Instancing:    ^<uv5>,  ^<uv6>"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 1 } { engine != unreal }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_expected_fluid1", label: "lb_expected_fluid", column_labels: ["Required:    P"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 2 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_expected_fluid2", label: "lb_expected_fluid", column_labels: ["Optional:    Cd,  Alpha,  <uv>,  <N>,  <tangentu>"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 2 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_expected_fluid3", label: "lb_expected_fluid", column_labels: ["To export Spare Color:    Cd2,  Alpha2"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 2 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_expected_fluid4", label: "lb_expected_fluid", column_labels: ["Do not include if exporting UVs in Position and Color Alphas:    ^Alpha"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 2 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_expected_fluid5", label: "lb_expected_fluid", column_labels: ["Do not include if exporting UVs in Color RG:    ^Cd.r,  ^Cd.g"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 2 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_expected_sprite1", label: "lb_expected_sprite", column_labels: ["Required:    P"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 3 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_expected_sprite2", label: "lb_expected_sprite", column_labels: ["Optional:    pscale,  Cd,  Alpha"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 3 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_expected_sprite3", label: "lb_expected_sprite", column_labels: ["To support Particle Interframe Interpolation or Multiple Shape Variants:    id"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 3 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_expected_sprite7", label: "lb_expected_sprite", column_labels: ["To export Spare Color:    Cd2,  Alpha2"]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 3 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "fd_expected_customcards", label: "On Custom Cards (If Enabled)", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode != 3 }");
			hou_parm_template3.setTags({"group_type": "simple"});
			hou_parm_template3.setTabConditional(hou.parmCondType.HideWhen, "{ mode != 3 }");
			hou_parm_template4 = new hou.LabelParmTemplate({name: "lb_expected_sprite4", label: "lb_expected_sprite", column_labels: ["Required:    P"]});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ mode != 3 }");
			hou_parm_template4.hideLabel(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.LabelParmTemplate({name: "lb_expected_sprite5", label: "lb_expected_sprite", column_labels: ["Optional:    <uv>"]});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ mode != 3 }");
			hou_parm_template4.hideLabel(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.LabelParmTemplate({name: "lb_expected_sprite6", label: "lb_expected_sprite", column_labels: ["To export Static Mesh Vertex Color:    <Cd_v>,  <Alpha_v>"]});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ mode != 3 }");
			hou_parm_template4.hideLabel(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "fd_inputhelp", label: "Legend", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setTags({"group_type": "simple"});
			hou_parm_template4 = new hou.LabelParmTemplate({name: "lb_inputlegend", label: "lb_inputlegend", column_labels: ["Point attribute    <Vertex attribute>    [Packed point attribute]    ^Do not include"]});
			hou_parm_template4.hideLabel(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "fd_attribautogen", label: "Attribute Auto Generation", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ mode == 3 }");
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template2.setTabConditional(hou.parmCondType.HideWhen, "{ mode == 3 }");
			hou_parm_template3 = new hou.MenuParmTemplate({name: "autouvmode", label: "UV Generation", menu_items: ["0", "1"], menu_labels: ["Compute Missing UVs using UV Unwrap", "Compute Missing UVs using UV Autoseam and Flatten"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode == 2 fluiduvinalphas == 0 fluiduvinrg == 0 } { mode < 2 exportlods == 1 }");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "autonormalmode", label: "Normal Generation", menu_items: ["0", "1", "2", "3"], menu_labels: ["Compute Missing Normals using Vertex Angle", "Compute Missing Normals using Face Area", "Recompute Normals using Vertex Angle", "Recompute Normals using Face Area"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode < 2 exportlods == 1 }");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "autotangentmode", label: "Tangent Generation", menu_items: ["0", "1"], menu_labels: ["Compute Missing Tangents using MikkT Method", "Recompute Tangents using MikkT Method"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "autobinormalmode", label: "Binormal Generation", menu_items: ["0", "1"], menu_labels: ["Recompute Binormals using Right-Hand Rule", "Recompute Binormals using Left-Hand Rule"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ engine != custom }");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "fd_pscale", label: "Pscale Attribute", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ mode == 0 } { mode == 2 }");
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template2.setTabConditional(hou.parmCondType.HideWhen, "{ mode == 0 } { mode == 2 }");
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_inputhelp", label: "lb_inputhelp", column_labels: ["Position Alpha automatically exports \"pscale\" when it does not export a custom attribute."]});
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_inputhelp2", label: "lb_inputhelp", column_labels: ["If Position Alpha does export a custom attribute, the shader can assume \"pscale\" is 1."]});
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.LabelParmTemplate({name: "lb_forcecheckinputerrors", label: "lb_forcecheckinputerrors", column_labels: ["`ch(\"textures/size/size1\")` × `ch(\"textures/size/size2\")`"]});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ soppath == \\\"\\\" }");
			hou_parm_template2.hide(true);
			hou_parm_template2.hideLabel(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.LabelParmTemplate({name: "lb_forcecheckinputerrors2", label: "lb_forcecheckinputerrors", column_labels: ["`ch(objects/MESH/sprite/force_cook_errors/empty_parm)`"]});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ mode != 3 } { customshapepath == \\\"\\\" }");
			hou_parm_template2.hide(true);
			hou_parm_template2.hideLabel(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "fd_settings_1_1_2", label: "Export", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template.setTabConditional(hou.parmCondType.DisableWhen, "{ mode == 2 fluidpass == 1 }");
			hou_parm_template2 = new hou.StringParmTemplate({name: "exportpath", label: "Export Path", num_components: 1, default_value: ["$HIP/export/${HIPNAME}"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Directory, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "assetname", label: "Asset Name", num_components: 1, default_value: ["${OS}"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "geosuffixmode", label: "Geometry Name Suffix", menu_items: ["0", "1", "2", "3"], menu_labels: ["None", "Frame Count", "Frame Count and FPS", "FPS"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setScriptCallback("kwargs[\"node\"].hm().geoFileNameAppend(kwargs[\"node\"])");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback": "kwargs[\"node\"].hm().geoFileNameAppend(kwargs[\"node\"])", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "geosuffix", label: "Geometry Suffix String", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.hide(true);
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "include", label: "Include", num_components: 1, default_value: ["gprc"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["gprc", "gpr", "gpc", "gp", "g", "custom"], menu_labels: ["Geometry, Position(s), Rotation, Color(s)", "Geometry, Position(s), Rotation", "Geometry, Position(s), Color(s)", "Geometry, Position(s)", "Geometry", "Decide Individually"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ mode == 3 }");
			hou_parm_template2.setScriptCallback("kwargs[\"node\"].parm(\"resetinclude\").pressButton()");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback": "kwargs[\"node\"].parm(\"resetinclude\").pressButton()", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "include_sprite", label: "Include", num_components: 1, default_value: ["gpc"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["gpc", "gp", "g", "custom"], menu_labels: ["Geometry, Position(s), Color(s)", "Geometry, Position(s)", "Geometry", "Decide Individually"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ mode != 3 }");
			hou_parm_template2.setScriptCallback("kwargs[\"node\"].parm(\"resetinclude\").pressButton()");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback": "kwargs[\"node\"].parm(\"resetinclude\").pressButton()", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ButtonParmTemplate({name: "resetinclude", label: "Reset Include"});
			hou_parm_template2.hide(true);
			hou_parm_template2.setScriptCallback("kwargs[\"node\"].hm().resetInclude(kwargs[\"node\"])");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback": "kwargs[\"node\"].hm().resetInclude(kwargs[\"node\"])", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.SeparatorParmTemplate({name: "sepparm3"});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ include != 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "enable_geo", label: "Enable Geometry", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ include != custom mode != 3 } { include_sprite != custom mode == 3 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "path_geo", label: "Geometry", num_components: 1, default_value: ["`chs(\"exportpath\")`/`chs(\"subdir_geo\")``chs(\"assetname\")`_mesh`chs(\"geosuffix\")`.fbx"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Geometry, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ enable_geo == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ include != custom mode != 3 } { include_sprite != custom mode == 3 }");
			hou_parm_template2.setTags({"filechooser_pattern": "*.fbx"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "enable_pos", label: "Enable Position", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ include != custom mode != 3 } { include_sprite != custom mode == 3 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "path_pos", label: "Position / Position 1", num_components: 1, default_value: ["`chs(\"exportpath\")`/`chs(\"subdir_tex\")``chs(\"assetname\")`_pos`chs(\"cropsuffix\")`.`chs(\"imageformat\")`"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ enable_pos == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ include != custom mode != 3 } { include_sprite != custom mode == 3 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "enable_pos2", label: "Enable Position 2", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ splitpos == 0 } { splitpos == 1 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ enable_pos == 0 } { splitpos == 0 } { normalizedata == 0 allowhdrsplitpos == 0 } { include != custom mode != 3 } { include_sprite != custom mode == 3 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "path_pos2", label: "Position 2", num_components: 1, default_value: ["`chs(\"exportpath\")`/`chs(\"subdir_tex\")``chs(\"assetname\")`_pos2`chs(\"cropsuffix\")`.`chs(\"imageformat\")`"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ enable_pos2 == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ enable_pos == 0 } { splitpos == 0 } { normalizedata == 0 allowhdrsplitpos == 0 } { include != custom mode != 3 } { include_sprite != custom mode == 3 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "enable_rot", label: "Enable Rotation", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ mode == 3 } { include != custom }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "path_rot", label: "Rotation", num_components: 1, default_value: ["`chs(\"exportpath\")`/`chs(\"subdir_tex\")``chs(\"assetname\")`_rot`chs(\"cropsuffix\")`.`chs(\"imageformat\")`"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ enable_rot == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ mode == 3 } { include != custom }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "enable_col", label: "Enable Color", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ include != custom mode != 3 } { include_sprite != custom mode == 3 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "path_col", label: "Color", num_components: 1, default_value: ["`chs(\"exportpath\")`/`chs(\"subdir_tex\")``chs(\"assetname\")`_col`chs(\"cropsuffix\")`.`chs(\"imageformat\")`"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ enable_col == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ include != custom mode != 3 } { include_sprite != custom mode == 3 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "enable_col2", label: "Enable Spare Color", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ addsparecol == 0 } { addsparecol == 1 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ enable_col == 0 } { addsparecol == 0 } { include != custom mode != 3 } { include_sprite != custom mode == 3 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "path_col2", label: "Spare Color", num_components: 1, default_value: ["`chs(\"exportpath\")`/`chs(\"subdir_tex\")``chs(\"assetname\")`_col2`chs(\"cropsuffix\")`.`chs(\"imageformat\")`"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ enable_col2 == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ enable_col == 0 } { addsparecol == 0 } { include != custom mode != 3 } { include_sprite != custom mode == 3 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "enable_lookup", label: "Enable Lookup", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ fluidpass == 0 } { fluidpass == 1 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ mode != 2 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "path_lookup", label: "Lookup Table", num_components: 1, default_value: ["`chs(\"exportpath\")`/`chs(\"subdir_tex\")``chs(\"assetname\")`_lookup`chs(\"cropsuffix\")`.`chs(\"imageformat_lookup\")`"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ enable_lookup == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ mode != 2 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "enable_unitymat", label: "Enable Unity Material", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ engine != unity }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "path_unitymat", label: "Unity Material", num_components: 1, default_value: ["`chs(\"exportpath\")`/`chs(\"subdir_unity\")``chs(\"assetname\")`_mat.mat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ enable_unitymat == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ engine != unity }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "enable_datafile", label: "Enable Data File", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ exportlegacydatafile == 0 supportinstancing == 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "path_datafile", label: "Real-Time Data", num_components: 1, default_value: ["`chs(\"exportpath\")`/`chs(\"subdir_data\")``chs(\"assetname\")`_data.json"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ enable_datafile == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ exportlegacydatafile == 0 supportinstancing == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "cropsuffix", label: "Crop Suffix", num_components: 1, default_value: ["`ifs(ch(\"croptextofirstframe\"), \'_1f\', \'\')`"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.hide(true);
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback": "", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "subdir_geo", label: "Geometry Subdirectory", num_components: 1, default_value: ["geo/"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.hide(true);
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "subdir_tex", label: "Texture Subdirectory", num_components: 1, default_value: ["tex/"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.hide(true);
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "subdir_data", label: "Data Subdirectory", num_components: 1, default_value: ["data/"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.hide(true);
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "subdir_unity", label: "Unity Subdirectory", num_components: 1, default_value: ["unity/"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.hide(true);
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "addsubdir", label: "Group Files into Subdirectories", default_value: true});
			hou_parm_template2.setScriptCallback("kwargs[\"node\"].hm().setSubDirectories(kwargs[\"node\"])");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback": "kwargs[\"node\"].hm().setSubDirectories(kwargs[\"node\"])", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "fd_settings_1_1_3", label: "Advanced", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTabConditional(hou.parmCondType.DisableWhen, "{ mode == 2 fluidpass == 1 }");
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "enablecooking", label: "Live Update (Slow)", default_value: false});
			hou_parm_template2.setScriptCallback("kwargs[\"node\"].hm().enableCooking(kwargs[\"node\"])");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback": "kwargs[\"node\"].hm().enableCooking(kwargs[\"node\"])", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "persistliveupdate", label: "Do Not Reset Live Update After Render", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ enablecooking == 0 }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "allowhdrsplitpos", label: "Allow Splitting Positions into Two HDR Textures", default_value: false});
			hou_parm_template2.setScriptCallback("if kwargs[\"node\"].parm(\"normalizedata\").evalAsInt() + kwargs[\"node\"].parm(\"allowhdrsplitpos\").evalAsInt() == 0 : kwargs[\"node\"].setParms({\"splitpos\": 0, \"enable_pos2\": 0})");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback": "if kwargs[\"node\"].parm(\"normalizedata\").evalAsInt() + kwargs[\"node\"].parm(\"allowhdrsplitpos\").evalAsInt() == 0 : kwargs[\"node\"].setParms({\"splitpos\": 0, \"enable_pos2\": 0})", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "exportlegacydatafile", label: "Allow Exporting Real-Time Data JSON File (Legacy)", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ supportinstancing == 1 engine == unreal }");
			hou_parm_template2.setScriptCallback("kwargs[\"node\"].setParms({\"enable_datafile\": kwargs[\"node\"].evalParm(\"exportlegacydatafile\")})");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback": "kwargs[\"node\"].setParms({\"enable_datafile\": kwargs[\"node\"].evalParm(\"exportlegacydatafile\")})", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "supportinstancing", label: "Support Real-Time Instancing", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ engine != unreal }");
			hou_parm_template2.setScriptCallback("if kwargs[\"node\"].evalParm(\"supportinstancing\") == 1: kwargs[\"node\"].setParms({\"exportlegacydatafile\": 1, \"enable_datafile\": 1})");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback": "if kwargs[\"node\"].evalParm(\"supportinstancing\") == 1: kwargs[\"node\"].setParms({\"exportlegacydatafile\": 1, \"enable_datafile\": 1})", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "croptextofirstframe", label: "Crop Textures to First Frame Only", default_value: false});
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback": "", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "rawfloatsinpa", label: "Preserve Raw Float Data in Position Alpha", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ croptextofirstframe == 0 }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "fd_lods", label: "LODs", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "collapsible"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "exportlods", label: "Export LODs", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode > 1 }");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "lodcount", label: "Number of LODs", num_components: 1, default_value: [2], min: 2, max: 10, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ exportlods == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode > 1 }");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.LabelParmTemplate({name: "lb_lods", label: "lb_lods", column_labels: ["LODs cannot share the same set of textures in this mode. Export each LOD separately."]});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ mode < 2 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "fd_paths_1_1_3", label: "Scripts", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "collapsible"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "initsim", label: "Initialize Simulation OPs", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "tprerender", label: "Enable Pre-Render Script", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "prerender", label: "Pre-Render Script", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Any, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l geometry prerender", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ tprerender == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "filechooser_mode": "read"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "lprerender", label: "Pre-Render Script Language", num_components: 1, default_value: ["python"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["hscript", "python"], menu_labels: ["Hscript", "Python"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ tprerender == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "tpostrender", label: "Enable Post-Render Script", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "postrender", label: "Post-Render Script", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Any, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l geometry postrender", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ tpostrender == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "filechooser_mode": "read"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "lpostrender", label: "Post-Render Script Language", num_components: 1, default_value: ["python"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["hscript", "python"], menu_labels: ["Hscript", "Python"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ tpostrender == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "pdg_logoutput", label: "PDG Log Output", default_value: false});
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "fd_devoptions", label: "Developer Options", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "collapsible"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "convertcolorspace", label: "Convert to Image Format Colorspace", default_value: false});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "depth", label: "Raster Depth", menu_items: ["int8", "int16", "int32", "float16", "float32"], menu_labels: ["8 Bit Integer", "16 Bit Integer", "32 Bit Integer", "16 Bit Floating Point", "32 Bit Floating Point"], default_value: 4, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "usebwpoints", label: "Use Custom Black/White Points", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ depth == float16 } { depth == float32 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "bwpoints", label: "Black/White Points", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ usebwpoints == 0 } { depth == float16 } { depth == float32 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "bcChannelSplit", label: "BC 4-Channel Split", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3", "4"], menu_labels: ["BC7 x 1 XYZW", "BC6 x 2 - XYZ  W__", "BC6 x 1 & BC4 x 1 - XYZ  W", "BC5 x 2 - XY  ZW", "BC4 x 4 - X  Y  Z  W"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "take", label: "Render With Take", num_components: 1, default_value: ["_current_"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l render_mesh_fbx take", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.Normal});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "fd_settings_1_1_4", label: "Target Engine", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTabConditional(hou.parmCondType.DisableWhen, "{ mode == 2 fluidpass == 1 }");
			hou_parm_template2 = new hou.MenuParmTemplate({name: "coordsys", label: "Coordinate System", menu_items: ["0", "1", "2", "4"], menu_labels: ["Y-X-Z Clockwise (Right-Handed Y-Up)", "Z-Y-X Clockwise (Right-Handed Z-Up)", "Y-Z-X Clockwise (Left-Handed Y-Up)", "Z-X-Y Clockwise (Left-Handed Z-Up)"], default_value: 3, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ engine != custom }");
			hou_parm_template2.setScriptCallback("kwargs[\"node\"].hm().setCoordSystem(kwargs[\"node\"])");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback": "kwargs[\"node\"].hm().setCoordSystem(kwargs[\"node\"])", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "scale", label: "1 Metre in Engine Units", num_components: 1, default_value: [100], min: 0, max: 100, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ engine != custom }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "coord_pos", label: "Position Coord", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3", "4", "5"], menu_labels: ["X Y Z", "X Z Y", "Y X Z", "Y Z X", "Z X Y", "Z Y X"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.hide(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "parmvop": "1", "shaderparmcontexts": "cop2"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "coord_flip", label: "Position Invert", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3", "4", "5", "6", "7"], menu_labels: ["+X +Y +Z", "-X +Y +Z", "+X -Y +Z", "+X +Y -Z", "-X -Y +Z", "-X +Y -Z", "-X -Y -Z", "+X -Y -Z"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.hide(true);
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "parmvop": "1", "shaderparmcontexts": "cop2"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "coord_rot", label: "Rotation Coord", num_components: 1, default_value: [8], min: 0, max: 1000, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14"], menu_labels: ["+X +Y +Z +W", "-X +Y +Z +W", "+X -Y +Z +W", "+X +Y -Z +W", "+X +Y +Z -W", "-X -Y +Z +W", "-X +Y -Z +W", "-X +Y +Z -W", "-X -Y -Z +W", "-X -Y +Z -W", "-X -Y -Z -W", "+X -Y -Z +W", "+X -Y +Z -W", "+X -Y -Z -W", "+X +Y -Z -W"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.hide(true);
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "parmvop": "1", "shaderparmcontexts": "cop2"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "fd_settings_1_1_5", label: "Real-Time Shaders", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2 = new hou.MenuParmTemplate({name: "shaderengine", label: "Find Shaders For", menu_items: ["unreal", "unity"], menu_labels: ["Unreal Engine", "Unity"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.SeparatorParmTemplate({name: "sepparm7"});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ engine != unreal }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ButtonParmTemplate({name: "openunrealshaderpath", label: "Unreal Engine Content Plugin and Guides"});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ shaderengine != unreal }");
			hou_parm_template2.setScriptCallback("node = kwargs[\"node\"]; from labsopui import labs_explore; labs_explore.path(kwargs[\"node\"], \"%s/unreal/4.26\" % hou.getenv(\"SIDEFXLABS\"))");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback": "node = kwargs[\"node\"]; from labsopui import labs_explore; labs_explore.path(kwargs[\"node\"], \"%s/unreal/4.26\" % hou.getenv(\"SIDEFXLABS\"))", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ButtonParmTemplate({name: "openunityshaderpath", label: "Unity Package and Guides"});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ shaderengine != unity }");
			hou_parm_template2.setScriptCallback("node = kwargs[\"node\"]; from labsopui import labs_explore; labs_explore.path(kwargs[\"node\"], \"%s/unity/shaders/URP_VAT3/Editor\" % hou.getenv(\"SIDEFXLABS\"))");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback": "node = kwargs[\"node\"]; from labsopui import labs_explore; labs_explore.path(kwargs[\"node\"], \"%s/unity/shaders/URP_VAT3/Editor\" % hou.getenv(\"SIDEFXLABS\"))", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "mat_unity_soft", label: "Unity Soft Material", num_components: 1, default_value: ["%YAML 1.1\n%TAG !u! tag:unity3d.com,2011:\n--- !u!21 &2100000\nMaterial:\n  serializedVersion: 8\n  m_ObjectHideFlags: 0\n  m_CorrespondingSourceObject: {fileID: 0}\n  m_PrefabInstance: {fileID: 0}\n  m_PrefabAsset: {fileID: 0}\n  m_Name: ASSET_NAME\n  m_Shader: {fileID: -6465566751694194690, guid: 987a09a96b5f17d46a88a7c429d130d2, type: 3}\n  m_ValidKeywords:\n  - _B_LOAD_COL_TEX\n  m_InvalidKeywords: []\n  m_LightmapFlags: 4\n  m_EnableInstancingVariants: 0\n  m_DoubleSidedGI: 0\n  m_CustomRenderQueue: -1\n  stringTagMap: {}\n  disabledShaderPasses: []\n  m_SavedProperties:\n    serializedVersion: 3\n    m_TexEnvs:\n    - _BumpMap:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _DetailAlbedoMap:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _DetailMask:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _DetailNormalMap:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _EmissionMap:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _MainTex:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _MetallicGlossMap:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _OcclusionMap:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _ParallaxMap:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _SampleTexture2D_72ab43ee7e5b4ff3acd5a9fb57f150dc_Texture_1:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _colTexture:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _posTexture:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _posTexture2:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _rotTexture:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _spareColTexture:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - unity_Lightmaps:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - unity_LightmapsInd:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - unity_ShadowMasks:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    m_Ints: []\n    m_Floats:\n    - _B_LOAD_COL_TEX: 1\n    - _B_LOAD_NORM_TEX: 0\n    - _B_LOAD_POS_TWO_TEX: 0\n    - _B_UNLOAD_ROT_TEX: 0\n    - _B_autoPlayback: 1\n    - _B_interpolate: 0\n    - _B_interpolateCol: 0\n    - _B_interpolateSpareCol: 0\n    - _B_surfaceNormals: 1\n    - _B_twoSidedNorms: 0\n    - _BumpScale: 1\n    - _Cutoff: 0.5\n    - _DetailNormalMapScale: 1\n    - _DstBlend: 0\n    - _GlossMapScale: 1\n    - _Glossiness: 0.5\n    - _GlossyReflections: 1\n    - _Metallic: 0\n    - _Mode: 0\n    - _OcclusionStrength: 1\n    - _Parallax: 0.02\n    - _QueueControl: -1\n    - _QueueOffset: 0\n    - _SmoothnessTextureChannel: 0\n    - _SpecularHighlights: 1\n    - _SrcBlend: 1\n    - _UVSec: 0\n    - _ZWrite: 1\n    - _boundMaxX: 0\n    - _boundMaxY: 0\n    - _boundMaxZ: 0\n    - _boundMinX: 0\n    - _boundMinY: 0\n    - _boundMinZ: 0\n    - _displayFrame: 1\n    - _frameCount: 0\n    - _gameTimeAtFirstFrame: 0\n    - _houdiniFPS: 60\n    - _playbackSpeed: 1\n    m_Colors:\n    - _Color: {r: 1, g: 1, b: 1, a: 1}\n    - _EmissionColor: {r: 0, g: 0, b: 0, a: 1}\n  m_BuildTextureStacks: []\n"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.hide(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "mat_unity_rigid", label: "Unity Rigid Material", num_components: 1, default_value: ["%YAML 1.1\n%TAG !u! tag:unity3d.com,2011:\n--- !u!21 &2100000\nMaterial:\n  serializedVersion: 8\n  m_ObjectHideFlags: 0\n  m_CorrespondingSourceObject: {fileID: 0}\n  m_PrefabInstance: {fileID: 0}\n  m_PrefabAsset: {fileID: 0}\n  m_Name: ASSET_NAME\n  m_Shader: {fileID: -6465566751694194690, guid: 085ef3ec3a5a70d4790c0957d30c9f63, type: 3}\n  m_ValidKeywords:\n  - _B_LOAD_COL_TEX\n  m_InvalidKeywords: []\n  m_LightmapFlags: 4\n  m_EnableInstancingVariants: 0\n  m_DoubleSidedGI: 0\n  m_CustomRenderQueue: -1\n  stringTagMap: {}\n  disabledShaderPasses: []\n  m_SavedProperties:\n    serializedVersion: 3\n    m_TexEnvs:\n    - _BumpMap:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _DetailAlbedoMap:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _DetailMask:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _DetailNormalMap:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _EmissionMap:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _MainTex:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _MetallicGlossMap:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _OcclusionMap:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _ParallaxMap:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _SampleTexture2D_72ab43ee7e5b4ff3acd5a9fb57f150dc_Texture_1:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _colTexture:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _posTexture:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _posTexture2:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _rotTexture:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _spareColTexture:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - unity_Lightmaps:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - unity_LightmapsInd:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - unity_ShadowMasks:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    m_Ints: []\n    m_Floats:\n    - _B_LOAD_COL_TEX: 1\n    - _B_LOAD_NORM_TEX: 0\n    - _B_LOAD_POS_TWO_TEX: 0\n    - _B_SMOOTH_TRAJECTORIES: 0\n    - _B_animateFirstFrame: 0\n    - _B_autoPlayback: 1\n    - _B_interpolate: 0\n    - _B_interpolateCol: 0\n    - _B_interpolateSpareCol: 0\n    - _B_pscaleAreInPosA: 1\n    - _B_stretchByVel: 0\n    - _B_surfaceNormals: 1\n    - _B_twoSidedNorms: 0\n    - _BumpScale: 1\n    - _Cutoff: 0.5\n    - _DetailNormalMapScale: 1\n    - _DstBlend: 0\n    - _GlossMapScale: 1\n    - _Glossiness: 0.5\n    - _GlossyReflections: 1\n    - _Metallic: 0\n    - _Mode: 0\n    - _OcclusionStrength: 1\n    - _Parallax: 0.02\n    - _QueueControl: -1\n    - _QueueOffset: 0\n    - _SmoothnessTextureChannel: 0\n    - _SpecularHighlights: 1\n    - _SrcBlend: 1\n    - _UVSec: 0\n    - _ZWrite: 1\n    - _boundMaxX: 0\n    - _boundMaxY: 0\n    - _boundMaxZ: 0\n    - _boundMinX: 0\n    - _boundMinY: 0\n    - _boundMinZ: 0\n    - _displayFrame: 1\n    - _frameCount: 0\n    - _gameTimeAtFirstFrame: 0\n    - _globalPscaleMul: 1\n    - _houdiniFPS: 60\n    - _playbackSpeed: 1\n    - _stretchByVelAmount: 0\n    m_Colors:\n    - _Color: {r: 1, g: 1, b: 1, a: 1}\n    - _EmissionColor: {r: 0, g: 0, b: 0, a: 1}\n  m_BuildTextureStacks: []\n"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.hide(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "mat_unity_fluid", label: "Unity Fluid Material", num_components: 1, default_value: ["%YAML 1.1\n%TAG !u! tag:unity3d.com,2011:\n--- !u!21 &2100000\nMaterial:\n  serializedVersion: 8\n  m_ObjectHideFlags: 0\n  m_CorrespondingSourceObject: {fileID: 0}\n  m_PrefabInstance: {fileID: 0}\n  m_PrefabAsset: {fileID: 0}\n  m_Name: ASSET_NAME\n  m_Shader: {fileID: -6465566751694194690, guid: 19b419010e1004644affea18d0fc8dff, type: 3}\n  m_ValidKeywords:\n  - _B_LOAD_COL_TEX\n  m_InvalidKeywords: []\n  m_LightmapFlags: 4\n  m_EnableInstancingVariants: 0\n  m_DoubleSidedGI: 0\n  m_CustomRenderQueue: -1\n  stringTagMap: {}\n  disabledShaderPasses: []\n  m_SavedProperties:\n    serializedVersion: 3\n    m_TexEnvs:\n    - _BumpMap:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _DetailAlbedoMap:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _DetailMask:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _DetailNormalMap:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _EmissionMap:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _MainTex:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _MetallicGlossMap:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _OcclusionMap:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _ParallaxMap:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _SampleTexture2D_72ab43ee7e5b4ff3acd5a9fb57f150dc_Texture_1:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _colTexture:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _lookupTable:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _posTexture:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _posTexture2:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _rotTexture:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _spareColTexture:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - unity_Lightmaps:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - unity_LightmapsInd:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - unity_ShadowMasks:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    m_Ints: []\n    m_Floats:\n    - _B_LOAD_COL_TEX: 1\n    - _B_LOAD_NORM_TEX: 0\n    - _B_LOAD_POS_TWO_TEX: 0\n    - _B_UNLOAD_ROT_TEX: 0\n    - _B_autoPlayback: 1\n    - _B_surfaceNormals: 1\n    - _B_twoSidedNorms: 0\n    - _B_uvFromRG: 0\n    - _BumpScale: 1\n    - _Cutoff: 0.5\n    - _DetailNormalMapScale: 1\n    - _DstBlend: 0\n    - _GlossMapScale: 1\n    - _Glossiness: 0.5\n    - _GlossyReflections: 1\n    - _Metallic: 0\n    - _Mode: 0\n    - _OcclusionStrength: 1\n    - _Parallax: 0.02\n    - _QueueControl: -1\n    - _QueueOffset: 0\n    - _SmoothnessTextureChannel: 0\n    - _SpecularHighlights: 1\n    - _SrcBlend: 1\n    - _UVSec: 0\n    - _ZWrite: 1\n    - _boundMaxX: 0\n    - _boundMaxY: 0\n    - _boundMaxZ: 0\n    - _boundMinX: 0\n    - _boundMinY: 0\n    - _boundMinZ: 0\n    - _displayFrame: 1\n    - _frameCount: 0\n    - _gameTimeAtFirstFrame: 0\n    - _houdiniFPS: 60\n    - _playbackSpeed: 1\n    m_Colors:\n    - _Color: {r: 1, g: 1, b: 1, a: 1}\n    - _EmissionColor: {r: 0, g: 0, b: 0, a: 1}\n  m_BuildTextureStacks: []\n"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.hide(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "mat_unity_sprite", label: "Unity Sprite Material", num_components: 1, default_value: ["%YAML 1.1\n%TAG !u! tag:unity3d.com,2011:\n--- !u!21 &2100000\nMaterial:\n  serializedVersion: 8\n  m_ObjectHideFlags: 0\n  m_CorrespondingSourceObject: {fileID: 0}\n  m_PrefabInstance: {fileID: 0}\n  m_PrefabAsset: {fileID: 0}\n  m_Name: ASSET_NAME\n  m_Shader: {fileID: -6465566751694194690, guid: 8bf13a6837d559049924774e12033384, type: 3}\n  m_ValidKeywords:\n  - _B_LOAD_COL_TEX\n  m_InvalidKeywords: []\n  m_LightmapFlags: 4\n  m_EnableInstancingVariants: 0\n  m_DoubleSidedGI: 0\n  m_CustomRenderQueue: -1\n  stringTagMap: {}\n  disabledShaderPasses: []\n  m_SavedProperties:\n    serializedVersion: 3\n    m_TexEnvs:\n    - _BumpMap:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _DetailAlbedoMap:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _DetailMask:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _DetailNormalMap:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _EmissionMap:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _MainTex:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _MetallicGlossMap:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _OcclusionMap:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _ParallaxMap:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _SampleTexture2D_72ab43ee7e5b4ff3acd5a9fb57f150dc_Texture_1:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _colTexture:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _posTexture:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _posTexture2:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - _spareColTexture:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - unity_Lightmaps:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - unity_LightmapsInd:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    - unity_ShadowMasks:\n        m_Texture: {fileID: 0}\n        m_Scale: {x: 1, y: 1}\n        m_Offset: {x: 0, y: 0}\n    m_Ints: []\n    m_Floats:\n    - _B_CAN_SPIN: 0\n    - _B_LOAD_COL_TEX: 1\n    - _B_LOAD_NORM_TEX: 0\n    - _B_LOAD_POS_TWO_TEX: 0\n    - _B_autoPlayback: 1\n    - _B_hideOverlappingOrigin: 1\n    - _B_interpolate: 0\n    - _B_interpolateCol: 0\n    - _B_interpolateSpareCol: 0\n    - _B_pscaleAreInPosA: 1\n    - _B_spinFromHeading: 0\n    - _B_surfaceNormals: 1\n    - _B_twoSidedNorms: 0\n    - _BumpScale: 1\n    - _Cutoff: 0.5\n    - _DetailNormalMapScale: 1\n    - _DstBlend: 0\n    - _GlossMapScale: 1\n    - _Glossiness: 0.5\n    - _GlossyReflections: 1\n    - _Metallic: 0\n    - _Mode: 0\n    - _OcclusionStrength: 1\n    - _Parallax: 0.02\n    - _QueueControl: -1\n    - _QueueOffset: 0\n    - _SmoothnessTextureChannel: 0\n    - _SpecularHighlights: 1\n    - _SrcBlend: 1\n    - _UVSec: 0\n    - _ZWrite: 1\n    - _boundMaxX: 0\n    - _boundMaxY: 0\n    - _boundMaxZ: 0\n    - _boundMinX: 0\n    - _boundMinY: 0\n    - _boundMinZ: 0\n    - _displayFrame: 1\n    - _frameCount: 0\n    - _gameTimeAtFirstFrame: 0\n    - _globalPscaleMul: 1\n    - _heightBaseScale: 0.2\n    - _houdiniFPS: 60\n    - _originRadius: 0.02\n    - _particleTexUScale: 1\n    - _particleTexVScale: 1\n    - _playbackSpeed: 1\n    - _scaleByVelAmount: 1\n    - _spinPhase: 0\n    - _widthBaseScale: 0.2\n    m_Colors:\n    - _Color: {r: 1, g: 1, b: 1, a: 1}\n    - _EmissionColor: {r: 0, g: 0, b: 0, a: 1}\n  m_BuildTextureStacks: []\n"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.hide(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.SeparatorParmTemplate({name: "sepparm8"});
			hou_parm_template2.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.LabelParmTemplate({name: "lb_shaderinfo", label: "lb_shaderinfo", column_labels: ["Minimum Compatible Shaders:\nSideFX Labs 18.5.675  -  UE4.26-5.0EA / Unity URP_VAT3\n\nLatest Compatible Shaders:\nSideFX Labs 20.0.598  -  UE4.26-5.3 / Unity URP_VAT3"]});
			hou_parm_template2.setTags({"sidefx::look": "block"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.SeparatorParmTemplate({name: "sepparm6"});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ embeddeddata == \\\"\\\" }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "embeddeddata", label: "Last Render's Embedded Data", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ embeddeddata == \\\"\\\" }");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"editor": "1", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			
            this.parmTemplateGroup = hou_parm_template_group;
            this.parmTemplateGroup.linkNode(this);
        }
    }
    hou.registerType('DRIVER/Labs/Game Engine/labs::vertex_animation_textures::3.0',_hnt_DRIVER_labs__vertex_animation_textures__3_0)
    return _hnt_DRIVER_labs__vertex_animation_textures__3_0
}
        