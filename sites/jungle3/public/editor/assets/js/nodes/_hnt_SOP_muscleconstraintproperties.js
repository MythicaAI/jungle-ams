
export default function (hou) {
    class _hnt_SOP_muscleconstraintproperties extends hou.extend(hou._HoudiniBase).with(hou._SubgraphMixin) {
        static is_root = false;
        static id = 'SOP/Character FX/Muscles/muscleconstraintproperties';
        static category = '/SOP';
        static houdiniType = 'muscleconstraintproperties';
        static title = 'Muscle Constraint Properties';
        static icon = 'None';
        constructor() {
            super();
            this.flags['houdini_type'] = this.__proto__.constructor.houdiniType;
            
            const inputs = ['SOP', 'SOP'];
            const outputs = ['SOP'];

            for(var i=0;i<inputs.length;i++) this.addInput(''+i,inputs[i]);        
            for(var j=0;j<outputs.length;j++) this.addOutput(''+j,outputs[j]);
        }
        parmTemplatesInit() {
            let hou_parm_template_group = new hou.ParmTemplateGroup();
			this.parmTemplateGroup = hou_parm_template_group;
			let hou_parm_template = new hou.MenuParmTemplate({name: "viztype", label: "Visualize", menu_items: ["0", "1", "2"], menu_labels: ["     Modified     ", "     Muscle Ends     ", "     Muscle to Bone     "], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template.setScriptCallback("hou.phm().enterState(kwargs)");
			hou_parm_template.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template.setTags({"script_callback": "hou.phm().enterState(kwargs)", "script_callback_language": "python"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ToggleParmTemplate({name: "displayguide", label: "Display Bone Geometry", default_value: true});
			hou_parm_template.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template.setTags({"autoscope": "0000000000000000", "script_callback_language": "python"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ToggleParmTemplate({name: "absoluteradius", label: "Muscle End Radii use Absolute Distances", default_value: false});
			hou_parm_template.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template.setTags({"autoscope": "0000000000000000", "script_callback_language": "python"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "symmfolder_1", label: "Property Assignments", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			let hou_parm_template2 = new hou.IntParmTemplate({name: "solvertype", label: "Parameter Configuration", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1"], menu_labels: ["  FEM  ", "  Vellum  "], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback": "", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "numprops", label: "Number of Assingments", folder_type: hou.folderType.TabbedMultiparmBlock, default_value: 1, ends_tab_group: false});
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "multistartoffset": "1"});
			let hou_parm_template3 = new hou.StringParmTemplate({name: "group#", label: "Group", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setTags({"script_action": "import toolutils\nimport soputils\nimport re\n\nvp = toolutils.sceneViewer()\nnode = kwargs['node']\np = kwargs['parmtuple']\nstate_name = node.type().definition().sections()['DefaultState'].contents()\n#this parameter\nparm_name = p[0].name()\npstring = p[0].evalAsString()\n#this multiparm number\nproperty_num = int( re.findall('(\\d+)$', parm_name)[0])\n\n#push the parm string into the selected viewport items\n#thisselection = hou.Selection(node.geometry(), hou.geometryType.Primitives, pstring).freeze()\nif vp.currentState() != state_name:\n    vp.setCurrentNode(node)\n    vp.enterCurrentNodeState()\n\nvp.setGroupListVisible(0)\nvp.setGroupListVisible(1)\n\nargs = { 'property_num': property_num, 'parm_name': parm_name, 'parm_string': pstring,  }\n\nvp.runStateCommand( 'run_action_selector', args = args )", "script_action_help": "Select geometry from an available viewport.\nShift-click to turn on Select Groups.", "script_action_icon": "BUTTONS_reselect"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "folder0_#_2", label: "Muscle Ends", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setTags({"group_type": "collapsible"});
			let hou_parm_template4 = new hou.ToggleParmTemplate({name: "fenablemuscleendstiffness#", label: " ", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 1 }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fmuscleendstiffness#", label: "Stiffness (FEM)", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fenablemuscleendstiffness# == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 1 }");
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "units": "kg1m-3"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "fenablemuscleenddamping#", label: " ", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 1 }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fmuscleenddamping#", label: "Damping (FEM)", num_components: 1, default_value: [0.1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fenablemuscleenddamping# == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 1 }");
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "units": ""});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "enablemuscleendstiffness#", label: " ", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 0 }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "muscleendstiffness#", label: "Stiffness (Vellum)", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ enablemuscleendstiffness# == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 0 }");
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "units": "kg1m-3"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "enablemuscleenddamping#", label: " ", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 0 }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "muscleenddamping#", label: "Damping (Vellum)", num_components: 1, default_value: [0.01], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ enablemuscleenddamping# == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 0 }");
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "units": ""});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "enablemuscleradius#", label: "Radius", default_value: false});
			hou_parm_template4.hideLabel(true);
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "end1radius#", label: "Radius1", num_components: 1, default_value: [0.05], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ enablemuscleradius# == 0 }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "end2radius#", label: "Radius2", num_components: 1, default_value: [0.05], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ enablemuscleradius# == 0 }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "enablemuscleenddistance#", label: " ", default_value: false});
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "muscleenddistance#", label: "Distance Threshold", num_components: 1, default_value: [0.1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ enablemuscleenddistance# == 0 }");
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "units": "m1"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "folder1_#_2", label: "Muscle to Muscle", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setTags({"group_type": "collapsible"});
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "fenablemuscletomusclestiffness#", label: " ", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 1 }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fmuscletomusclestiffness#", label: "Stiffness (FEM)", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fenablemuscletomusclestiffness# == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 1 }");
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "units": "m1"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "fenablemuscletomuscledamping#", label: " ", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 1 }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fmuscletomuscledamping#", label: "Damping (FEM)", num_components: 1, default_value: [0.1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fenablemuscletomuscledamping# == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 1 }");
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "units": ""});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "enablemuscletomusclestiffness#", label: " ", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 0 }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "muscletomusclestiffness#", label: "Stiffness (Vellum)", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ enablemuscletomusclestiffness# == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 0 }");
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "units": "m1"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "enablemuscletomuscledamping#", label: " ", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 0 }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "muscletomuscledamping#", label: "Damping (Vellum)", num_components: 1, default_value: [0.01], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ enablemuscletomuscledamping# == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 0 }");
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "units": ""});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "enablemuscletomusclecompress#", label: " ", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 0 }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "muscletomusclecompress#", label: "Compression Stiffness", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ enablemuscletomusclecompress# == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 0 }");
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "units": "m1"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "enablemuscletomuscledistance#", label: " ", default_value: false});
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "muscletomuscledistance#", label: " Distance Threshold", num_components: 1, default_value: [0.1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ enablemuscletomuscledistance# == 0 }");
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "units": ""});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "enablemuscletomusclesliderate#", label: " ", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 0 }");
			hou_parm_template4.hide(true);
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "muscletomusclesliderate#", label: "SlideRate", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ enablemuscletomusclesliderate# == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 0 }");
			hou_parm_template4.hide(true);
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "units": ""});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "enablemuscletomuscletargets#", label: " ", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 0 }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "muscletomuscletargets#", label: "Attachment Candidates", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ enablemuscletomuscletargets# == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 0 }");
			hou_parm_template4.setTags({"script_action": "import toolutils\nimport soputils\nimport re\n\nvp = toolutils.sceneViewer()\nnode = kwargs['node']\np = kwargs['parmtuple']\nstate_name = node.type().definition().sections()['DefaultState'].contents()\n#this parameter\nparm_name = p[0].name()\npstring = p[0].evalAsString()\n#this multiparm number\nproperty_num = int( re.findall('(\\d+)$', parm_name)[0])\n\n#push the parm string into the selected viewport items\n#thisselection = hou.Selection(node.geometry(), hou.geometryType.Primitives, pstring).freeze()\nif vp.currentState() != state_name:\n    vp.setCurrentNode(node)\n    vp.enterCurrentNodeState()\n\nvp.setGroupListVisible(0)\nvp.setGroupListVisible(1)\n\nargs = { 'property_num': property_num, 'parm_name': parm_name, 'parm_string': pstring,  }\n\nvp.runStateCommand( 'run_action_selector', args = args )", "script_action_help": "Select Muscles as candidates for glue targets.\nShift-click to turn on Select Groups.", "script_action_icon": "BUTTONS_reselect"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "folder2_#", label: "Muscle to Bone", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setTags({"group_type": "collapsible"});
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "fenablemuscletobonestiffness#", label: " ", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 1 }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fmuscletobonestiffness#", label: "Stiffness (FEM)", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fenablemuscletobonestiffness# == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 1 }");
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "units": ""});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "fenablemuscletobonedamping#", label: " ", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 1 }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fmuscletobonedamping#", label: "Damping (FEM)", num_components: 1, default_value: [0.1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fenablemuscletobonedamping# == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 1 }");
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "units": ""});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "enablemuscletobonestiffness#", label: " ", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 0 }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "muscletobonestiffness#", label: "Stiffness (Vellum)", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ enablemuscletobonestiffness# == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 0 }");
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "units": ""});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "enablemuscletobonedamping#", label: " ", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 0 }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "muscletobonedamping#", label: "Damping (Vellum)", num_components: 1, default_value: [0.1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ enablemuscletobonedamping# == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 0 }");
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "units": ""});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "enablemuscletobonemask#", label: "Enable", default_value: false});
			hou_parm_template4.hideLabel(true);
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "maxraydist#", label: "Mask Distance", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ enablemuscletobonemask# == 0 }");
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "enablemuscletobonedistance#", label: " ", default_value: false});
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "muscletobonedistance#", label: "Distance Threshold", num_components: 1, default_value: [0.1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ enablemuscletobonedistance# == 0 }");
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "units": "m1"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "enablemuscletobonecompress#", label: " ", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 0 }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "muscletobonecompress#", label: "Compression Stiffness", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ enablemuscletobonecompress# == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 0 }");
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "units": ""});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "enablemuscletobonesliderate#", label: " ", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 0 }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "muscletobonesliderate#", label: "SlideRate", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ enablemuscletobonesliderate# == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 0 }");
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "units": ""});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "enablemuscletobonetangent#", label: " ", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 0 }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "muscletobonetangent#", label: "Tangent Stiffness", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ enablemuscletobonetangent# == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 0 }");
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "units": ""});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "folder0_#_3", label: "Velocity Blend", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setTags({"group_type": "collapsible"});
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "enablevelocityblend#", label: " ", default_value: false});
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "velocityblend#", label: "Velocity Blend", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ enablevelocityblend# == 0 }");
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "units": ""});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "folder0_#", label: "Collisions", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setTags({"group_type": "collapsible"});
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "enablecollisionradius#", label: " ", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 0 }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "musclecollisionradius#", label: "Collision Scale (Vellum)", num_components: 1, default_value: [0.25], min: 0, max: 0.1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ enablecollisionradius# == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 0 }");
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "units": ""});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "enablerepulsion#", label: " ", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 1 }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "repulsion#", label: "Repulsion Force (FEM)", num_components: 1, default_value: [10000000.0], min: 0, max: 10000000.0, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ enablerepulsion# == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ solvertype == 1 }");
			hou_parm_template4.setTags({"autoscope": "0000000000000000", "units": ""});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			
            this.parmTemplateGroup = hou_parm_template_group;
            this.parmTemplateGroup.linkNode(this);
        }
    }
    hou.registerType('SOP/Character FX/Muscles/muscleconstraintproperties',_hnt_SOP_muscleconstraintproperties)
    return _hnt_SOP_muscleconstraintproperties
}
        