
export default function (hou) {
    class _hnt_SOP_measure__2_0 extends hou._HoudiniBase {
        static is_root = false;
        static id = 'SOP/Other/measure::2.0';
        static category = '/SOP';
        static houdiniType = 'measure::2.0';
        static title = 'Measure';
        static icon = '/editor/assets/imgs/nodes/_hnt_SOP_measure__2_0.svg';
        constructor() {
            super();
            this.flags['houdini_type'] = this.__proto__.constructor.houdiniType;
            
            const inputs = ['SOP'];
            const outputs = ['SOP'];

            for(var i=0;i<inputs.length;i++) this.addInput(''+i,inputs[i]);        
            for(var j=0;j<outputs.length;j++) this.addOutput(''+j,outputs[j]);
        }
        parmTemplatesInit() {
            let hou_parm_template_group = new hou.ParmTemplateGroup();
			this.parmTemplateGroup = hou_parm_template_group;
			let hou_parm_template = new hou.StringParmTemplate({name: "group", label: "Group", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle});
			hou_parm_template.setTags({"script_action": "if True: \t\t\n import soputils           \t\t\t\t\t\n kwargs['geometrytype'] = (\t\t\t\t\t\n   kwargs['node'].parmTuple('grouptype'))  \t\t\t\n kwargs['inputindex'] = 0\t                \t\t\n soputils.selectGroupParm(kwargs)", "script_action_help": "Select geometry from an available viewport.\nShift-click to turn on Select Groups.", "script_action_icon": "BUTTONS_reselect"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.MenuParmTemplate({name: "grouptype", label: "Element Type", menu_items: ["points", "prims"], menu_labels: ["Points", "Primitives"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "measurement", label: "Measurement", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			let hou_parm_template2 = new hou.MenuParmTemplate({name: "measure", label: "Measure", menu_items: ["perimeter", "area", "volume", "centroid", "curvature", "gradient", "laplacian", "boundaryintegral", "surfaceintegral"], menu_labels: ["Perimeter / Length", "Area", "Volume", "Centroid", "Curvature", "Gradient", "Laplacian", "Boundary Integral", "Surface Integral"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "curvaturetype", label: "Curvature Type", menu_items: ["gaussian", "mean", "principal", "curvedness"], menu_labels: ["Gaussian", "Mean", "Principal", "Curvedness"], default_value: 3, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ measure != curvature }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "principaltype", label: "Report", menu_items: ["min", "max"], menu_labels: ["Smaller", "Larger"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ measure != curvature } { curvaturetype != principal }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "principalsign", label: "principalsign", menu_items: ["signed", "absolute"], menu_labels: ["Signed", "Absolute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ measure != curvature } { curvaturetype != principal }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "principalreportas", label: "principalreportas", menu_items: ["scalar", "direction", "vector"], menu_labels: ["Curvature", "Direction", "Vector"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ measure != curvature } { curvaturetype != principal }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "umbiliccutoff", label: "Difference Filter", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Logarithmic, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ measure != curvature } { curvaturetype != principal } { principalreportas == scalar }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "integrationmode", label: "Integration Mode", menu_items: ["componentwise", "tangent", "normal"], menu_labels: ["Component-wise", "Tangent Component", "Normal Component"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ measure != boundaryintegral measure != surfaceintegral }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "srcattrib", label: "Source Attribute", num_components: 1, default_value: ["P"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ measure == curvature } { measure == volume } { measure == perimeter } { measure == area } { measure == centroid }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"sidefx::attrib_access": "readwrite"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "srccomp", label: " ", menu_items: ["x", "y", "z", "xyz"], menu_labels: ["X Component", "Y Component", "Z Component", "Full Vector"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ measure == curvature } { measure == volume } { measure == perimeter } { measure == area } { measure == centroid }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "scalenormalize", label: "Make Scale Independent", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ measure != curvature measure != gradient measure != laplacian measure != surfaceintegral } { measure == curvature curvaturetype == gaussian }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.SeparatorParmTemplate({name: "sepparm"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "integrationdomain", label: "Accumulate", menu_items: ["element", "piece", "throughout"], menu_labels: ["Per Element", "Per Piece", "Throughout"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "refinetomanifold", label: "Refine to Connected Manifold Pieces", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ integrationdomain != piece }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "pieceattrib", label: "Piece Attribute", num_components: 1, default_value: ["class"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ integrationdomain != piece }");
			hou_parm_template2.setTags({"sidefx::attrib_access": "readwrite"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "usecustompos", label: "Label", default_value: false});
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "posattrib", label: "Position Attribute", num_components: 1, default_value: ["P"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ usecustompos == 0 }");
			hou_parm_template2.setTags({"sidefx::attrib_access": "readwrite"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "visrange", label: "Visualized Range", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "userangemin", label: "Label", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ measure == centroid } { measure == curvature principalreportas == direction }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "rangemin", label: "Minimum", num_components: 1, default_value: [null], min: null, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ measure == centroid } { measure == curvature principalreportas == direction } { userangemin == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "userangemax", label: "Label", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ measure == centroid } { measure == curvature principalreportas == direction }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "rangemax", label: "Maximum", num_components: 1, default_value: [1], min: null, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ measure == centroid } { measure == curvature principalreportas == direction } { userangemax == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "usecenterwidth", label: "Label", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ measure == centroid } { measure == curvature principalreportas == direction }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "width", label: "Width", num_components: 1, default_value: [6], min: 0, max: 40, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Angle, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ measure == centroid } { measure == curvature principalreportas == direction } { usecenterwidth == 0 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "widthscale", label: " ", menu_items: ["unit", "sd", "mad"], menu_labels: ["x 1.0", "x SD", "x MAD"], default_value: 2, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ measure == centroid } { measure == curvature principalreportas == direction } { usecenterwidth == 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "centertype", label: "Center", menu_items: ["fixed", "mean", "median"], menu_labels: ["Fixed", "Mean", "Median"], default_value: 2, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ measure == centroid } { measure == curvature principalreportas == direction } { usecenterwidth == 0 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "fixedcenter", label: "", num_components: 1, default_value: [0], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ measure == centroid } { measure == curvature principalreportas == direction } { usecenterwidth == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ centertype != fixed }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.RampParmTemplate({name: "colorramp", label: "Color Mapping", ramp_parm_type: hou.rampParmType.Color, default_value: 3, default_basis: null, color_type: null});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ measure == centroid } { measure == curvature principalreportas == direction }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "rampcolordefault": "1pos ( 0 ) 1c ( 0 0 1 ) 1interp  \t\t\t\t ( linear ) 2pos ( 0.5 ) 2c ( 1 1 1 ) 2interp  \t\t\t\t ( linear ) 3pos ( 1.0 ) 3c ( 1 0 0 ) 3interp  \t\t\t\t ( linear )", "rampshowcontrolsdefault": "0"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "vectorscale", label: "Vector Scale", num_components: 1, default_value: [1], min: 0, max: 2, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Angle, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ measure == curvature principalreportas == scalar } { measure == volume } { measure == perimeter } { measure == area } { measure == centroid } { measure == laplacian srccomp != xyz } { measure == surfaceintegral srccomp != xyz } { measure == boundaryintegral srccomp != xyz }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "output", label: "Output", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template2 = new hou.StringParmTemplate({name: "attribname", label: "Attribute Name", num_components: 1, default_value: ["area"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle});
			hou_parm_template2.setTags({"sidefx::attrib_access": "readwrite"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "usetotalattrib", label: "usetotalattrib", default_value: false});
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "totalattribname", label: "Total Attribute Name", num_components: 1, default_value: ["totalarea"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ usetotalattrib == 0 }");
			hou_parm_template2.setTags({"sidefx::attrib_access": "readwrite"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "userangegroup", label: "userangegroup", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ measure == centroid } { measure == curvature principalreportas == direction } { userangemin == 0 userangemax == 0 usecenterwidth == 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "rangegroup", label: "Range Group", num_components: 1, default_value: ["inrange"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ userangegroup == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "bakeintooutput", label: "Bake Visualized Range Into Output", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ measure == centroid } { measure == curvature principalreportas == direction } { userangemin == 0 userangemax == 0 usecenterwidth == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "useremaprange", label: "Label", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ bakeintooutput == 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "remaprange", label: "Remap Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ bakeintooutput == 0 } { useremaprange == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			
            this.parmTemplateGroup = hou_parm_template_group;
            this.parmTemplateGroup.linkNode(this);
        }
    }
    hou.registerType('SOP/Other/measure::2.0',_hnt_SOP_measure__2_0)
    return _hnt_SOP_measure__2_0
}
        