
export default function (hou) {
    class _hnt_SOP_labs__random_selection__1_0 extends hou.extend(hou._HoudiniBase).with(hou._SubgraphMixin) {
        static is_root = false;
        static id = 'SOP/Labs/Geometry/Group/labs::random_selection::1.0';
        static category = '/SOP/labs';
        static houdiniType = 'labs::random_selection::1.0';
        static title = 'Labs Random Selection';
        static icon = '/editor/assets/imgs/nodes/_hnt_SOP_labs__random_selection__1_0.svg';
        constructor() {
            super();
            this.flags['houdini_type'] = this.__proto__.constructor.houdiniType;
            
            const inputs = ['SOP'];
            const outputs = ['SOP'];

            for(var i=0;i<inputs.length;i++) this.addInput(''+i,inputs[i]);        
            for(var j=0;j<outputs.length;j++) this.addOutput(''+j,outputs[j]);
        }
        parmTemplatesInit() {
            let hou_parm_template_group = new hou.ParmTemplateGroup();
			this.parmTemplateGroup = hou_parm_template_group;
			let hou_parm_template = new hou.MenuParmTemplate({name: "class", label: "Elements", menu_items: ["0", "1"], menu_labels: ["Primitives", "Points"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template.setHelp("What class of elements to operate on.");
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.MenuParmTemplate({name: "selectionmode", label: "Selection Mode", menu_items: ["0", "1", "2", "3", "4"], menu_labels: ["Exact Number - Preserve Element Order", "Exact Number - Randomize Element Order", "Probability", "Periodic - Constant Intervals", "Periodic - Random Intervals"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template.setJoinWithNext(true);
			hou_parm_template.setHelp("Exact Number modes output precise numbers of selected elements. Exact Number - Randomize Element Order scrambles the input element order before selection, and it is the only mode that does this. Probability evaluates selection separately on a per-element basis, so the final selection ratio and number are not precise and are affected by Random Seed. Periodic modes periodically select and then skip a certain number of elements following to the input element order. The numbers of selected and skipped elements in different periods can be constant or random.");
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.MenuParmTemplate({name: "specification", label: "Specification", menu_items: ["0", "1"], menu_labels: ["By Ratio", "By Count"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ selectionmode > 1 }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ selectionmode > 1 }");
			hou_parm_template.hideLabel(true);
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "ratio", label: "Ratio", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ specification == 1 } { selectionmode > 1 }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ specification == 1 } { selectionmode > 1 }");
			hou_parm_template.setHelp("The ratio of the number of elements to select to the total number of elements.");
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.IntParmTemplate({name: "count", label: "Count", num_components: 1, default_value: [0], min: 0, max: 10000, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ specification == 0 } { selectionmode > 1 }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ specification == 0 } { selectionmode > 1 }");
			hou_parm_template.setHelp("The number of elements to select.");
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "probability", label: "Probability", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ selectionmode != 2 }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ selectionmode != 2 }");
			hou_parm_template.setHelp("An individual element's probability of selection.");
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.IntParmTemplate({name: "offset", label: "Offset", num_components: 1, default_value: [0], min: null, max: 100, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ selectionmode < 3 }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ selectionmode < 3 }");
			hou_parm_template.setHelp("Offsets the selection pattern.");
			hou_parm_template.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template.setTags({"script_callback_language": "python"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder1", label: "In Every Period...", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template.setTabConditional(hou.parmCondType.DisableWhen, "{ selectionmode < 3 }");
			hou_parm_template.setTabConditional(hou.parmCondType.HideWhen, "{ selectionmode < 3 }");
			let hou_parm_template2 = new hou.IntParmTemplate({name: "selectlen", label: "Select", num_components: 1, default_value: [0], min: 1, max: 20, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ selectionmode != 3 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ selectionmode != 3 }");
			hou_parm_template2.setHelp("The number of elements to select in the first part of every period.");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "skiplen", label: "Skip", num_components: 1, default_value: [0], min: 1, max: 20, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ selectionmode != 3 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ selectionmode != 3 }");
			hou_parm_template2.setHelp("The number of elements to skip in the second part of every period.");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "selectlenmin", label: "Select Min", num_components: 1, default_value: [0], min: 1, max: 20, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ selectionmode != 4 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ selectionmode != 4 }");
			hou_parm_template2.setHelp("The minimum number of elements to select in the first part of every period. The final number is randomly generated between the min and max on a per-period basis.");
			hou_parm_template2.setScriptCallback("hou.pwd().hm().increaseMax('selectlenmin', 'selectlenmax')");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback": "hou.pwd().hm().increaseMax('selectlenmin', 'selectlenmax')", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "selectlenmax", label: "Select Max", num_components: 1, default_value: [5], min: 1, max: 20, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ selectionmode != 4 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ selectionmode != 4 }");
			hou_parm_template2.setHelp("The maximum number of elements to select in the first part of every period. The final number is randomly generated between the min and max on a per-period basis.");
			hou_parm_template2.setScriptCallback("hou.pwd().hm().decreaseMin('selectlenmin', 'selectlenmax')");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback": "hou.pwd().hm().decreaseMin('selectlenmin', 'selectlenmax')", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "skiplenmin", label: "Skip Min", num_components: 1, default_value: [0], min: 1, max: 20, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ selectionmode != 4 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ selectionmode != 4 }");
			hou_parm_template2.setHelp("The minimum number of elements to skip in the second part of every period. The final number is randomly generated between the min and max on a per-period basis.");
			hou_parm_template2.setScriptCallback("hou.pwd().hm().increaseMax('skiplenmin', 'skiplenmax')");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback": "hou.pwd().hm().increaseMax('skiplenmin', 'skiplenmax')", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "skiplenmax", label: "Skip Max", num_components: 1, default_value: [5], min: 1, max: 20, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ selectionmode != 4 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ selectionmode != 4 }");
			hou_parm_template2.setHelp("The maximum number of elements to skip in the second part of every period. The final number is randomly generated between the min and max on a per-period basis.");
			hou_parm_template2.setScriptCallback("hou.pwd().hm().decreaseMin('skiplenmin', 'skiplenmax')");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback": "hou.pwd().hm().decreaseMin('skiplenmin', 'skiplenmax')", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.IntParmTemplate({name: "randseed", label: "Random Seed", num_components: 1, default_value: [0], min: 0, max: 200, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ selectionmode == 3 }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ selectionmode == 3 }");
			hou_parm_template.setHelp("Affects the selection pattern. In Probability mode, it also affects the final selection ratio and number.");
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.SeparatorParmTemplate({name: "sepparm"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ToggleParmTemplate({name: "deletenonselected", label: "Delete Non-selected", default_value: false});
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ToggleParmTemplate({name: "deleteselected", label: "Delete Selected", default_value: false});
			hou_parm_template.setScriptCallback("if hou.pwd().evalParm(\"deleteselected\") == 1: hou.pwd().setParms({\"creategroup\": 0, \"colorselected\": 0})");
			hou_parm_template.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template.setTags({"autoscope": "0000000000000000", "script_callback": "if hou.pwd().evalParm(\"deleteselected\") == 1: hou.pwd().setParms({\"creategroup\": 0, \"colorselected\": 0})", "script_callback_language": "python"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ToggleParmTemplate({name: "creategroup", label: "Create Group from Selected", default_value: false});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ deleteselected == 1 }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ deleteselected == 1 }");
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "groupname", label: "Group Name", num_components: 1, default_value: ["selected"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ creategroup == 0 } { deleteselected == 1 }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ deleteselected == 1 }");
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "fd_colorselect", label: "Color Selected", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ deleteselected == 1 }");
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ deleteselected == 1 }");
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template.setTabConditional(hou.parmCondType.DisableWhen, "{ deleteselected == 1 }");
			hou_parm_template.setTabConditional(hou.parmCondType.HideWhen, "{ deleteselected == 1 }");
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "colorselected", label: "Color Selected", default_value: true});
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "deleteallcolorattribs", label: "Delete All Existing Color Attributes", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ colorselected == 0 }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "colortype", label: "Color Type", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3", "4"], menu_labels: ["Constant", "Bounding Box", "Random", "Ramp from Attribute", "Random from Attribute"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ colorselected == 0 }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "color", label: "Color", num_components: 3, default_value: [0, 0.45, 0.9], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ colorselected == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ colortype != 0 }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "seed", label: "Color Seed", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ colorselected == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ colortype != 2 colortype != 4 }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "rampattribute", label: "Attribute", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ colorselected == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ colortype != 3 colortype != 4 }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "ramprange", label: "Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ colorselected == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ colortype != 3 }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.RampParmTemplate({name: "ramp", label: "Attribute Ramp", ramp_parm_type: hou.rampParmType.Color, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ colorselected == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ colortype != 3 }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "parmvop": "1", "rampbasis_var": "vecramp_the_basis_strings", "rampbasisdefault": "linear", "rampcolordefault": "1pos ( 0 ) 1c ( 0 0 0 ) 1interp ( linear ) 2pos ( 1 ) 2c ( 1 1 1 ) 2interp ( linear )", "rampcolortype": "rgb", "rampkeys_var": "vecramp_the_key_positions", "rampshowcontrolsdefault": "0", "rampvalues_var": "vecramp_the_key_values"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			
            this.parmTemplateGroup = hou_parm_template_group;
            this.parmTemplateGroup.linkNode(this);
        }
    }
    hou.registerType('SOP/Labs/Geometry/Group/labs::random_selection::1.0',_hnt_SOP_labs__random_selection__1_0)
    return _hnt_SOP_labs__random_selection__1_0
}
        