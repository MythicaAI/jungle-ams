
export default function (hou) {
    class _hnt_SOP_agentprep extends hou.extend(hou._HoudiniBase).with(hou._SubgraphMixin) {
        static is_root = false;
        static id = 'SOP/Crowds/agentprep';
        static category = '/SOP';
        static houdiniType = 'agentprep';
        static title = 'Agent Prep';
        static icon = '/editor/assets/imgs/nodes/_hnt_SOP_agentprep.svg';
        constructor() {
            super();
            this.flags['houdini_type'] = this.__proto__.constructor.houdiniType;
            
            const inputs = ['SOP'];
            const outputs = ['SOP'];

            for(var i=0;i<inputs.length;i++) this.addInput(''+i,inputs[i]);        
            for(var j=0;j<outputs.length;j++) this.addOutput(''+j,outputs[j]);
        }
        parmTemplatesInit() {
            let hou_parm_template_group = new hou.ParmTemplateGroup();
			this.parmTemplateGroup = hou_parm_template_group;
			let hou_parm_template = new hou.StringParmTemplate({name: "root", label: "Root", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "names = []\nif hou.pwd().inputs():\n   g = hou.pwd().inputs()[0].geometry()\n   if len(g.prims()):\n      p = g.prims()[0]\n      names = p.intrinsicValue('agenttransformnames')\n      if type(names) is not list and type(names) is not tuple:\n        names = [ names ]\nreturn [j for i in zip(names,names) for j in i]", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "hips", label: "Hips", num_components: 1, default_value: ["Hips"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "names = []\nif hou.pwd().inputs():\n   g = hou.pwd().inputs()[0].geometry()\n   if len(g.prims()):\n      p = g.prims()[0]\n      names = p.intrinsicValue('agenttransformnames')\n      if type(names) is not list and type(names) is not tuple:\n        names = [ names ]\nreturn [j for i in zip(names,names) for j in i]", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "lowerback", label: "Lower Back", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "names = []\nif hou.pwd().inputs():\n   g = hou.pwd().inputs()[0].geometry()\n   if len(g.prims()):\n      p = g.prims()[0]\n      names = p.intrinsicValue('agenttransformnames')\n      if type(names) is not list and type(names) is not tuple:\n        names = [ names ]\nreturn [j for i in zip(names,names) for j in i]", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "leftupperarm", label: "Left Upper Arm", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "names = []\nif hou.pwd().inputs():\n   g = hou.pwd().inputs()[0].geometry()\n   if len(g.prims()):\n      p = g.prims()[0]\n      names = p.intrinsicValue('agenttransformnames')\n      if type(names) is not list and type(names) is not tuple:\n        names = [ names ]\nreturn [j for i in zip(names,names) for j in i]", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "leftlowerarm", label: "Left Lower Arm", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "names = []\nif hou.pwd().inputs():\n   g = hou.pwd().inputs()[0].geometry()\n   if len(g.prims()):\n      p = g.prims()[0]\n      names = p.intrinsicValue('agenttransformnames')\n      if type(names) is not list and type(names) is not tuple:\n        names = [ names ]\nreturn [j for i in zip(names,names) for j in i]", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "lefthand", label: "Left Hand", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "names = []\nif hou.pwd().inputs():\n   g = hou.pwd().inputs()[0].geometry()\n   if len(g.prims()):\n      p = g.prims()[0]\n      names = p.intrinsicValue('agenttransformnames')\n      if type(names) is not list and type(names) is not tuple:\n        names = [ names ]\nreturn [j for i in zip(names,names) for j in i]", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "rightupperarm", label: "Right Upper Arm", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "names = []\nif hou.pwd().inputs():\n   g = hou.pwd().inputs()[0].geometry()\n   if len(g.prims()):\n      p = g.prims()[0]\n      names = p.intrinsicValue('agenttransformnames')\n      if type(names) is not list and type(names) is not tuple:\n        names = [ names ]\nreturn [j for i in zip(names,names) for j in i]", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "rightlowerarm", label: "Right Lower Arm", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "names = []\nif hou.pwd().inputs():\n   g = hou.pwd().inputs()[0].geometry()\n   if len(g.prims()):\n      p = g.prims()[0]\n      names = p.intrinsicValue('agenttransformnames')\n      if type(names) is not list and type(names) is not tuple:\n        names = [ names ]\nreturn [j for i in zip(names,names) for j in i]", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "righthand", label: "Right Hand", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "names = []\nif hou.pwd().inputs():\n   g = hou.pwd().inputs()[0].geometry()\n   if len(g.prims()):\n      p = g.prims()[0]\n      names = p.intrinsicValue('agenttransformnames')\n      if type(names) is not list and type(names) is not tuple:\n        names = [ names ]\nreturn [j for i in zip(names,names) for j in i]", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "leftupperleg", label: "Left Upper Leg", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "names = []\nif hou.pwd().inputs():\n   g = hou.pwd().inputs()[0].geometry()\n   if len(g.prims()):\n      p = g.prims()[0]\n      names = p.intrinsicValue('agenttransformnames')\n      if type(names) is not list and type(names) is not tuple:\n        names = [ names ]\nreturn [j for i in zip(names,names) for j in i]", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "leftknee", label: "Left Knee", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "names = []\nif hou.pwd().inputs():\n   g = hou.pwd().inputs()[0].geometry()\n   if len(g.prims()):\n      p = g.prims()[0]\n      names = p.intrinsicValue('agenttransformnames')\n      if type(names) is not list and type(names) is not tuple:\n        names = [ names ]\nreturn [j for i in zip(names,names) for j in i]", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "leftankle", label: "Left Ankle", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "names = []\nif hou.pwd().inputs():\n   g = hou.pwd().inputs()[0].geometry()\n   if len(g.prims()):\n      p = g.prims()[0]\n      names = p.intrinsicValue('agenttransformnames')\n      if type(names) is not list and type(names) is not tuple:\n        names = [ names ]\nreturn [j for i in zip(names,names) for j in i]", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "lefttoe", label: "Left Toe", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "names = []\nif hou.pwd().inputs():\n   g = hou.pwd().inputs()[0].geometry()\n   if len(g.prims()):\n      p = g.prims()[0]\n      names = p.intrinsicValue('agenttransformnames')\n      if type(names) is not list and type(names) is not tuple:\n        names = [ names ]\nreturn [j for i in zip(names,names) for j in i]", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "rightupperleg", label: "Right Upper Leg", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "names = []\nif hou.pwd().inputs():\n   g = hou.pwd().inputs()[0].geometry()\n   if len(g.prims()):\n      p = g.prims()[0]\n      names = p.intrinsicValue('agenttransformnames')\n      if type(names) is not list and type(names) is not tuple:\n        names = [ names ]\nreturn [j for i in zip(names,names) for j in i]", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "rightknee", label: "Right Knee", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "names = []\nif hou.pwd().inputs():\n   g = hou.pwd().inputs()[0].geometry()\n   if len(g.prims()):\n      p = g.prims()[0]\n      names = p.intrinsicValue('agenttransformnames')\n      if type(names) is not list and type(names) is not tuple:\n        names = [ names ]\nreturn [j for i in zip(names,names) for j in i]", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "rightankle", label: "Right Ankle", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "names = []\nif hou.pwd().inputs():\n   g = hou.pwd().inputs()[0].geometry()\n   if len(g.prims()):\n      p = g.prims()[0]\n      names = p.intrinsicValue('agenttransformnames')\n      if type(names) is not list and type(names) is not tuple:\n        names = [ names ]\nreturn [j for i in zip(names,names) for j in i]", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "righttoe", label: "Right Toe", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "names = []\nif hou.pwd().inputs():\n   g = hou.pwd().inputs()[0].geometry()\n   if len(g.prims()):\n      p = g.prims()[0]\n      names = p.intrinsicValue('agenttransformnames')\n      if type(names) is not list and type(names) is not tuple:\n        names = [ names ]\nreturn [j for i in zip(names,names) for j in i]", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "head", label: "Head", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "names = []\nif hou.pwd().inputs():\n   g = hou.pwd().inputs()[0].geometry()\n   if len(g.prims()):\n      p = g.prims()[0]\n      names = p.intrinsicValue('agenttransformnames')\n      if type(names) is not list and type(names) is not tuple:\n        names = [ names ]\nreturn [j for i in zip(names,names) for j in i]", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.SeparatorParmTemplate({name: "sepparm3"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "restclip", label: "Rest Clip", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "names = []\nclipsonly = []\nif hou.pwd().inputs():\n   g = hou.pwd().inputs()[0].geometry()\n   if len(g.prims()):\n      p = g.prims()[0]\n      names = p.intrinsicValue(\'agentclipcatalog\')\n      for c in names: \n            clipsonly.append(c[c.find(\"_clip.\")+6:])\nreturn [j for i in zip(clipsonly,clipsonly) for j in i]", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.SeparatorParmTemplate({name: "sepparm4"});
			hou_parm_template_group.append(hou_parm_template);
			
            this.parmTemplateGroup = hou_parm_template_group;
            this.parmTemplateGroup.linkNode(this);
        }
    }
    hou.registerType('SOP/Crowds/agentprep',_hnt_SOP_agentprep)
    return _hnt_SOP_agentprep
}
        