
export default function (hou) {
    class _hnt_SOP_vellumconstraints extends hou.extend(hou._HoudiniBase).with(hou._SubgraphMixin) {
        static is_root = false;
        static id = 'SOP/Dynamics/Vellum/vellumconstraints';
        static category = '/SOP';
        static houdiniType = 'vellumconstraints';
        static title = 'Vellum Constraints';
        static icon = '/editor/assets/imgs/nodes/_hnt_SOP_vellumconstraints.svg';
        constructor() {
            super();
            this.flags['houdini_type'] = this.__proto__.constructor.houdiniType;
            
            const inputs = ['SOP', 'SOP', 'SOP'];
            const outputs = ['SOP', 'SOP', 'SOP'];

            for(var i=0;i<inputs.length;i++) this.addInput(''+i,inputs[i]);        
            for(var j=0;j<outputs.length;j++) this.addOutput(''+j,outputs[j]);
        }
        parmTemplatesInit() {
            let hou_parm_template_group = new hou.ParmTemplateGroup();
			this.parmTemplateGroup = hou_parm_template_group;
			let hou_parm_template = new hou.MenuParmTemplate({name: "constrainttype", label: "Constraint Type", menu_items: ["none", "distance", "bend", "cloth", "hair", "string", "pin", "attach", "stitch", "pressure", "tetvolume", "weld", "glue", "struts", "tetfiber", "tristretch", "tetstretch", "shapematch"], menu_labels: ["None", "Distance Along Edges", "Bend Across Triangles", "Cloth", "Hair", "String", "Pin to Target", "Attach to Geometry", "Stitch Points", "Pressure", "Tetrahedral Volume", "Weld Points", "Glue", "Struts", "Tetrahedral Fiber", "Triangle Stretch", "Tetrahedral Stretch", "Shape Match"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.MenuParmTemplate({name: "stretchtype", label: "Stretch Type", menu_items: ["distance", "tristretch"], menu_labels: ["Distance Along Edges", "Triangle Stretch"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != cloth }");
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ToggleParmTemplate({name: "preservevol", label: "Preserve Volume", default_value: false});
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != tetstretch }");
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.MenuParmTemplate({name: "linear", label: "Model", menu_items: ["off", "on", "normarap"], menu_labels: ["Non-Linear ARAP", "Linear ARAP", "Scale-Invariant ARAP"], default_value: 2, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != tetstretch constrainttype != tristretch constrainttype != tetfiber }");
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder8", label: "Geometry", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			let hou_parm_template2 = new hou.MenuParmTemplate({name: "grouptype", label: "Group Type", menu_items: ["prims", "points", "edges"], menu_labels: ["Primitives", "Points", "Edges"], default_value: 0, default_expression: "guess", default_expression_language: hou.scriptLanguage.Hscript, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "group", label: "Group", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a group_constraint_src basegroup", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.StringToggle});
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "script_action": "import soputils\nkwargs['geometrytype'] = kwargs['node'].parmTuple('grouptype')\nkwargs['inputindex'] = 0\nkwargs['ordered'] = 1\nsoputils.selectGroupParm(kwargs)", "script_action_help": "Select geometry from an available viewport.", "script_action_icon": "BUTTONS_reselect"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "triangulation", label: "Triangulation", menu_items: ["none", "regular", "alternating"], menu_labels: ["None", "Regular", "Alternating"], default_value: 2, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != distance constrainttype != bend constrainttype != cloth constrainttype != string constrainttype != weld constrainttype != tristretch }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.SeparatorParmTemplate({name: "sepparm"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "domass", label: "Mass", menu_items: ["off", "on", "calcuniform", "calcvarying"], menu_labels: ["Unchanged", "Set Uniform", "Calculate Uniform", "Calculate Varying"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "mass", label: "Mass", num_components: 1, default_value: [0.1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ domass != on }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setTags({"units": "kg1"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "density", label: "Density", num_components: 1, default_value: [0.1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ domass != calcuniform domass != calcvarying }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"units": "kg1m-2"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "scaledensitymode", label: "scaledensitymode", menu_items: ["none", "attrib"], menu_labels: ["No Scaling", "Scale by Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ domass != calcvarying }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ domass != calcuniform domass != calcvarying }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "scaledensityattrib", label: "Density Attribute", num_components: 1, default_value: ["density"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ scaledensitymode != attrib } { domass != calcvarying }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "dothickness", label: "Thickness", menu_items: ["off", "on", "calcuniform", "calcvarying"], menu_labels: ["Unchanged", "Set Uniform", "Calculate Uniform", "Calculate Varying"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "thickness", label: "Thickness", num_components: 1, default_value: [0.01], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dothickness != on }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setTags({"units": "m1"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "thicknessscale", label: "Edge Length Scale", num_components: 1, default_value: [0.25], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ dothickness != calcuniform dothickness != calcvarying }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "scalethicknessmode", label: "scalethicknessmode", menu_items: ["none", "attrib"], menu_labels: ["No Scaling", "Scale by Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dothickness != calcvarying }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ dothickness != calcuniform dothickness != calcvarying }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "scalethicknessattrib", label: "Thickness Attribute", num_components: 1, default_value: ["thickness"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ scalethicknessmode != attrib } { dothickness != calcvarying }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "vizthickness", label: "Visualize Thickness", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ dothickness == off }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.SeparatorParmTemplate({name: "sepparm2"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "piecemode", label: "Define Pieces", menu_items: ["attribute", "connectivity"], menu_labels: ["From Attribute", "From Connectivity"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype != pressure constrainttype != glue constrainttype != struts constrainttype != shapematch dothickness != calcuniform domass != calcuniform }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "pieceattrib", label: "Piece Attrib", num_components: 1, default_value: ["class"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ piecemode == connectivity }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "dolayer", label: "Layer", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != cloth constrainttype != hair constrainttype != string }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "layer", label: "Layer", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dolayer == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != cloth constrainttype != hair constrainttype != string }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "computeorient", label: "Compute Missing Orientation", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != hair }");
			hou_parm_template2.setTags({"export_disable": "1"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "orientframe", label: "Rest Orientation Frame", num_components: 1, default_value: [1], min: 0, max: 100, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ computeorient == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != hair }");
			hou_parm_template2.setTags({"export_disable": "1"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "showguide", label: "Show Guide Geometry", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dothickness != off vizthickness == 1 }");
			hou_parm_template2.setTags({"export_disable": "1"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder7", label: "Target Geometry", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template.setTabConditional(hou.parmCondType.HideWhen, "{ constrainttype != attach constrainttype != stitch constrainttype != weld constrainttype != glue constrainttype != struts }");
			hou_parm_template2 = new hou.MenuParmTemplate({name: "targetgrouptype", label: "Target Group Type", menu_items: ["prims", "points", "edges"], menu_labels: ["Primitives", "Points", "Edges"], default_value: 0, default_expression: "guess", default_expression_language: hou.scriptLanguage.Hscript, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "targetgroup", label: "Target Group", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "set ctype = `chs(\"constrainttype\")`\nif (\"$ctype\" == \"attach\")\n    opmenu -l -a group_attach_src basegroup\nelse if (\"$ctype\" == \"stitch\")\n    opmenu -l -a group_target_src basegroup\nelse    \n    opmenu -l -a group_constraint_src basegroup\nendif", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.StringToggle});
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "script_action": "import soputils\nctype = kwargs['node'].parm('constrainttype').evalAsString()\nkwargs['geometrytype'] = kwargs['node'].parmTuple('targetgrouptype')\nkwargs['inputindex'] = 2 if ctype == 'attach' else 0\nkwargs['ordered'] = 1\nsoputils.selectGroupParm(kwargs)", "script_action_help": "Select geometry from an available viewport.", "script_action_icon": "BUTTONS_reselect"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "targetpath", label: "Target Path", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.NodeReference, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != attach }");
			hou_parm_template2.setTags({"opfilter": "!!SOP!!", "oprelative": "."});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "doattachframe", label: "doattachframe", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != attach }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"export_disable": "1"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "attachframe", label: "Attach Frame", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ doattachframe == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != attach }");
			hou_parm_template2.setTags({"export_disable": "1"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder9", label: "Drag", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template.setTabConditional(hou.parmCondType.HideWhen, "{ constrainttype != cloth constrainttype != hair constrainttype != string }");
			hou_parm_template2 = new hou.FloatParmTemplate({name: "dragnormal", label: "Normal Drag", num_components: 1, default_value: [10], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "dragtangent", label: "Tangent Drag", num_components: 1, default_value: [0.1], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder3", label: "Pin to Animation", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template.setTabConditional(hou.parmCondType.HideWhen, "{ constrainttype != cloth constrainttype != hair constrainttype != string constrainttype != pin }");
			hou_parm_template2 = new hou.StringParmTemplate({name: "pingroup", label: "Pin Points", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a group_pin_src basegroup", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.StringToggle});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype == pin }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "script_action": "import soputils\nkwargs['geometrytype'] = hou.geometryType.Points\nkwargs['inputindex'] = 0\nsoputils.selectGroupParm(kwargs)\n", "script_action_help": "Select geometry from an available viewport.", "script_action_icon": "BUTTONS_reselect"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "pintype", label: "Pin Type", menu_items: ["hard", "stopped", "soft"], menu_labels: ["Permanent", "Stopped", "Soft"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "pinrotation", label: "Orientation Pin Type", menu_items: ["none", "same", "soft"], menu_labels: ["None", "Same as Position", "Soft"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != hair constrainttype != pin }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "matchanimation", label: "Match Animation", default_value: false});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder2", label: "Closest Point", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != attach constrainttype != stitch constrainttype != weld }");
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "useclosestpt", label: "Constrain to Closest Point", default_value: true});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "useclosestprim", label: "Use Closest Location on Primitive", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ useclosestpt == 0 } { constrainttype == weld }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "maxdistcheck", label: "maxdistcheck", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ useclosestpt == 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "maxdist", label: "Max Distance", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ maxdistcheck == 0 } { useclosestpt == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "dosliding", label: "dosliding", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ useclosestpt == 0 } { useclosestprim == 0 } { targetgrouptype != prims }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != attach constrainttype != stitch }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "slidingrate", label: "Sliding Rate", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dosliding == 0 } { useclosestpt == 0 } { useclosestprim == 0 } { targetgrouptype != prims }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != attach constrainttype != stitch }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "slidingscalemode", label: "Label", menu_items: ["none", "attrib"], menu_labels: ["No Scaling", "Scale by Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dosliding == 0 } { useclosestpt == 0 } { useclosestprim == 0 } { targetgrouptype != prims }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != attach constrainttype != stitch }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "slidingattrib", label: "Sliding Attribute", num_components: 1, default_value: ["slidingscale"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dosliding == 0 } { useclosestpt == 0 } { useclosestprim == 0 } { targetgrouptype != prims }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ slidingscalemode != attrib } { constrainttype != attach constrainttype != stitch }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder6", label: "Glue Search", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template.setTabConditional(hou.parmCondType.HideWhen, "{ constrainttype != glue }");
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "glue_usecluster", label: "Label", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "glue_clusterattrib", label: "Cluster Attrib", num_components: 1, default_value: ["cluster"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ glue_usecluster == 0 }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "glue_minradius", label: "Min Search Dist", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "glue_radius", label: "Max Search Dist", num_components: 1, default_value: [0.1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "glue_numpt", label: "Max Search Points", num_components: 1, default_value: [10], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "glue_searchpref", label: "Search Preference", menu_items: ["nearest", "farthest"], menu_labels: ["Nearest", "Farthest"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "glue_constraintsperpt", label: "Constraints Per Point", num_components: 1, default_value: [1], min: 1, max: 3, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "glue_detach_chance", label: "Detach Object Chance", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "glue_point_chance", label: "Detach Point Chance", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "glue_seed", label: "Seed", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder10", label: "Strut Search", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template.setTabConditional(hou.parmCondType.HideWhen, "{ constrainttype != struts }");
			hou_parm_template2 = new hou.FloatParmTemplate({name: "strut_maxlen", label: "Max Strut Length", num_components: 1, default_value: [100], min: 0, max: 100, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "strut_usedirattrib", label: "Direction Attribute", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "strut_dirattrib", label: "Direction Attribute", num_components: 1, default_value: ["N"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ strut_usedirattrib == 0 }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "strut_invertnormal", label: "Invert Normals", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "strut_testnormals", label: "Test Normals", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "strut_jitter", label: "Direction Jitter", num_components: 1, default_value: [0.1], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "strut_constraintsperpt", label: "Constraints Per Point", num_components: 1, default_value: [1], min: 1, max: 3, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "strut_point_chance", label: "Detach Point Chance", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "strut_seed", label: "Seed", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "strut_rayoff", label: "Ray Offset", num_components: 1, default_value: [0.01], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder0", label: "Stretch", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template.setTabConditional(hou.parmCondType.DisableWhen, "{ constrainttype == pin pintype != soft }");
			hou_parm_template.setTabConditional(hou.parmCondType.HideWhen, "{ constrainttype != distance constrainttype != cloth constrainttype != hair constrainttype != string constrainttype != pin constrainttype != attach constrainttype != stitch constrainttype != pressure constrainttype != tetvolume constrainttype != glue constrainttype != struts constrainttype != tetfiber constrainttype != tristretch constrainttype != tetstretch constrainttype != shapematch }");
			hou_parm_template2 = new hou.FloatParmTemplate({name: "stretchstiffness", label: "Stiffness", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "stretchstiffnessexp", label: "   ×", menu_items: ["10", "9", "8", "7", "6", "5", "4", "3", "2", "1", "0", "-1", "-2", "-3", "-4", "-5", "-6", "-7", "-8", "-9", "-10"], menu_labels: ["1e+10", "1e+9", "1e+8", "1e+7", "1 000 000", "100 000", "10 000", "1 000", "100", "10", "1", "0.1", "0.01", "0.001", "0.000 1", "0.000 01", "0.000 001", "1e-7", "1e-8", "1e-9", "1e-10"], default_value: 10, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: true, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "stretchstiffnessscalemode", label: "stretchstiffnessscalemode", menu_items: ["none", "attrib", "value", "attribvalue"], menu_labels: ["No Scaling", "Scale by Attribute", "Scale by Value", "Scale by Both"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.hideLabel(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "stretchstiffnessattrib", label: "Stiffness Attribute", num_components: 1, default_value: ["stretchstiffness"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ stretchstiffnessscalemode != attrib stretchstiffnessscalemode != attribvalue }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ stretchstiffnessscalemode == none }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "stretchstiffnessscale", label: "Scale", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ stretchstiffnessscalemode != value stretchstiffnessscalemode != attribvalue }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ stretchstiffnessscalemode == none }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "stretchdampingratio", label: "Damping Ratio", num_components: 1, default_value: [0.001], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Logarithmic, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "stretchdampingscalemode", label: "stretchdampingscalemode", menu_items: ["none", "attrib", "value", "attribvalue"], menu_labels: ["No Scaling", "Scale by Attribute", "Scale by Value", "Scale by Both"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.hideLabel(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "stretchdampingattrib", label: "Damping Attribute", num_components: 1, default_value: ["stretchdamping"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ stretchdampingscalemode != attrib stretchdampingscalemode != attribvalue }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ stretchdampingscalemode == none }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "stretchdampingscale", label: "Scale", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ stretchdampingscalemode != value stretchdampingscalemode != attribvalue }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ stretchdampingscalemode == none }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "stretchrestscale", label: "Rest Length Scale", num_components: 1, default_value: [1], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype == tetfiber } { constrainttype == shapematch }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "docompress", label: "Enable Compression Settings", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype == hair } { constrainttype == tetfiber } { constrainttype == shapematch }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "compressstiffness", label: "Compression Stiffness", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ docompress == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype == hair } { constrainttype == tetfiber } { constrainttype == shapematch }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "compressstiffnessexp", label: "   ×", menu_items: ["10", "9", "8", "7", "6", "5", "4", "3", "2", "1", "0", "-1", "-2", "-3", "-4", "-5", "-6", "-7", "-8", "-9", "-10"], menu_labels: ["1e+10", "1e+9", "1e+8", "1e+7", "1 000 000", "100 000", "10 000", "1 000", "100", "10", "1", "0.1", "0.01", "0.001", "0.000 1", "0.000 01", "0.000 001", "1e-7", "1e-8", "1e-9", "1e-10"], default_value: 3, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: true, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ docompress == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype == hair } { constrainttype == tetfiber } { constrainttype == shapematch }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "compressstiffnessscalemode", label: "compressstiffnessscalemode", menu_items: ["none", "attrib", "value", "attribvalue"], menu_labels: ["No Scaling", "Scale by Attribute", "Scale by Value", "Scale by Both"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ docompress == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype == hair } { constrainttype == tetfiber } { constrainttype == shapematch }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "compressstiffnessattrib", label: "Compression Stiffness Attribute", num_components: 1, default_value: ["compressstiffness"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ docompress == 0 } { compressstiffnessscalemode != attrib compressstiffnessscalemode != attribvalue }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ compressstiffnessscalemode == none }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "compressstiffnessscale", label: "Scale", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ docompress == 0 } { compressstiffnessscalemode != value compressstiffnessscalemode != attribvalue }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ compressstiffnessscalemode == none }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "dotangent", label: "Enable Tangent Settings", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ useclosestpt == 0 } { useclosestprim == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != attach }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "tangentstiffness", label: "Tangent Stiffness", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dotangent == 0 } { useclosestpt == 0 } { useclosestprim == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != attach }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "tangentstiffnessexp", label: "   ×", menu_items: ["10", "9", "8", "7", "6", "5", "4", "3", "2", "1", "0", "-1", "-2", "-3", "-4", "-5", "-6", "-7", "-8", "-9", "-10"], menu_labels: ["1e+10", "1e+9", "1e+8", "1e+7", "1 000 000", "100 000", "10 000", "1 000", "100", "10", "1", "0.1", "0.01", "0.001", "0.000 1", "0.000 01", "0.000 001", "1e-7", "1e-8", "1e-9", "1e-10"], default_value: 3, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: true, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dotangent == 0 } { useclosestpt == 0 } { useclosestprim == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != attach }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "dostretchstiffnessdropoff", label: "dostretchstiffnessfalloff", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype == tetfiber } { constrainttype == tristretch } { constrainttype == tetstretch } { constrainttype == shapematch }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "stretchstiffnessdropoff", label: "Stiffness Dropoff", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dostretchstiffnessdropoff == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype == tetfiber } { constrainttype == tristretch } { constrainttype == tetstretch } { constrainttype == shapematch }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "stretchstiffnessdropoffdir", label: "stretchstiffnessfalloffdir", menu_items: ["increasing", "decreasing"], menu_labels: ["Increasing", "Decreasing"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dostretchstiffnessdropoff == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype == tetfiber } { constrainttype == tristretch } { constrainttype == tetstretch } { constrainttype == shapematch }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "dostretchstiffnessdropoffmin", label: "dostretchstiffnessdropoffmin", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dostretchstiffnessdropoff == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ dostretchstiffnessdropoff == 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "stretchstiffnessdropoffmin", label: "Min Stiffness", num_components: 1, default_value: [0], min: 0, max: 90, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dostretchstiffnessdropoffmin == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ dostretchstiffnessdropoff == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "stretchanisotropy", label: "Enable Warp/Weft", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ stretchtype != distance }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != cloth }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder12", label: "Anisotropy", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template2.setTabConditional(hou.parmCondType.DisableWhen, "{ constrainttype != cloth } { stretchtype != distance }");
			hou_parm_template2.setTabConditional(hou.parmCondType.HideWhen, "{ stretchanisotropy == 0 } { constrainttype != cloth }");
			let hou_parm_template3 = new hou.FloatParmTemplate({name: "stretchwarpscale", label: "Warp Scale", num_components: 1, default_value: [1], min: 0.1, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "stretchweftscale", label: "Weft Scale", num_components: 1, default_value: [1], min: 0.1, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "stretchshearscale", label: "Shear Scale", num_components: 1, default_value: [1], min: 0.1, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "materialuv", label: "Material UV", num_components: 1, default_value: ["materialuv"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "dostretchvelblend", label: "dostretchvelblend", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != attach constrainttype != pin }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "stretchvelblend", label: "Velocity Blend", num_components: 1, default_value: [0.1], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dostretchvelblend == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != attach constrainttype != pin }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "stretchvelblendscalemode", label: "Label", menu_items: ["none", "attrib"], menu_labels: ["No Scaling", "Scale by Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dostretchvelblend == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != attach constrainttype != pin }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "stretchvelblendattrib", label: "Velocity Blend Attribute", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dostretchvelblend == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != attach constrainttype != pin } { stretchvelblendscalemode != attrib }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "stretchplasticity", label: "Enable Plasticity", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype == tetfiber }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder4", label: "Plasticity", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template2.setTabConditional(hou.parmCondType.HideWhen, "{ stretchplasticity == 0 } { constrainttype == tetfiber }");
			hou_parm_template3 = new hou.FloatParmTemplate({name: "stretchplasticthreshold", label: "Threshold", num_components: 1, default_value: [0.1], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"units": ""});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "stretchplasticthresholdscalemode", label: "stretchplasticthresholdscalemode", menu_items: ["none", "attrib", "value", "attribvalue"], menu_labels: ["No Scaling", "Scale by Attribute", "Scale by Value", "Scale by Both"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "stretchplasticthresholdattrib", label: "Threshold Attribute", num_components: 1, default_value: ["stretchplasticthreshold"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ stretchplasticthresholdscalemode != attrib stretchplasticthresholdscalemode != attribvalue }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ stretchplasticthresholdscalemode == none }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "stretchplasticthresholdscale", label: "Scale", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ stretchplasticthresholdscalemode != value stretchplasticthresholdscalemode != attribvalue }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ stretchplasticthresholdscalemode == none }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "stretchplasticthresholdratio", label: "Ratio of Current Rest Length", default_value: true});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ stretchplasticity == 0 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "stretchplasticrate", label: "Rate", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"units": ""});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "stretchplasticratescalemode", label: "stretchplasticratescalemode", menu_items: ["none", "attrib", "value", "attribvalue"], menu_labels: ["No Scaling", "Scale by Attribute", "Scale by Value", "Scale by Both"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "stretchplasticrateattrib", label: "Rate Attribute", num_components: 1, default_value: ["stretchplasticrate"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ stretchplasticratescalemode != attrib stretchplasticratescalemode != attribvalue }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ stretchplasticratescalemode == none }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "stretchplasticratescale", label: "Scale", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ stretchplasticratescalemode != value stretchplasticratescalemode != attribvalue }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ stretchplasticratescalemode == none }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "stretchplastichardening", label: "Hardening", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"units": ""});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "stretchplastichardeningscalemode", label: "stretchplastichardeningmode", menu_items: ["none", "attrib", "value", "attribvalue"], menu_labels: ["No Scaling", "Scale by Attribute", "Scale by Value", "Scale by Both"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.hideLabel(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "stretchplastichardeningattrib", label: "Hardening Attribute", num_components: 1, default_value: ["stretchplastichardening"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ stretchplastichardeningscalemode != attrib stretchplastichardeningscalemode != attribvalue }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ stretchplastichardeningscalemode == none }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "stretchplastichardeningscale", label: "Scale", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ stretchplastichardeningscalemode != value stretchplastichardeningscalemode != attribvalue }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ stretchplastichardeningscalemode == none }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "dostretchgrp", label: "dostretchgrp", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "stretchgrp", label: "Output Group", num_components: 1, default_value: ["stretch"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dostretchgrp == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "keepuniquestretch", label: "Keep Unique within Output Group", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dostretchgrp == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder1", label: "Bend", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template.setTabConditional(hou.parmCondType.DisableWhen, "{ constrainttype == pin pintype != soft pinrotation != soft } { constrainttype == pin pintype == soft pinrotation == none }");
			hou_parm_template.setTabConditional(hou.parmCondType.HideWhen, "{ constrainttype != bend constrainttype != cloth constrainttype != hair constrainttype != string constrainttype != pin constrainttype != weld }");
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "bendweld", label: "Add Bend across Welds", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != weld }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "bendcopystiffness", label: "Copy Neighboring Stiffness", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ bendweld == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != weld }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "bendstiffness", label: "Stiffness", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype == weld bendweld == 0 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "bendstiffnessexp", label: "   ×", menu_items: ["10", "9", "8", "7", "6", "5", "4", "3", "2", "1", "0", "-1", "-2", "-3", "-4", "-5", "-6", "-7", "-8", "-9", "-10"], menu_labels: ["1e+10", "1e+9", "1e+8", "1e+7", "1 000 000", "100 000", "10 000", "1 000", "100", "10", "1", "0.1", "0.01", "0.001", "0.000 1", "0.000 01", "0.000 001", "1e-7", "1e-8", "1e-9", "1e-10"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: true, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype == weld bendweld == 0 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "bendstiffnessscalemode", label: "bendstiffnessscalemode", menu_items: ["none", "attrib", "value", "attribvalue"], menu_labels: ["No Scaling", "Scale by Attribute", "Scale by Value", "Scale by Both"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype == weld bendweld == 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "bendstiffnessattrib", label: "Stiffness Attribute", num_components: 1, default_value: ["bendstiffness"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ bendstiffnessscalemode != attrib bendstiffnessscalemode != attribvalue } { constrainttype == weld bendweld == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ bendstiffnessscalemode == none }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "bendstiffnessscale", label: "Scale", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ bendstiffnessscalemode != value bendstiffnessscalemode != attribvalue } { constrainttype == weld bendweld == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ bendstiffnessscalemode == none }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "benddampingratio", label: "Damping Ratio", num_components: 1, default_value: [0.01], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Logarithmic, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype == weld bendweld == 0 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "benddampingscalemode", label: "benddampingscalemode", menu_items: ["none", "attrib", "value", "attribvalue"], menu_labels: ["No Scaling", "Scale by Attribute", "Scale by Value", "Scale by Both"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype == weld bendweld == 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "benddampingattrib", label: "Damping Attribute", num_components: 1, default_value: ["benddamping"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ benddampingscalemode != attrib benddampingscalemode != attribvalue } { constrainttype == weld bendweld == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ benddampingscalemode == none }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "benddampingscale", label: "Scale", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ benddampingscalemode != value benddampingscalemode != attribvalue } { constrainttype == weld bendweld == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ benddampingscalemode == none }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "bendrestscale", label: "Rest Angle Scale", num_components: 1, default_value: [1], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype == weld bendweld == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "dobendstiffnessdropoff", label: "dobendstiffnessfalloff", default_value: false});
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "bendstiffnessdropoff", label: "Stiffness Dropoff", num_components: 1, default_value: [0], min: 0, max: 90, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dobendstiffnessdropoff == 0 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "bendstiffnessdropoffdir", label: "bendstiffnessfalloffdir", menu_items: ["increasing", "decreasing"], menu_labels: ["Increasing", "Decreasing"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dobendstiffnessdropoff == 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "dobendstiffnessdropoffmin", label: "dobendstiffnessdropoffmin", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dobendstiffnessdropoff == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ dobendstiffnessdropoff == 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "bendstiffnessdropoffmin", label: "Min Stiffness", num_components: 1, default_value: [0], min: 0, max: 90, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dobendstiffnessdropoffmin == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ dobendstiffnessdropoff == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "domaxbranchangle", label: "domaxbranchangle", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != hair constrainttype != string }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "maxbranchangle", label: "Max Branch Angle", num_components: 1, default_value: [10], min: 0, max: 180, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ domaxbranchangle == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != hair constrainttype != string }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "bendplasticity", label: "Enable Plasticity", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype == weld bendweld == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder5", label: "Plasticity", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template2.setTabConditional(hou.parmCondType.DisableWhen, "{ constrainttype == weld bendweld == 0 }");
			hou_parm_template2.setTabConditional(hou.parmCondType.HideWhen, "{ bendplasticity == 0 }");
			hou_parm_template3 = new hou.FloatParmTemplate({name: "bendplasticthreshold", label: "Threshold", num_components: 1, default_value: [10], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"units": ""});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "bendplasticthresholdscalemode", label: "bendplasticthresholdscalemode", menu_items: ["none", "attrib", "value", "attribvalue"], menu_labels: ["No Scaling", "Scale by Attribute", "Scale by Value", "Scale by Both"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"export_disable": "1"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "bendplasticthresholdattrib", label: "Threshold Attribute", num_components: 1, default_value: ["bendplasticthreshold"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ bendplasticthresholdscalemode != attrib bendplasticthresholdscalemode != attribvalue }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ bendplasticthresholdscalemode == none }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "bendplasticthresholdscale", label: "Scale", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ bendplasticthresholdscalemode != value bendplasticthresholdscalemode != attribvalue }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ bendplasticthresholdscalemode == none }");
			hou_parm_template3.setTags({"export_disable": "1"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "bendplasticrate", label: "Rate", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"units": ""});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "bendplasticratescalemode", label: "bendplasticratescalemode", menu_items: ["none", "attrib", "value", "attribvalue"], menu_labels: ["No Scaling", "Scale by Attribute", "Scale by Value", "Scale by Both"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"export_disable": "1"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "bendplasticrateattrib", label: "Rate Attribute", num_components: 1, default_value: ["bendplasticrate"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ bendplasticratescalemode != attrib bendplasticratescalemode != attribvalue }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ bendplasticratescalemode == none }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "bendplasticratescale", label: "Scale", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ bendplasticratescalemode != value bendplasticratescalemode != attribvalue }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ bendplasticratescalemode == none }");
			hou_parm_template3.setTags({"export_disable": "1"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "bendplastichardening", label: "Hardening", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"units": ""});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "bendplastichardeningscalemode", label: "bendplastichardeningmode", menu_items: ["none", "attrib", "value", "attribvalue"], menu_labels: ["No Scaling", "Scale by Attribute", "Scale by Value", "Scale by Both"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"export_disable": "1"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "bendplastichardeningattrib", label: "Hardening Attribute", num_components: 1, default_value: ["bendplastichardening"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ bendplastichardeningscalemode != attrib bendplastichardeningscalemode != attribvalue }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ bendplastichardeningscalemode == none }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "bendplastichardeningscale", label: "Scale", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ bendplastichardeningscalemode != value bendplastichardeningscalemode != attribvalue }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ bendplastichardeningscalemode == none }");
			hou_parm_template3.setTags({"export_disable": "1"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "dobendgrp", label: "dobendgrp", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ constrainttype == weld bendweld == 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "bendgrp", label: "Output Group", num_components: 1, default_value: ["bend"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dobendgrp == 0 } { constrainttype == weld bendweld == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "keepuniquebend", label: "Keep Unique within Output Group", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dobendgrp == 0 } { constrainttype == weld bendweld == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder11", label: "Breaking", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template.setTabConditional(hou.parmCondType.DisableWhen, "{ constrainttype == pin pintype == hard }");
			hou_parm_template.setTabConditional(hou.parmCondType.HideWhen, "{ constrainttype != hair constrainttype != pin constrainttype != attach constrainttype != stitch constrainttype != weld constrainttype != glue constrainttype != pressure }");
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "dobreaking", label: "Enable Breaking", default_value: false});
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "breakthreshold", label: "Threshold", num_components: 1, default_value: [0.1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dobreaking == 0 }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template2.setTags({"units": ""});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "breakscalemode", label: "breakscalemode", menu_items: ["none", "attrib", "value", "attribvalue"], menu_labels: ["No Scaling", "Scale by Attribute", "Scale by Value", "Scale by Both"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dobreaking == 0 }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "breakscaleattrib", label: "Threshold Attribute", num_components: 1, default_value: ["breakthresholdscale"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ breakscalemode != attrib breakscalemode != attribvalue } { dobreaking == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ breakscalemode == none }");
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "breakscale", label: "Scale", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ breakscalemode != value breakscalemode != attribvalue } { breaking == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ breakscalemode == none }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "breaktypeall", label: "Type", menu_items: ["none", "stretchstress", "bendstress", "stretchdistance", "stretchratio", "bendangle"], menu_labels: ["None", "Stretch Stress", "Bend Stress", "Stretch Distance", "Stretch Ratio", "Bend Angle"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dobreaking == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != hair constrainttype != weld }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "breaktypestretch", label: "Type", menu_items: ["none", "stretchstress", "stretchdistance", "stretchratio"], menu_labels: ["None", "Stretch Stress", "Stretch Distance", "Stretch Ratio"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ dobreaking == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ constrainttype != stitch constrainttype != attach constrainttype != pin constrainttype != glue constrainttype != pressure }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder13", label: "Attributes", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template2 = new hou.MenuParmTemplate({name: "attribpromote", label: "Promotion Method", menu_items: ["max", "min", "mean", "mult", "source", "target"], menu_labels: ["Maximum", "Minimum", "Average", "Multiply", "Use Source", "Use Target"], default_value: 2, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "tag", label: "Tag", num_components: 1, default_value: ["$OS"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "statictopology", label: "Static Topology", default_value: false});
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			
            this.parmTemplateGroup = hou_parm_template_group;
            this.parmTemplateGroup.linkNode(this);
        }
    }
    hou.registerType('SOP/Dynamics/Vellum/vellumconstraints',_hnt_SOP_vellumconstraints)
    return _hnt_SOP_vellumconstraints
}
        