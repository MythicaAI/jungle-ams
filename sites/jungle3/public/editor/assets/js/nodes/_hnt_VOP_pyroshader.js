
export default function (hou) {
    class _hnt_VOP_pyroshader extends hou.extend(hou._HoudiniBase).with(hou._SubgraphMixin, hou._MultiInputMixin) {
        static is_root = false;
        static id = 'VOP/Shaders/pyroshader';
        static category = '/VOP';
        static houdiniType = 'pyroshader';
        static title = 'Pyro Shader - Classic';
        static icon = '/editor/assets/imgs/nodes/_hnt_VOP_pyroshader.svg';
        constructor() {
            super();
            this.flags['houdini_type'] = this.__proto__.constructor.houdiniType;
            
            const inputs = ['VOP'];
            const outputs

            for(var i=0;i<inputs.length;i++) this.addInput(''+i,inputs[i]);        
            for(var j=0;j<outputs.length;j++) this.addOutput(''+j,outputs[j]);
        }
        parmTemplatesInit() {
            let hou_parm_template_group = new hou.ParmTemplateGroup();
			this.parmTemplateGroup = hou_parm_template_group;
			let hou_parm_template = new hou.FolderParmTemplate({name: "folder2_5", label: "General", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			let hou_parm_template2 = new hou.FolderParmTemplate({name: "folder7", label: "Smoke", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			let hou_parm_template3 = new hou.FloatParmTemplate({name: "s_densityscale", label: "Density Scale", num_components: 1, default_value: [1], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "s_int", label: "Smoke Brightness", num_components: 1, default_value: [1], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "s_color", label: "Smoke Color", num_components: 3, default_value: [0.2, 0.2, 0.2], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "s_tintwithcd", label: "Tint Smoke Color with Cd", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "shade_phase", label: "Scattering Phase", num_components: 1, default_value: [0], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder2_3_5", label: "Fire", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "fi_enable", label: "Enable Emission", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fi_int", label: "Intensity Scale", num_components: 1, default_value: [2], min: 0, max: 5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ fi_enable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fc_int", label: "Temperature Scale", num_components: 1, default_value: [0.2], min: 0, max: 5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ fi_enable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "fc_colormode", label: "Color Mode", num_components: 1, default_value: [2], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["constant", "ramp", "physical", "planck", "colorfield"], menu_labels: ["Constant", "Temperature to Color Ramp", "Temperature to Physical (Black-Body) Color", "Temperature to Planck Color", "Color Field"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ fi_enable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fc_constantcolor", label: "Constant Color", num_components: 3, default_value: [1, 1, 1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ fi_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fc_colormode != 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fc_rampmin", label: "Input Range Min", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ fi_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fc_colormode != 1 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fc_rampmax", label: "Max", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ fi_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fc_colormode != 1 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.RampParmTemplate({name: "fc_colorramp", label: "Ramp", ramp_parm_type: hou.rampParmType.Color, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ fi_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fc_colormode != 1 }");
			hou_parm_template3.setTags({"parmvop": "1", "rampbasis_var": "fc_colorramp_the_basis_strings", "rampbasisdefault": "linear", "rampcolordefault": "1pos ( 0 ) 1c ( 0 0 0 ) 1interp ( linear ) 2pos ( 1 ) 2c ( 1 1 1 ) 2interp ( linear )", "rampcolortype": "rgb", "rampkeys_var": "fc_colorramp_the_key_positions", "rampshowcontrolsdefault": "1", "rampvalues_var": "fc_colorramp_the_key_values", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fc_bbtemp0", label: "Temperature at 0 (K)", num_components: 1, default_value: [0], min: 0, max: 1000, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ fi_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fc_colormode != 2 fc_colormode != 3 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fc_bbtemp", label: "Temperature at 1 (K)", num_components: 1, default_value: [5000], min: 0, max: 15000, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ fi_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fc_colormode != 2 fc_colormode != 3 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "fc_bbdotm", label: "Tone Map", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fc_colormode != 2 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fc_bbadapt", label: "Adaptation", num_components: 1, default_value: [0.15], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ fi_enable == 0 } { fc_bbdotm == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fc_colormode != 2 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fc_bbburn", label: "Burn", num_components: 1, default_value: [0], min: null, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ fi_enable == 0 } { fc_bbdotm == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fc_colormode != 2 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "fc3_volumename", label: "Color Volume Name", num_components: 1, default_value: ["Cd"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ fi_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fc_colormode != 4 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder9", label: "Shadows", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.FloatParmTemplate({name: "s_shadowint", label: "Shadow Density", num_components: 1, default_value: [1], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ shade_doshadows == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "s_shadowclr", label: "Shadow Color", num_components: 3, default_value: [1, 1, 1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ shade_doshadows == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder26", label: "Filtering", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.StringParmTemplate({name: "ftype", label: "Filter", num_components: 1, default_value: ["point"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["point", "box", "gauss"], menu_labels: ["Point", "Box", "Gaussian"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fscale", label: "Scale", num_components: 1, default_value: [1], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ ftype == point }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder2_5_1", label: "Smoke Field", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2 = new hou.StringParmTemplate({name: "s_volumename", label: "Density Volume", num_components: 1, default_value: ["density"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder27", label: "Shape", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "s_fitenable", label: "Fit to Range (Unclamped)", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ name == \\\"\\\" }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "s_fitsrcmin", label: "Source Range", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ name == \\\"\\\" }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ s_fitenable == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "s_fitsrcmax", label: "Source Max", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ name == \\\"\\\" }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ s_fitenable == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "s_fitdestmin", label: "Target Range", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ name == \\\"\\\" }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ s_fitenable == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "s_fitdestmax", label: "Target Max", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ name == \\\"\\\" }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ s_fitenable == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "s_rampenable", label: "Use Lookup Ramp", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ name == \\\"\\\" }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "s_rampextl", label: "Ramp Boundaries", num_components: 1, default_value: ["hold"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["hold", "cycle", "accum", "mirror", "slope"], menu_labels: ["Hold", "Cycle", "Cycle-Accumulate", "Mirror", "Slope"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ s_rampenable == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "s_rampextr", label: "Right", num_components: 1, default_value: ["hold"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["hold", "cycle", "accum", "mirror", "slope"], menu_labels: ["Hold", "Cycle", "Cycle-Accumulate", "Mirror", "Slope"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ s_rampenable == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.RampParmTemplate({name: "s_ramp", label: "Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ s_rampenable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "rampbasis_var": "s_ramp_the_basis_strings", "rampbasisdefault": "linear", "rampfloatdefault": "1pos ( 0 ) 1value ( 0 ) 1interp ( linear ) 2pos ( 1 ) 2value ( 1 ) 2interp ( linear )", "rampkeys_var": "s_ramp_the_key_positions", "rampshowcontrolsdefault": "1", "rampvalues_var": "s_ramp_the_key_values", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "s_contourenable", label: "Contour", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ name == \\\"\\\" }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "s_contourwidth", label: "Contour Width", num_components: 1, default_value: [0.02], min: 0, max: 0.1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ s_contourenable == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "s_contoursharp", label: "Sharpness", num_components: 1, default_value: [4], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ s_contourenable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "s_sclipenable", label: "Soft Clip", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "s_sclipstart", label: "Soft Clip Start", num_components: 1, default_value: [0.8], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ s_sclipenable == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "s_sclipsuppress", label: "  Suppress", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ s_sclipenable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "s_lowlimitenable", label: "Clamp at Lower Limit", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "s_lowlimit", label: "Clamp To Min", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ s_lowlimitenable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "s_highlimitenable", label: "Clamp at Upper Limit", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "s_highlimit", label: "Clamp To Max", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ s_highlimitenable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "s_amp", label: "Final Scale", num_components: 1, default_value: [1], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ name == \\\"\\\" }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder27_1", label: "Noise", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "s_noiseenable", label: "Enable", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "s_noisemode", label: "Mode", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["add", "multiply"], menu_labels: ["Offset (Field + Noise)", "Scale (Field * Noise)"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ s_noiseenable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "s_noisebasis", label: "Type", num_components: 1, default_value: ["simplex"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["sine", "perlin", "pperlin", "simplex", "sparse", "flow", "pflow", "worleyFA", "worleyFB", "alligator"], menu_labels: ["Sinusoid", "Perlin", "Periodic Perlin", "Simplex", "Sparse Convolution", "Perlin Flow", "Periodic Perlin Flow", "Worley Cellular F1", "Worley Cellular F2-F1", "Alligator"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ s_noiseenable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "s_noisefreq", label: "Frequency", num_components: 4, default_value: [5, 5, 5, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ s_noiseenable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "s_noiseoffset", label: "Offset", num_components: 4, default_value: [0, 0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ s_noiseenable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "s_noiseperiod", label: "Period", num_components: 4, default_value: [1, 1, 1, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ s_noiseenable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ s_noisebasis != pperlin s_noisebasis != pflow }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "folder28", label: "Fractal", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setTags({"group_type": "simple"});
			let hou_parm_template4 = new hou.StringParmTemplate({name: "s_noisefractal", label: "Fractal Type", num_components: 1, default_value: ["none"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["none", "fBm", "mfT", "hmfT"], menu_labels: ["None", "Standard (fBm)", "Terrain", "Hybrid Terrain"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ s_noiseenable == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "s_noiseoct", label: "Max Octaves", num_components: 1, default_value: [8], min: 0, max: 16, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ s_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ s_noisefractal == none }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "s_noiselac", label: "Lacunarity", num_components: 1, default_value: [2.01234], min: 0, max: 4, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ s_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ s_noisefractal == none }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "s_noiserough", label: "Roughness", num_components: 1, default_value: [0.5], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ s_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ s_noisefractal == none }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "folder29", label: "Warping", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setTags({"group_type": "simple"});
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "s_noisedolwarp", label: "Enable Lattice Warp", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ s_noiseenable == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "s_noiseaccuml", label: "Accumulate Lattice Warp", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ s_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ s_noisefractal == none } { s_noisedolwarp == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "s_noisedisp", label: "Lattice Warp", num_components: 1, default_value: [0], min: null, max: 0.5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ s_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ s_noisedolwarp == 0 }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "s_noisedispfreq", label: "Freq", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ s_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ s_noisedolwarp == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "s_noisedogwarp", label: "Enable Gradient Warp", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ s_noiseenable == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "s_noiseaccumg", label: "Accumulate Gradient Warp", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ s_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ s_noisefractal == none } { s_noisedogwarp == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "s_noisegflow", label: "Gradient Warp", num_components: 1, default_value: [0], min: null, max: 0.5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ s_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ s_noisedogwarp == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "s_noiseflowrot", label: "Flow Rotation", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ s_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ s_noisebasis != flow smokenoise_basis != pflow }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "folder5_1_3", label: "Output Correction", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setTags({"group_type": "simple"});
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "s_noisecc_dobias", label: "Bias", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ s_noiseenable == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "s_noisecc_bias", label: "Bias", num_components: 1, default_value: [0.5], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ s_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ s_noisecc_dobias == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "s_noisecc_dogain", label: "Gain", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ s_noiseenable == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "s_noisecc_gain", label: "Gain", num_components: 1, default_value: [0.5], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ s_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ s_noisecc_dogain == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "s_noisecc_inv", label: "Complement", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ s_noiseenable == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "s_noisecc_dorng", label: "Output Range (Clamped)", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ s_noiseenable == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "s_noisecc_rnglo", label: "Output Minimum", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ s_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ s_noisecc_dorng == 0 }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "s_noisecc_rnghi", label: "Maximum", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ s_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ s_noisecc_dorng == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "s_noisecc_amp", label: "Final Amplitude", num_components: 3, default_value: [1, 1, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ s_noiseenable == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder2_5_2", label: "Fire Intensity Field", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTabConditional(hou.parmCondType.DisableWhen, "{ fi_enable == 0 }");
			hou_parm_template2 = new hou.StringParmTemplate({name: "fi_volumename", label: "Fire Intensity Volume", num_components: 1, default_value: ["flame"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder30", label: "Shape", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "fi_fitenable", label: "Fit to Range (Unclamped)", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ name == \\\"\\\" }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fi_fitsrcmin", label: "Source Range", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ name == \\\"\\\" }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fi_fitenable == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fi_fitsrcmax", label: "Max", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ name == \\\"\\\" }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fi_fitenable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fi_fitdestmin", label: "Target Range", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ name == \\\"\\\" }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fi_fitenable == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fi_fitdestmax", label: "Max", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ name == \\\"\\\" }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fi_fitenable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "fi_rampenable", label: "Use Lookup Ramp", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ name == \\\"\\\" }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "fi_rampextl", label: "Ramp Boundaries", num_components: 1, default_value: ["hold"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["hold", "cycle", "accum", "mirror", "slope"], menu_labels: ["Hold", "Cycle", "Cycle-Accumulate", "Mirror", "Slope"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fi_rampenable == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "fi_rampextr", label: "Right", num_components: 1, default_value: ["hold"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["hold", "cycle", "accum", "mirror", "slope"], menu_labels: ["Hold", "Cycle", "Cycle-Accumulate", "Mirror", "Slope"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fi_rampenable == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.RampParmTemplate({name: "fi_ramp", label: "Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fi_rampenable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "rampbasis_var": "fi_ramp_the_basis_strings", "rampbasisdefault": "linear", "rampfloatdefault": "1pos ( 0 ) 1value ( 0 ) 1interp ( linear ) 2pos ( 1 ) 2value ( 1 ) 2interp ( linear )", "rampkeys_var": "fi_ramp_the_key_positions", "rampshowcontrolsdefault": "1", "rampvalues_var": "fi_ramp_the_key_values", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "fi_contourenable", label: "Contour", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ name == \\\"\\\" }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fi_contourwidth", label: "Contour Width", num_components: 1, default_value: [0.02], min: 0, max: 0.1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fi_contourenable == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fi_contoursharp", label: "Sharpness", num_components: 1, default_value: [4], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fi_contourenable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "fi_sclipenable", label: "Soft Clip", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fi_sclipstart", label: "Soft Clip Start", num_components: 1, default_value: [0.8], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fi_sclipenable == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fi_sclipsuppress", label: "  Suppress", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fi_sclipenable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "fi_lowlimitenable", label: "Clamp at Lower Limit", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fi_lowlimit", label: "Clamp To Min", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fi_lowlimitenable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "fi_highlimitenable", label: "Clamp at Upper Limit", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fi_highlimit", label: "Clamp To Max", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fi_highlimitenable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fi_amp", label: "Final Scale", num_components: 1, default_value: [1], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ name == \\\"\\\" }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder30_1", label: "Noise", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "fi_noiseenable", label: "Enable", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "fi_noisemode", label: "Mode", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["add", "multiply"], menu_labels: ["Offset (Field + Noise)", "Scale (Field * Noise)"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ fi_noiseenable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "fi_noisebasis", label: "Type", num_components: 1, default_value: ["simplex"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["sine", "perlin", "pperlin", "simplex", "sparse", "flow", "pflow", "worleyFA", "worleyFB", "alligator"], menu_labels: ["Sinusoid", "Perlin", "Periodic Perlin", "Simplex", "Sparse Convolution", "Perlin Flow", "Periodic Perlin Flow", "Worley Cellular F1", "Worley Cellular F2-F1", "Alligator"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ fi_noiseenable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fi_noisefreq", label: "Frequency", num_components: 4, default_value: [5, 5, 5, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ fi_noiseenable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fi_noiseoffset", label: "Offset", num_components: 4, default_value: [5, 0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ fi_noiseenable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fi_noiseperiod", label: "Period", num_components: 4, default_value: [1, 1, 1, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ fi_noiseenable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fi_noisebasis != pperlin fi_noisebasis != pflow }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "folder31", label: "Fractal", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setTags({"group_type": "simple"});
			hou_parm_template4 = new hou.StringParmTemplate({name: "fi_noisefractal", label: "Fractal Type", num_components: 1, default_value: ["none"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["none", "fBm", "mfT", "hmfT"], menu_labels: ["None", "Standard (fBm)", "Terrain", "Hybrid Terrain"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fi_noiseenable == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fi_noiseoct", label: "Max Octaves", num_components: 1, default_value: [8], min: 0, max: 16, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fi_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fi_noisefractal == none } { fi_noisefractal == none }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fi_noiselac", label: "Lacunarity", num_components: 1, default_value: [2.01234], min: 0, max: 4, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fi_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fi_noisefractal == none }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fi_noiserough", label: "Roughness", num_components: 1, default_value: [0.5], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fi_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fi_noisefractal == none }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "folder32", label: "Warping", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setTags({"group_type": "simple"});
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "fi_noisedolwarp", label: "Enable Lattice Warp", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fi_noiseenable == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "fi_noiseaccuml", label: "Accumulate Lattice Warp", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fi_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fi_noisedolwarp == 0 } { fi_noisefractal == none }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fi_noisedisp", label: "Lattice Warp", num_components: 1, default_value: [0], min: null, max: 0.5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fi_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fi_noisedolwarp == 0 }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fi_noisedispfreq", label: "Freq", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fi_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fi_noisedolwarp == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "fi_noisedogwarp", label: "Enable Gradient Warp", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fi_noiseenable == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "fi_noiseaccumg", label: "Accumulate Gradient Warp", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fi_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fi_noisedogwarp == 0 } { fi_noisefractal == none }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fi_noisegflow", label: "Gradient Warp", num_components: 1, default_value: [0], min: null, max: 0.5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fi_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fi_noisedogwarp == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fi_noiseflowrot", label: "Flow Rotation", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fi_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fi_noisebasis != flow fi_noisebasis != pflow }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "folder33", label: "Output Correction", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setTags({"group_type": "simple"});
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "fi_noisecc_dobias", label: "Bias", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fi_noiseenable == 0 } { docc == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fi_noisecc_bias", label: "Bias", num_components: 1, default_value: [0.5], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fi_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fi_noisecc_dobias == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "fi_noisecc_dogain", label: "Gain", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fi_noiseenable == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fi_noisecc_gain", label: "Gain", num_components: 1, default_value: [0.5], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fi_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fi_noisecc_dogain == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "fi_noisecc_inv", label: "Complement", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fi_noiseenable == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "fi_noisecc_dorng", label: "Output Range (Clamped)", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fi_noiseenable == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fi_noisecc_rnglo", label: "Output Minimum", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fi_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fi_noisecc_dorng == 0 }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fi_noisecc_rnghi", label: "Maximum", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fi_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fi_noisecc_dorng == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fi_noisecc_amp", label: "Final Amplitude", num_components: 3, default_value: [1, 1, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fi_noiseenable == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder2_5_3", label: "Fire Temperature Field", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTabConditional(hou.parmCondType.DisableWhen, "{ fc_colormode != 1 fc_colormode != 2 } { fi_enable == 0 }");
			hou_parm_template2 = new hou.StringParmTemplate({name: "fc_volumename", label: "Fire Temperature Volume", num_components: 1, default_value: ["temperature"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder7_4", label: "Shape", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "fc_fitenable", label: "Fit to Range (Unclamped)", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fc_fitsrcmin", label: "Source Range", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fc_fitenable == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fc_fitsrcmax", label: "Source Max", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fc_fitenable == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fc_fitdestmin", label: "Target Range", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fc_fitenable == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fc_fitdestmax", label: "Target Max", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fc_fitenable == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "fc_rampenable", label: "Use Lookup Ramp", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "fc_rampextl", label: "Ramp Boundaries", num_components: 1, default_value: ["hold"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["hold", "cycle", "accum", "mirror", "slope"], menu_labels: ["Hold", "Cycle", "Cycle-Accumulate", "Mirror", "Slope"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fc_rampenable == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "fc_rampextr", label: "Right", num_components: 1, default_value: ["hold"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["hold", "cycle", "accum", "mirror", "slope"], menu_labels: ["Hold", "Cycle", "Cycle-Accumulate", "Mirror", "Slope"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fc_rampenable == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.RampParmTemplate({name: "fc_ramp", label: "Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fc_rampenable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "rampbasis_var": "fc_ramp_the_basis_strings", "rampbasisdefault": "linear", "rampfloatdefault": "1pos ( 0 ) 1value ( 0 ) 1interp ( linear ) 2pos ( 1 ) 2value ( 1 ) 2interp ( linear )", "rampkeys_var": "fc_ramp_the_key_positions", "rampshowcontrolsdefault": "1", "rampvalues_var": "fc_ramp_the_key_values", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "fc_contourenable", label: "Contour", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ name == \\\"\\\" }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fc_contourwidth", label: "Contour Width", num_components: 1, default_value: [0.02], min: 0, max: 0.1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fc_contourenable == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fc_contoursharp", label: "Sharpness", num_components: 1, default_value: [4], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fc_contourenable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "fc_sclipenable", label: "Soft Clip", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fc_sclipstart", label: "Soft Clip Start", num_components: 1, default_value: [0.8], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fc_sclipenable == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fc_sclipsuppress", label: "  Suppress", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fc_sclipenable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "fc_lowlimitenable", label: "Clamp at Lower Limit", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fc_lowlimit", label: "Clamp To Min", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fc_lowlimitenable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "fc_highlimitenable", label: "Clamp at Upper Limit", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fc_highlimit", label: "Clamp To Max", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fc_highlimitenable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fc_amp", label: "Final Scale", num_components: 1, default_value: [1], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ name == \\\"\\\" }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder7_4_1", label: "Noise", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "fc_noiseenable", label: "Enable", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "fc_noisemode", label: "Mode", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["add", "multiply"], menu_labels: ["Offset (Field + Noise)", "Scale (Field * Noise)"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ fi_noiseenable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "fc_noisebasis", label: "Type", num_components: 1, default_value: ["simplex"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["sine", "perlin", "pperlin", "simplex", "sparse", "flow", "pflow", "worleyFA", "worleyFB", "alligator"], menu_labels: ["Sinusoid", "Perlin", "Periodic Perlin", "Simplex", "Sparse Convolution", "Perlin Flow", "Periodic Perlin Flow", "Worley Cellular F1", "Worley Cellular F2-F1", "Alligator"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ fc_noiseenable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fc_noisefreq", label: "Frequency", num_components: 4, default_value: [5, 5, 5, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ fc_noiseenable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fc_noiseoffset", label: "Offset", num_components: 4, default_value: [5, 0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ fc_noiseenable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "fc_noiseperiod", label: "Period", num_components: 4, default_value: [1, 1, 1, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ fc_noiseenable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ fc_noisebasis != pperlin fc_noisebasis != pflow }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "folder34", label: "Fractal", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setTags({"group_type": "simple"});
			hou_parm_template4 = new hou.StringParmTemplate({name: "fc_noisefractal", label: "Fractal Type", num_components: 1, default_value: ["none"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["none", "fBm", "mfT", "hmfT"], menu_labels: ["None", "Standard (fBm)", "Terrain", "Hybrid Terrain"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fc_noiseenable == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fc_noiseoct", label: "Max Octaves", num_components: 1, default_value: [8], min: 0, max: 16, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fc_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fc_noisefractal == none } { fc_noisefractal == none }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fc_noiselac", label: "Lacunarity", num_components: 1, default_value: [2.01234], min: 0, max: 4, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fc_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fc_noisefractal == none }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fc_noiserough", label: "Roughness", num_components: 1, default_value: [0.5], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fc_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fc_noisefractal == none }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "folder35", label: "Warping", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setTags({"group_type": "simple"});
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "fc_noisedolwarp", label: "Enable Lattice Warp", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fc_noiseenable == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "fc_noiseaccuml", label: "Accumulate Lattice Warp", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fc_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fc_noisedolwarp == 0 } { fc_noisefractal == none }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fc_noisedisp", label: "Lattice Warp", num_components: 1, default_value: [0], min: null, max: 0.5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fc_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fc_noisedolwarp == 0 }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fc_noisedispfreq", label: "Freq", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fc_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fc_noisedolwarp == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "fc_noisedogwarp", label: "Enable Gradient Warp", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fc_noiseenable == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "fc_noiseaccumg", label: "Accumulate Gradient Warp", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fc_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fc_noisedogwarp == 0 } { fc_noisefractal == none }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fc_noisegflow", label: "Gradient Warp", num_components: 1, default_value: [0], min: null, max: 0.5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fc_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fc_noisedogwarp == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fc_noiseflowrot", label: "Flow Rotation", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fc_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fc_noisebasis != flow fc_noisebasis != pflow }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "folder36", label: "Output Correction", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setTags({"group_type": "simple"});
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "fc_noisecc_dobias", label: "Bias", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fc_noiseenable == 0 } { docc == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fc_noisecc_bias", label: "Bias", num_components: 1, default_value: [0.5], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fc_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fc_noisecc_dobias == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "fc_noisecc_dogain", label: "Gain", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fc_noiseenable == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fc_noisecc_gain", label: "Gain", num_components: 1, default_value: [0.5], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fc_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fc_noisecc_dogain == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "fc_noisecc_inv", label: "Complement", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fc_noiseenable == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "fc_noisecc_dorng", label: "Output Range (Clamped)", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fc_noiseenable == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fc_noisecc_rnglo", label: "Output Minimum", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fc_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fc_noisecc_dorng == 0 }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fc_noisecc_rnghi", label: "Maximum", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fc_noiseenable == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ fc_noisecc_dorng == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fc_noisecc_amp", label: "Final Amplitude", num_components: 3, default_value: [1, 1, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ fc_noiseenable == 0 }");
			hou_parm_template4.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder2_5_4", label: "Exports", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2 = new hou.StringParmTemplate({name: "smokemask_export_name", label: "Smoke Mask Name", num_components: 1, default_value: ["smoke_mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "firemask_export_name", label: "Fire Mask Name", num_components: 1, default_value: ["fire_mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "direct", label: "direct", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "indirect", label: "indirect", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "Ce", label: "Ce", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "direct_emission", label: "direct_emission", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "all_emission", label: "all_emission", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "all", label: "all", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "indirect_emission", label: "indirect_emission", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.LabelParmTemplate({name: "direct_comp", label: "direct_comp", column_labels: [""]});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.LabelParmTemplate({name: "indirect_comp", label: "indirect_comp", column_labels: [""]});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.LabelParmTemplate({name: "all_comp", label: "all_comp", column_labels: [""]});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "direct_noshadow", label: "direct_noshadow", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "direct_shadow", label: "direct_shadow", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "indirect_noshadow", label: "indirect_noshadow", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "indirect_shadow", label: "indirect_shadow", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "level", label: "level", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "diffuselevel", label: "diffuselevel", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "specularlevel", label: "specularlevel", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "volumelevel", label: "volumelevel", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "direct_samples", label: "direct_samples", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "indirect_samples", label: "indirect_samples", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "nlights", label: "nlights", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.LabelParmTemplate({name: "direct_noshadow_comp", label: "direct_noshadow_comp", column_labels: [""]});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.LabelParmTemplate({name: "indirect_noshadow_comp", label: "indirect_noshadow_comp", column_labels: [""]});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "nddispersion", label: "nddispersion", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "ndpriority", label: "ndpriority", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "ndior", label: "ndior", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "absorption", label: "absorption", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.LabelParmTemplate({name: "layer", label: "Layer", column_labels: [""]});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "density", label: "density", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "flame", label: "flame", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "temperature", label: "temperature", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			
            this.parmTemplateGroup = hou_parm_template_group;
            this.parmTemplateGroup.linkNode(this);
        }
    }
    hou.registerType('VOP/Shaders/pyroshader',_hnt_VOP_pyroshader)
    return _hnt_VOP_pyroshader
}
        