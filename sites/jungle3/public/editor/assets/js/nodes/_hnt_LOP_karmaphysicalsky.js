
export default function (hou) {
    class _hnt_LOP_karmaphysicalsky extends hou.extend(hou._HoudiniBase).with(hou._SubgraphMixin) {
        static is_root = false;
        static id = 'LOP/Lights/karmaphysicalsky';
        static category = '/LOP';
        static houdiniType = 'karmaphysicalsky';
        static title = 'Karma Physical Sky';
        static icon = '/editor/assets/imgs/nodes/_hnt_LOP_karmaphysicalsky.svg';
        constructor() {
            super();
            this.flags['houdini_type'] = this.__proto__.constructor.houdiniType;
            
            const inputs = ['LOP'];
            const outputs = ['LOP'];

            for(var i=0;i<inputs.length;i++) this.addInput(''+i,inputs[i]);        
            for(var j=0;j<outputs.length;j++) this.addOutput(''+j,outputs[j]);
        }
        parmTemplatesInit() {
            let hou_parm_template_group = new hou.ParmTemplateGroup();
			this.parmTemplateGroup = hou_parm_template_group;
			let hou_parm_template = new hou.StringParmTemplate({name: "primpath", label: "Primitive Path", num_components: 1, default_value: ["/lights/$OS"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template.setTags({"autoscope": "0000000000000000", "editor": "0", "sidefx::usdpathtype": "primlist"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.SeparatorParmTemplate({name: "sepparm"});
			hou_parm_template.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "intensity_control", label: "Intensity", num_components: 1, default_value: ["set"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sky xn__inputsintensity_control_jeb", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "intensity", label: "Intensity", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ intensity_control == block } { intensity_control == none }");
			hou_parm_template.setTags({"autoscope": "0000000000000000", "usdvaluetype": "float"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "exposure_control", label: "Exposure", num_components: 1, default_value: ["set"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sun xn__inputsexposure_control_wcb", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "exposure", label: "Exposure", num_components: 1, default_value: [0], min: null, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ exposure_control == block } { exposure_control == none }");
			hou_parm_template.setTags({"autoscope": "0000000000000000", "usdvaluetype": "float"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ToggleParmTemplate({name: "renderlightgeo", label: "Render Light Geometry", default_value: true});
			hou_parm_template.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template.setTags({"script_callback_language": "python"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.SeparatorParmTemplate({name: "sepparm8"});
			hou_parm_template.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder4_2", label: "Sun", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_default": "0", "visibletabs": "11111"});
			let hou_parm_template2 = new hou.StringParmTemplate({name: "angle_control", label: "Angular Size", num_components: 1, default_value: ["set"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sun xn__inputsangle_control_06a", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "angle", label: "Angular Size", num_components: 1, default_value: [0.51], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ sangle_control == block } { angle_control == none }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "usdvaluetype": "float"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.SeparatorParmTemplate({name: "sepparm7"});
			hou_parm_template2.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "set_using", label: "Use", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1"], menu_labels: ["Azimuth/Altitude", "Location/Date/Time"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder0", label: "Azimuth and Altitude", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ set_using != 0 }");
			hou_parm_template2.setTags({"group_type": "simple", "sidefx::look": "blank"});
			let hou_parm_template3 = new hou.StringParmTemplate({name: "solar_altitude_control", label: "Solar Altitude", num_components: 1, default_value: ["set"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sky xn__inputssolar_altitude_control_omb", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "solar_altitude", label: "Solar Altitude", num_components: 1, default_value: [45], min: 0, max: 90, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ solar_altitude_control == block } { solar_altitude_control == none } { solar_altitude_control == disconnectinput }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "usdvaluetype": "float"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "solar_azimuth_control", label: "Solar Azimuth", num_components: 1, default_value: ["set"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sky xn__inputssolar_azimuth_control_1kb", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "solar_azimuth", label: "Solar Azimuth", num_components: 1, default_value: [0], min: 0, max: 360, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ solar_azimuth_control == block } { solar_azimuth_control == none } { solar_azimuth_control == disconnectinput }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "usdvaluetype": "float"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder1", label: "Location, Date, and Time", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ set_using != 1 }");
			hou_parm_template2.setTags({"group_type": "simple", "sidefx::look": "blank"});
			hou_parm_template3 = new hou.FloatParmTemplate({name: "geo_latitude", label: "Latitude", num_components: 1, default_value: [43.6532], min: null, max: 90, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "geo_longitude", label: "Longitude", num_components: 1, default_value: [79.3832], min: null, max: 180, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "geo_month", label: "Date", menu_items: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], menu_labels: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"], default_value: 9, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "geo_day", label: "Day", num_components: 1, default_value: [2], min: 1, max: 31, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "geo_time", label: "Time", num_components: 2, default_value: [12, 0], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "geo_hr_spec", label: "Hour Spec", menu_items: ["0", "1", "3"], menu_labels: ["AM", "PM", "24hr"], default_value: 2, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "geo_time_zone", label: "Time Zone", menu_items: ["", "UTC", "UTC-1", "UTC-2", "UTC-3", "UTC-4", "UTC-5", "UTC-6", "UTC-7", "UTC-8", "UTC-9", "UTC-10", "UTC-11", "UTC+12", "UTC+11", "UTC+10", "UTC+9", "UTC+8", "UTC+7", "UTC+6", "UTC+5", "UTC+4", "UTC+3", "UTC+2", "UTC+1"], menu_labels: ["Default (calculated from longitude)", "UTC (GMT, WET)", "N (UTC - 1)", "O (UTC - 2)", "P (UTC - 3)", "AST (UTC - 4)", "EST (UTC - 5)", "CST (UTC - 6)", "MST (UTC - 7)", "PST (UTC - 8)", "AKST (UTC - 9)", "HAST (UTC - 10)", "X (UTC - 11)", "M (UTC + 12)", "L (UTC + 11)", "EST (UTC + 10)", "I (UTC + 9)", "WST (UTC + 8)", "CXT (UTC + 7)", "F (UTC + 6)", "E (UTC + 5)", "D (UTC + 4)", "MSK (UTC + 3)", "EET (UTC + 2)", "CET (UTC + 1)"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "geo_daylight", label: "Daylight Saving", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.SeparatorParmTemplate({name: "sepparm10"});
			hou_parm_template2.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "enablesun", label: "Enable Sun Light", default_value: true});
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.SeparatorParmTemplate({name: "sepparm11"});
			hou_parm_template2.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder3", label: "Base", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ enablesun != 1 }");
			hou_parm_template2.setTags({"group_default": "0", "group_type": "collapsible"});
			hou_parm_template3 = new hou.StringParmTemplate({name: "sun_intensity_control", label: "Intensity", num_components: 1, default_value: ["set"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sun xn__inputsintensity_control_jeb", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "sun_intensity", label: "Intensity", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sun_intensity_control == block } { sun_intensity_control == none }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "usdvaluetype": "float"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sun_exposure_control", label: "Exposure", num_components: 1, default_value: ["set"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sun xn__inputsexposure_control_wcb", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "sun_exposure", label: "Exposure", num_components: 1, default_value: [0], min: null, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sun_exposure_control == block } { sun_exposure_control == none }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "usdvaluetype": "float"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sun_color_control", label: "Color", num_components: 1, default_value: ["set"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sun xn__inputscolor_control_06a", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "sun_color", label: "Color", num_components: 3, default_value: [1, 1, 1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sun_color_control == block } { sun_color_control == none }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "colortype": "hsv", "usdvaluetype": "color3f"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.SeparatorParmTemplate({name: "sepparm3"});
			hou_parm_template3.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sun_diffuse_control", label: "Diffuse Multiplier", num_components: 1, default_value: ["set"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sun xn__inputsdiffuse_control_99a", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "sun_diffuse", label: "Diffuse Multiplier", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sun_diffuse_control == block } { sun_diffuse_control == none }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "usdvaluetype": "float"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sun_specular_control", label: "Specular Multiplier", num_components: 1, default_value: ["set"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sun xn__inputsspecular_control_wcb", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "sun_specular", label: "Specular Multiplier", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sun_specular_control == block } { sun_specular_control == none }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "usdvaluetype": "float"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sun_renderlightgeo_control", label: "Render Light Geometry", num_components: 1, default_value: ["set"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sun xn__karmalightrenderlightgeo_control_5sbf", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "sun_renderlightgeo", label: "Render Light Geometry", num_components: 1, default_value: [2], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2"], menu_labels: ["Force Disable", "Force Enable", "Use Global Control"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sun_renderlightgeo_control == block } { sun_renderlightgeo_control == none }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "spare_category": "Light", "uiscope": "None", "usdapischema": "KarmaLightAPI", "usdvaluetype": "bool"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.SeparatorParmTemplate({name: "sepparm6"});
			hou_parm_template3.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "Sampling", label: "Sampling", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ enablesun != 1 }");
			hou_parm_template2.setTags({"group_default": "0", "group_type": "collapsible", "group_type:0": "collapsible", "visibletabs": "1"});
			hou_parm_template3 = new hou.StringParmTemplate({name: "sun_misbias_control", label: "MIS Bias", num_components: 1, default_value: ["none"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sun xn__karmalightmisbias_control_rhbf", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "sun_misbias", label: "MIS Bias", num_components: 1, default_value: [0], min: null, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sun_misbias_control == block } { sun_misbias_control == none }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "spare_category": "Sampling", "uiscope": "None", "usdapischema": "KarmaLightAPI", "usdvaluetype": "float"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sun_samplingmode_control", label: "Sampling Mode", num_components: 1, default_value: ["none"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sun xn__karmalightsamplingmode_control_wpbf", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sun_samplingmode", label: "Sampling Mode", num_components: 1, default_value: ["Auto"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["Auto", "Uniform", "Light Tree"], menu_labels: ["Auto", "Uniform", "Light Tree"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sun_samplingmode_control == block } { sun_samplingmode_control == none }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "spare_category": "Sampling", "uiscope": "None", "usdapischema": "KarmaLightAPI", "usdvaluetype": "token"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sun_samplingquality_control", label: "Sampling Quality", num_components: 1, default_value: ["none"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sun xn__karmalightsamplingquality_control_subf", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "sun_samplingquality", label: "Sampling Quality", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sun_samplingquality_control == block } { sun_samplingquality_control == none }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "spare_category": "Sampling", "uiscope": "None", "usdapischema": "KarmaLightAPI", "usdvaluetype": "float"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "Light", label: "Light", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ enablesun != 1 }");
			hou_parm_template2.setTags({"group_default": "0", "group_type": "collapsible", "group_type:0": "collapsible", "visibletabs": "1"});
			hou_parm_template3 = new hou.StringParmTemplate({name: "sun_contribs_control", label: "Contributions", num_components: 1, default_value: ["none"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sun xn__karmalightcontribs_control_ejbf", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sun_contribs", label: "Contributions", num_components: 1, default_value: ["*"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["*", "diffuse", "reflect", "coat", "sss", "volume", "diffuse|volume|sss", "-diffuse & -volume & -sss"], menu_labels: ["Any", "Diffuse", "Reflect", "Coat", "SSS", "Volume", "Any diffuse", "Any non-diffuse"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sun_contribs_control == block } { sun_contribs_control == none }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "spare_category": "Light", "uiscope": "None", "usdapischema": "KarmaLightAPI", "usdvaluetype": "string"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sun_lpetag_control", label: "LPE Tag", num_components: 1, default_value: ["none"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sun xn__karmalightlpetag_control_4fbf", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sun_lpetag", label: "LPE Tag", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sun_lpetag_control == block } { sun_lpetag_control == none }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "spare_category": "Light", "uiscope": "None", "usdapischema": "KarmaLightAPI", "usdvaluetype": "string"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder4_2_1", label: "Sky", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_default": "0", "group_type": "collapsible", "group_type:0": "collapsible", "visibletabs": "1"});
			hou_parm_template2 = new hou.StringParmTemplate({name: "turbidity_control", label: "Turbidity", num_components: 1, default_value: ["set"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sky xn__inputsturbidity_control_jeb", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "turbidity", label: "Turbidity", num_components: 1, default_value: [3], min: 1, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ turbidity_control == block } { turbidity_control == none } { turbidity_control == disconnectinput }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "usdvaluetype": "float"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "ground_albedo_control", label: "Ground Albedo", num_components: 1, default_value: ["set"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sky xn__inputsground_albedo_control_1kb", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "ground_albedo", label: "Ground Albedo", num_components: 3, default_value: [0.2, 0.2, 0.2], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ ground_albedo_control == block } { ground_albedo_control == none } { ground_albedo_control == disconnectinput }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "usdvaluetype": "color3f"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "computegroundcolor", label: "Compute Ground Color", default_value: true});
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "ground_color_control", label: "Ground Color", num_components: 1, default_value: ["set"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sky xn__inputsground_color_control_fjb", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "ground_color", label: "Ground Color", num_components: 3, default_value: [0.2, 0.2, 0.2], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ ground_color_control == block } { ground_color_control == none } { ground_color_control == disconnectinput } { computegroundcolor == 1 }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "usdvaluetype": "color3f"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "horizon_blur_control", label: "Horizon Blur Falloff", num_components: 1, default_value: ["set"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sky xn__inputshorizon_blur_control_fjb", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "horizon_blur", label: "Horizon Blur Falloff", num_components: 1, default_value: [0.5], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ horizon_blur_control == block } { horizon_blur_control == none }");
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "usdvaluetype": "float"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.SeparatorParmTemplate({name: "sepparm9"});
			hou_parm_template2.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "enablesky", label: "Enable Sky Light", default_value: true});
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.SeparatorParmTemplate({name: "sepparm12"});
			hou_parm_template2.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder2", label: "Base", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ enablesky != 1 }");
			hou_parm_template2.setTags({"group_type": "collapsible", "script_callback": ""});
			hou_parm_template3 = new hou.StringParmTemplate({name: "sky_intensity_control", label: "Intensity", num_components: 1, default_value: ["set"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sky xn__inputsintensity_control_jeb", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "sky_intensity", label: "Intensity", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sky_intensity_control == block } { sky_intensity_control == none }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "usdvaluetype": "float"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sky_exposure_control", label: "Exposure", num_components: 1, default_value: ["set"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sky xn__inputsexposure_control_wcb", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "sky_exposure", label: "Exposure", num_components: 1, default_value: [0], min: null, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sky_exposure_control == block } { sky_exposure_control == none }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "usdvaluetype": "float"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sky_color_control", label: "Color", num_components: 1, default_value: ["set"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sky xn__inputscolor_control_06a", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "sky_color", label: "Color", num_components: 3, default_value: [1, 1, 1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sky_color_control == block } { sky_color_control == none }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "colortype": "hsv", "usdvaluetype": "color3f"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.SeparatorParmTemplate({name: "sepparm4"});
			hou_parm_template3.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sky_diffuse_control", label: "Diffuse Multiplier", num_components: 1, default_value: ["set"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sky xn__inputsdiffuse_control_99a", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "sky_diffuse", label: "Diffuse Multiplier", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sky_diffuse_control == block } { sky_diffuse_control == none }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "usdvaluetype": "float"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sky_specular_control", label: "Specular Multiplier", num_components: 1, default_value: ["set"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sky xn__inputsspecular_control_wcb", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "sky_specular", label: "Specular Multiplier", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sky_specular_control == block } { sky_specular_control == none }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "usdvaluetype": "float"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sky_renderlightgeo_control", label: "Render Light Geometry", num_components: 1, default_value: ["set"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sky xn__karmalightrenderlightgeo_control_5sbf", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "sky_renderlightgeo", label: "Render Light Geometry", num_components: 1, default_value: [2], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2"], menu_labels: ["Force Disable", "Force Enable", "Use Global Control"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sky_renderlightgeo_control == block } { sky_renderlightgeo_control == none }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "spare_category": "Light", "uiscope": "None", "usdapischema": "KarmaLightAPI", "usdvaluetype": "bool"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.SeparatorParmTemplate({name: "sepparm5"});
			hou_parm_template3.setTags({"sidefx::layout_height": "small", "sidefx::look": "blank"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "Sampling2", label: "Sampling", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ enablesky != 1 }");
			hou_parm_template2.setTags({"group_default": "0", "group_type": "collapsible", "group_type:0": "collapsible", "visibletabs": "1"});
			hou_parm_template3 = new hou.StringParmTemplate({name: "sky_misbias_control", label: "MIS Bias", num_components: 1, default_value: ["none"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sky xn__karmalightmisbias_control_rhbf", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon", "usdvaluetype": "float"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "sky_misbias", label: "MIS Bias", num_components: 1, default_value: [0], min: null, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sky_misbias_control == block } { sky_misbias_control == none }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "usdvaluetype": "float"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sky_samplingmode_control", label: "Sampling Mode", num_components: 1, default_value: ["none"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sky xn__karmalightsamplingmode_control_wpbf", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sky_samplingmode", label: "Sampling Mode", num_components: 1, default_value: ["Auto"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["Auto", "Uniform", "Light Tree"], menu_labels: ["Auto", "Uniform", "Light Tree"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sky_samplingmode_control == block } { sky_samplingmode_control == none }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "spare_category": "Sampling", "uiscope": "None", "usdapischema": "KarmaLightAPI", "usdvaluetype": "token"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sky_samplingquality_control", label: "Sampling Quality", num_components: 1, default_value: ["none"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sky xn__karmalightsamplingquality_control_subf", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon", "usdvaluetype": "float"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "sky_samplingquality", label: "Sampling Quality", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sky_samplingquality_control == block } { sky_samplingquality_control == none }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "usdvaluetype": "float"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sky_portalmisbias_control", label: "Portal MIS Bias", num_components: 1, default_value: ["none"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sky xn__karmalightportalmisbias_control_jrbf", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "sky_portalmisbias", label: "Portal MIS Bias", num_components: 1, default_value: [0], min: null, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sky_portalmisbias_control == block } { sky_portalmisbias_control == none }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "spare_category": "Sampling", "uiscope": "None", "usdapischema": "KarmaLightAPI", "usdvaluetype": "float"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "Light2", label: "Light", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ enablesky != 1 }");
			hou_parm_template2.setTags({"group_default": "0", "group_type": "collapsible", "group_type:0": "collapsible", "visibletabs": "1"});
			hou_parm_template3 = new hou.StringParmTemplate({name: "sky_contribs_control", label: "Contributions", num_components: 1, default_value: ["none"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sky xn__karmalightcontribs_control_ejbf", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sky_contribs", label: "Contributions", num_components: 1, default_value: ["*"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["*", "diffuse", "reflect", "coat", "sss", "volume", "diffuse|volume|sss", "-diffuse & -volume & -sss"], menu_labels: ["Any", "Diffuse", "Reflect", "Coat", "SSS", "Volume", "Any diffuse", "Any non-diffuse"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sky_contribs_control == block } { sky_contribs_control == none }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "spare_category": "Light", "uiscope": "None", "usdapischema": "KarmaLightAPI", "usdvaluetype": "string"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sky_lpetag_control", label: "LPE Tag", num_components: 1, default_value: ["none"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a sky xn__karmalightlpetag_control_4fbf", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.ControlNextParameter});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "sidefx::look": "icon"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sky_lpetag", label: "LPE Tag", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ sky_lpetag_control == block } { sky_lpetag_control == none }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "spare_category": "Light", "uiscope": "None", "usdapischema": "KarmaLightAPI", "usdvaluetype": "string"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder4_2_2", label: "Advanced", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_default": "0"});
			hou_parm_template2 = new hou.StringParmTemplate({name: "skyprim", label: "Sky Prim Name", num_components: 1, default_value: ["sky"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "sunprim", label: "Sun Prim Name", num_components: 1, default_value: ["sun"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "lightmap", label: "Sun Light Map", num_components: 1, default_value: ["karma/hoseksolarmap.rat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"filechooser_pattern": "", "script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "upaxis", label: "Up Axis", num_components: 1, default_value: ["Y"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["Y", "Z"], menu_labels: ["Y", "Z"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			
            this.parmTemplateGroup = hou_parm_template_group;
            this.parmTemplateGroup.linkNode(this);
        }
    }
    hou.registerType('LOP/Lights/karmaphysicalsky',_hnt_LOP_karmaphysicalsky)
    return _hnt_LOP_karmaphysicalsky
}
        