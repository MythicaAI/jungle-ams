
export default function (hou) {
    class _hnt_SOP_labs__building_generator__4_0 extends hou.extend(hou._HoudiniBase).with(hou._SubgraphMixin) {
        static is_root = false;
        static id = 'SOP/Labs/World Building/Architecture/labs::building_generator::4.0';
        static category = '/SOP/labs';
        static houdiniType = 'labs::building_generator::4.0';
        static title = 'Labs Building Generator';
        static icon = '/editor/assets/imgs/nodes/_hnt_SOP_labs__building_generator__4_0.svg';
        constructor() {
            super();
            this.flags['houdini_type'] = this.__proto__.constructor.houdiniType;
            
            const inputs = ['SOP', 'SOP', 'SOP', 'SOP'];
            const outputs = ['SOP', 'SOP'];

            for(var i=0;i<inputs.length;i++) this.addInput(''+i,inputs[i]);        
            for(var j=0;j<outputs.length;j++) this.addOutput(''+j,outputs[j]);
        }
        parmTemplatesInit() {
            let hou_parm_template_group = new hou.ParmTemplateGroup();
			this.parmTemplateGroup = hou_parm_template_group;
			let hou_parm_template = new hou.FolderParmTemplate({name: "fd_visualize", label: "Visualize", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			let hou_parm_template2 = new hou.ToggleParmTemplate({name: "bColorFloors", label: "Color Floors", default_value: false});
			hou_parm_template2.setHelp("Color each floor as visulisation aid.");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "fd_initialize", label: "Initialize", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template2 = new hou.FloatParmTemplate({name: "fFloorHeight", label: "Full Floor Height", num_components: 1, default_value: [2.55], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setHelp("Height of floor in Houdini units.");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "iSeed", label: "Seed", num_components: 1, default_value: [1223], min: 1, max: 100000, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setHelp("Seed used to control randimisation functions.");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "bExperimentalLedges", label: "Simple Ledges", default_value: false});
			hou_parm_template2.setHelp("Enable simple extruded ledges, in place of user created ledges.");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "bScaleModules", label: "Scale Modules", default_value: false});
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "snapinputgeo", label: "Snap Input Geometry to Floor Height", default_value: false});
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "fd_primary", label: "Primary", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "collapsible"});
			let hou_parm_template3 = new hou.FolderParmTemplate({name: "fd_wallface", label: "Wall Face", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setTags({"group_type": "simple"});
			let hou_parm_template4 = new hou.StringParmTemplate({name: "sFacadePattern", label: "Facade Module Pattern", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template4.setHelp("Name of module to use as main 'wall' unit. ");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "bFacadeCorner", label: "Corners", default_value: true});
			hou_parm_template4.setHelp("Enable corner modules.");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "sConvexCornerID", label: "Concave Corner Module", num_components: 2, default_value: ["", ""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template4.setHelp("Name of corner module to use for 'outward' facing corners, eg on a simple 4 sided bulding, what module is used on those corners.");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "sConcaveCornerID", label: "Convex Corner Module", num_components: 2, default_value: ["", ""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template4.setHelp("Name of module to use for 'inward' coners, eg for a H shaped floor-plan, the corner model to use on the inner corners.");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "fd_secondary", label: "Secondary", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "collapsible"});
			hou_parm_template3 = new hou.FolderParmTemplate({name: "fd_topledge", label: "Top Ledge", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setTags({"group_type": "simple"});
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "bTopLedge", label: "Top", default_value: true});
			hou_parm_template4.hideLabel(true);
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template4.setHelp("Enable ledges across top of floor.");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fTopLedgeHeight", label: "Height", num_components: 1, default_value: [0.35], min: 0, max: 0.5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ bTopLedge == 0 }");
			hou_parm_template4.setHelp("Height in Houdini units for the top ledge.");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "sTopLedgePattern", label: "Module Pattern", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ bTopLedge == 0 }");
			hou_parm_template4.setHelp("Module name to use for top ledge.");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "bTopLedgeCorner", label: "Corners", default_value: true});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ bTopLedge == 0 }");
			hou_parm_template4.setHelp("Enable top ledge corners.");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "sTopLedgeConvexCorner", label: "Concave Corner Module", num_components: 2, default_value: ["", ""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ bTopLedgeCorner == 0 } { bTopLedge == 0 }");
			hou_parm_template4.setHelp("Top ledge corner module to use for 'outward' facing corners, the more common use case.");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "sTopLedgeConcaveCorner", label: "Convex Corner Module", num_components: 2, default_value: ["", ""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ bTopLedgeCorner == 0 } { bTopLedge == 0 }");
			hou_parm_template4.setHelp("Top ledge corner module to use for 'inward' facing corners.");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "fd_bottomledge", label: "Bottom Ledge", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setTags({"group_type": "simple"});
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "bBottomLedge", label: "Bottom", default_value: true});
			hou_parm_template4.hideLabel(true);
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template4.setHelp("Enable bottom ledges per floor.");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fBottomLedgeHeight", label: "Height", num_components: 1, default_value: [0.2], min: 0, max: 0.5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ bBottomLedge == 0 }");
			hou_parm_template4.setHelp("Height in Houdini units for the bottom ledge.");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "sBottomLedgePattern", label: "Module Pattern", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ bBottomLedge == 0 }");
			hou_parm_template4.setHelp("Module name to use for bottom ledge.");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "bBottomLedgeCorner", label: "Corners", default_value: true});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ bBottomLedge == 0 }");
			hou_parm_template4.setHelp("Enable bottom ledge corners.");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "sBottomLedgeConvexCorner", label: "Concave Corner Module", num_components: 2, default_value: ["", ""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ bBottomLedgeCorner == 0 } { bBottomLedge == 0 }");
			hou_parm_template4.setHelp("Bottom ledge corner module to use for 'outward' facing corners, the more common use case.");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "sBottomLedgeConcaveCorner", label: "Convex Corner Module", num_components: 2, default_value: ["", ""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ bBottomLedgeCorner == 0 } { bBottomLedge == 0 }");
			hou_parm_template4.setHelp("Bottm ledge corner module to use for 'inward' facing corners.");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "fd_sideslop", label: "Sideslop", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setTags({"group_type": "simple"});
			hou_parm_template4 = new hou.StringParmTemplate({name: "sSideSlopID", label: "Sideslop Module", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template4.setHelp("Module to use in the gap between primary module and corner module.");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "fd_customization", label: "Customization", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template2 = new hou.FolderParmTemplate({name: "mpFloorOverrides", label: "Floor Overrides", folder_type: hou.folderType.MultiparmBlock, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setScriptCallback("kwargs['node'].hm().AddCustomFloor(kwargs['node'])");
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback": "kwargs['node'].hm().AddCustomFloor(kwargs['node'])", "script_callback_language": "python"});
			hou_parm_template3 = new hou.FolderParmTemplate({name: "fd_settings_#", label: "Settings", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setTags({"group_type": "collapsible"});
			hou_parm_template4 = new hou.IntParmTemplate({name: "iFloorIndex#", label: "Floor Index", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template4.setHelp("Floor index to override, 0 being the ground floor.");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "fFloorHeightOverride#", label: "Floor Height", num_components: 1, default_value: [2.55], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ snapinputgeo == 1 }");
			hou_parm_template4.setHelp("Height for this floor override.");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FolderParmTemplate({name: "fd_primary_#", label: "Primary", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template4.setTags({"group_type": "collapsible"});
			let hou_parm_template5 = new hou.FolderParmTemplate({name: "fd_wallface_#", label: "Wall Face", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template5.setTags({"group_type": "simple"});
			let hou_parm_template6 = new hou.StringParmTemplate({name: "sFacadePatternOverride#", label: "Facade Module Pattern", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template6.setHelp("Module name for this floor override.");
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.ToggleParmTemplate({name: "bFacadeCornerOverride#", label: "Corners", default_value: true});
			hou_parm_template6.setHelp("Enable corners for this floor override.");
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.StringParmTemplate({name: "sConvexCornerIDOverride#", label: "Concave Corner ID", num_components: 2, default_value: ["", ""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template6.setHelp("Module name for 'outward' facing corners for override.");
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.StringParmTemplate({name: "sConcaveCornerIDOverride#", label: "Convex Corner ID", num_components: 2, default_value: ["", ""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template6.setHelp("Module name for 'inward' facing corners for override.");
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FolderParmTemplate({name: "fd_secondary_#_2", label: "Secondary", folder_type: hou.folderType.Collapsible, default_value: 0, ends_tab_group: false});
			hou_parm_template4.setTags({"group_type": "collapsible"});
			hou_parm_template5 = new hou.FolderParmTemplate({name: "fd_topledge_#_2", label: "Top Ledge", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template5.setTags({"group_type": "simple"});
			hou_parm_template6 = new hou.ToggleParmTemplate({name: "bTopLedgeOverride#", label: "Top", default_value: true});
			hou_parm_template6.hideLabel(true);
			hou_parm_template6.setJoinWithNext(true);
			hou_parm_template6.setHelp("Enable top ledges for override.");
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.FloatParmTemplate({name: "fTopLedgeHeightOverride#", label: "Height", num_components: 1, default_value: [0.35], min: 0, max: 0.5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template6.setConditional(hou.parmCondType.DisableWhen, "{ bTopLedgeOverride# == 0 }");
			hou_parm_template6.setHelp("Ledge height for override.");
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.StringParmTemplate({name: "sTopLedgePatternOverride#", label: "Module Pattern", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template6.setConditional(hou.parmCondType.DisableWhen, "{ bTopLedge == 0 }");
			hou_parm_template6.setHelp("Module name for ledge to use for this override.");
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.ToggleParmTemplate({name: "bTopLedgeCornerOverride#", label: "Corners", default_value: true});
			hou_parm_template6.setHelp("Enable corners for override.");
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.StringParmTemplate({name: "sTopLedgeConvexCornerOverride#", label: "Concave Corner Module", num_components: 2, default_value: ["", ""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template6.setConditional(hou.parmCondType.DisableWhen, "{ bTopLedgeCorner == 0 } { bTopLedge == 0 }");
			hou_parm_template6.setHelp("Corner module name for 'outward' corners to use for override.");
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.StringParmTemplate({name: "sTopLedgeConcaveCornerOverride#", label: "Convex Corner Module", num_components: 2, default_value: ["", ""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template6.setConditional(hou.parmCondType.DisableWhen, "{ bTopLedgeCorner == 0 } { bTopLedge == 0 }");
			hou_parm_template6.setHelp("Corner module name for 'inward' corners to use for override.");
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template5 = new hou.FolderParmTemplate({name: "fd_bottomledge_#_3", label: "Bottom Ledge", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template5.setTags({"group_type": "simple"});
			hou_parm_template6 = new hou.ToggleParmTemplate({name: "bBottomLedgeOverride#", label: "Bottom", default_value: true});
			hou_parm_template6.hideLabel(true);
			hou_parm_template6.setJoinWithNext(true);
			hou_parm_template6.setHelp("Enable bottom ledges for override.");
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.FloatParmTemplate({name: "fBottomLedgeHeightOverride#", label: "Height", num_components: 1, default_value: [0.2], min: 0, max: 0.5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template6.setConditional(hou.parmCondType.DisableWhen, "{ bBottomLedgeOverride# == 0 }");
			hou_parm_template6.setHelp("Height of bottom ledge for override.");
			hou_parm_template6.setTags({"autoselect": "0000000000000000"});
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.StringParmTemplate({name: "sBottomLedgePatternOverride#", label: "Module Pattern", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template6.setConditional(hou.parmCondType.DisableWhen, "{ bBottomLedge == 0 }");
			hou_parm_template6.setHelp("Module name to use for bottom ledge for override.");
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.ToggleParmTemplate({name: "bBottomLedgeCornerOverride#", label: "Corners", default_value: true});
			hou_parm_template6.setHelp("Enable bottom corners for override.");
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.StringParmTemplate({name: "sBottomLedgeConvexCornerOverride#", label: "Concave Corner Module", num_components: 2, default_value: ["", ""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template6.setConditional(hou.parmCondType.DisableWhen, "{ bBottomLedgeCorner == 0 } { bBottomLedge == 0 }");
			hou_parm_template6.setHelp("Module to use for 'outward' bottom corners for override.");
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template6 = new hou.StringParmTemplate({name: "sBottomLedgeConcaveCornerOverride#", label: "Convex Corner Module", num_components: 2, default_value: ["", ""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template6.setConditional(hou.parmCondType.DisableWhen, "{ bBottomLedgeCorner == 0 } { bBottomLedge == 0 }");
			hou_parm_template6.setHelp("Module to use for 'inward' bottom corners for override.");
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template5 = new hou.FolderParmTemplate({name: "fd_sideslop_#_4", label: "Sideslop", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template5.setTags({"group_type": "simple"});
			hou_parm_template6 = new hou.StringParmTemplate({name: "sSideSlopIDOverride#", label: "Sideslop Module", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template6.setHelp("Module to use for gap between primary and corner modules for override.");
			hou_parm_template5.addParmTemplate(hou_parm_template6);
			hou_parm_template4.addParmTemplate(hou_parm_template5);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			
            this.parmTemplateGroup = hou_parm_template_group;
            this.parmTemplateGroup.linkNode(this);
        }
    }
    hou.registerType('SOP/Labs/World Building/Architecture/labs::building_generator::4.0',_hnt_SOP_labs__building_generator__4_0)
    return _hnt_SOP_labs__building_generator__4_0
}
        