
export default function (hou) {
    class _hnt_SHOP_principledshader extends hou.extend(hou._HoudiniBase).with(hou._SubgraphMixin) {
        static is_root = false;
        static id = 'SHOP/Material/principledshader';
        static category = '/SHOP';
        static houdiniType = 'principledshader';
        static title = 'Principled Shader';
        static icon = '/editor/assets/imgs/nodes/_hnt_SHOP_principledshader.svg';
        constructor() {
            super();
            this.flags['houdini_type'] = this.__proto__.constructor.houdiniType;
            
            const inputs = [];
            const outputs = ['SHOP'];

            for(var i=0;i<inputs.length;i++) this.addInput(''+i,inputs[i]);        
            for(var j=0;j<outputs.length;j++) this.addOutput(''+j,outputs[j]);
        }
        parmTemplatesInit() {
            let hou_parm_template_group = new hou.ParmTemplateGroup();
			this.parmTemplateGroup = hou_parm_template_group;
			let hou_parm_template = new hou.FolderParmTemplate({name: "diffuse_folder_14", label: "Surface", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			let hou_parm_template2 = new hou.FolderParmTemplate({name: "folder52", label: "Base Color", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			let hou_parm_template3 = new hou.FloatParmTemplate({name: "basecolor", label: "Base Color", num_components: 3, default_value: [0.2, 0.2, 0.2], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ basecolor_useBaseColor == 0 } { diff_enable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "basecolor_usePointColor", label: "Use Point Color", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ diff_enable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "basecolor_usePackedColor", label: "Use Packed Color", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ diff_enable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "basecolor_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ diff_enable == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "basecolor_texture", label: "Map", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ diff_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ basecolor_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "basecolor_textureIntensity", label: "Tint Intensity", num_components: 1, default_value: [1], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ diff_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ basecolor_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "basecolor_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ diff_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ basecolor_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "basecolor_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["auto"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["auto", "linear"], menu_labels: ["Automatic", "Linear"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ diff_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ basecolor_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder53", label: "Metallic", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.FloatParmTemplate({name: "metallic", label: "Metallic", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ useBaseColor == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "metallic_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "metallic_texture", label: "Map", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ metallic_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "metallic_monoChannel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ metallic_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "metallic_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ metallic_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "metallic_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["auto", "linear"], menu_labels: ["Automatic", "Linear"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ metallic_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder210", label: "Reflect", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.FloatParmTemplate({name: "reflect", label: "Reflect", num_components: 1, default_value: [0.5], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ useBaseColor == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "reflect_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "reflect_texture", label: "Map", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ reflect_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "reflect_monoChannel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ reflect_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "reflect_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ reflect_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "reflect_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["auto", "linear"], menu_labels: ["Automatic", "Linear"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ reflect_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder211", label: "Reflect Tint", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.FloatParmTemplate({name: "reflecttint", label: "Reflect Tint", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ useBaseColor == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "reflecttint_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "reflecttint_texture", label: "Map", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ reflecttint_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "reflecttint_monoChannel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ reflecttint_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "reflecttint_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ reflecttint_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "reflecttint_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["auto", "linear"], menu_labels: ["Automatic", "Linear"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ reflecttint_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder212", label: "Roughness", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.FloatParmTemplate({name: "rough", label: "Roughness", num_components: 1, default_value: [0.3], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ useBaseColor == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "rough_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "rough_texture", label: "Map", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ rough_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "rough_monoChannel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ rough_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "rough_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ rough_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "rough_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["auto", "linear"], menu_labels: ["Automatic", "Linear"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ rough_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder213", label: "Anisotropy", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.FloatParmTemplate({name: "aniso", label: "Anisotropy", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ useBaseColor == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "aniso_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "aniso_texture", label: "Map", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ aniso_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "aniso_monoChannel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ aniso_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "aniso_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ aniso_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "aniso_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["auto", "linear"], menu_labels: ["Automatic", "Linear"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ aniso_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder214", label: "Anisotropy Direction", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.FloatParmTemplate({name: "anisodir", label: "Anisotropy Direction", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "anisodir_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setScriptCallback("python -c 'hou.phm().toggle_anisodir_texture(hou.pwd())'");
			hou_parm_template3.setTags({"parmvop": "1", "script_callback": "python -c 'hou.phm().toggle_anisodir_texture(hou.pwd())'", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "anisodir_texture", label: "Map", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ anisodir_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "anisodir_monoChannel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ anisodir_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "anisodir_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ anisodir_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "anisodir_textureFilter", label: "Filter Type", num_components: 1, default_value: ["point"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["box", "gauss", "bartlett", "sinc", "hanning", "blackman", "catrom", "mitchell", "point"], menu_labels: ["Box", "Gaussian", "Bartlett/Triangular", "Sinc Sharpening", "Hanning", "Blackman", "Catmull-Rom", "Mitchell", "Point (No Filter)"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ anisodir_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "anisodir_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["auto", "linear"], menu_labels: ["Automatic", "Linear"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ anisodir_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder215", label: "Subsurface", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.FloatParmTemplate({name: "subsurface", label: "Subsurface", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ useBaseColor == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "subsurface_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "subsurface_texture", label: "Map", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ subsurface_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "subsurface_monoChannel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ subsurface_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "subsurface_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ subsurface_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "subsurface_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["auto", "linear"], menu_labels: ["Automatic", "Linear"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ subsurface_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder216", label: "Sheen", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.FloatParmTemplate({name: "sheen", label: "Sheen", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ useBaseColor == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "sheen_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sheen_texture", label: "Map", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ sheen_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "sheen_monoChannel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ sheen_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sheen_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ sheen_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sheen_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["auto", "linear"], menu_labels: ["Automatic", "Linear"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ sheen_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder217", label: "Sheen Tint", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.FloatParmTemplate({name: "sheentint", label: "Sheen Tint", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ useBaseColor == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "sheentint_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sheentint_texture", label: "Map", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ sheentint_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "sheentint_monoChannel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ sheentint_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sheentint_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ sheentint_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "sheentint_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["auto", "linear"], menu_labels: ["Automatic", "Linear"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ sheentint_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder218", label: "Coat", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.FloatParmTemplate({name: "coat", label: "Coat", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ useBaseColor == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "coat_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coat_texture", label: "Map", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coat_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "coat_monoChannel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coat_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coat_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coat_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coat_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["auto", "linear"], menu_labels: ["Automatic", "Linear"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coat_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder219", label: "Coat Roughness", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.FloatParmTemplate({name: "coatrough", label: "Coat Roughness", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ useBaseColor == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "coatrough_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coatrough_texture", label: "Map", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatrough_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "coatrough_monoChannel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatrough_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coatrough_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 } { refl_lights == 0 refl_objs == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatrough_useTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coatrough_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["auto", "linear"], menu_labels: ["Automatic", "Linear"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ refl_enable == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatrough_useTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder220", label: "Surface Texture Settings", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.StringParmTemplate({name: "basecolor_textureFilter", label: "Filter", num_components: 1, default_value: ["catrom"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["box", "gauss", "bartlett", "sinc", "hanning", "blackman", "catrom", "mitchell"], menu_labels: ["Box", "Gaussian", "Bartlett/Triangular", "Sinc Sharpening", "Hanning", "Blackman", "Catmull-Rom", "Mitchell"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "surface_textureFilterWidth", label: "Filter Width", num_components: 1, default_value: [1], min: 0, max: 5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "diffuse_folder_14_1", label: "Emission", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "emitillum", label: "Emission Illuminates Objects", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "emitcolor", label: "Emission Color", num_components: 3, default_value: [0, 0, 0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template2.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "emitint", label: "Emission Intensity", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "emitcolor_useTexture", label: "Use Texture", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "emitcolor_texture", label: "Map", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ emitcolor_useTexture == 0 }");
			hou_parm_template2.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "emitcolor_textureIntensity", label: "Tint Intensity", num_components: 1, default_value: [1], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ emitcolor_useTexture == 0 }");
			hou_parm_template2.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "emitcolor_textureWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ emitcolor_useTexture == 0 }");
			hou_parm_template2.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "emitcolor_textureColorSpace", label: "Source Color Space", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["auto", "linear"], menu_labels: ["Automatic", "Linear"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ emitcolor_useTexture == 0 }");
			hou_parm_template2.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "diffuse_folder_14_2", label: "Bump & Normals", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2 = new hou.FolderParmTemplate({name: "shading_15", label: "Base", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "enableBumpOrNormalTexture", label: "Enable", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "normalTexType", label: "Texture Type", num_components: 1, default_value: ["normal"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["bump", "normal"], menu_labels: ["Bump", "Normal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableBumpOrNormalTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "normalTexColorSpace", label: "Texture Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["auto", "linear"], menu_labels: ["Automatic", "Linear"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableBumpOrNormalTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "normalTexVectorSpace", label: "Vector Space", num_components: 1, default_value: ["uvtangent"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["uvtangent", "object", "world"], menu_labels: ["UV Tangent Space", "Object Space", "World Space"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableBumpOrNormalTexture == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ normalTexType != normal normalTexType != vectordisp }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "normalTexScale", label: "Effect Scale", num_components: 1, default_value: [1], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableBumpOrNormalTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "normalTexture", label: "Texture Path", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableBumpOrNormalTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "normalTexUdim", label: "UDIM Filename Expansion", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableBumpOrNormalTexture == 0 }");
			hou_parm_template3.setHelp("UDIM texture filename expansion, the UDIM coordinate is computed based on the uv information.");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "normalTexWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableBumpOrNormalTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "normalTexFilter", label: "Filter", num_components: 1, default_value: ["gauss"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["box", "gauss", "bartlett", "sinc", "hanning", "blackman", "catrom", "mitchell"], menu_labels: ["Box", "Gaussian", "Bartlett/Triangular", "Sinc Sharpening", "Hanning", "Blackman", "Catmull-Rom", "Mitchell"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableBumpOrNormalTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "normalTexFilterWidth", label: "Filter Width", num_components: 1, default_value: [1], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableBumpOrNormalTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "normalTexChannel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableBumpOrNormalTexture == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ normalTexType != bump normalTexType != disp }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "normalTexImagePlane", label: "Image Plane", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableBumpOrNormalTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "normalTexNormalSpace", label: "Normal Space", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1"], menu_labels: ["0 to 1", "-1 to 1"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableBumpOrNormalTexture == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ normalTexType != normal }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "normalTexNormalFlipX", label: "Flip X", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableBumpOrNormalTexture == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ normalTexType != normal }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "normalTexNormalFlipY", label: "Flip Y", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableBumpOrNormalTexture == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ normalTexType != normal }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "shading_15_1", label: "Coat", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "separateCoatNormals", label: "Separate Coat Normals", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "enableCoatNormalTexture", label: "Enable", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ separateCoatNormals == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coatNormalTexType", label: "Texture Type", num_components: 1, default_value: ["normal"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["bump", "normal"], menu_labels: ["Bump", "Normal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ separateCoatNormals == 0 } { enableCoatNormalTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coatNormalTexColorSpace", label: "Texture Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["auto", "linear"], menu_labels: ["Automatic", "Linear"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ separateCoatNormals == 0 } { enableCoatNormalTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coatNormalTexVectorSpace", label: "Vector Space", num_components: 1, default_value: ["uvtangent"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["uvtangent", "object", "world"], menu_labels: ["UV Tangent Space", "Object Space", "World Space"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ separateCoatNormals == 0 } { enableCoatNormalTexture == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatNormalTexType != normal coatNormalTexType != vectordisp }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "coatNormalTexScale", label: "Effect Scale", num_components: 1, default_value: [1], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ separateCoatNormals == 0 } { enableCoatNormalTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coatNormalTexture", label: "Texture Path", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ separateCoatNormals == 0 } { enableCoatNormalTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "coatNormalTexUdim", label: "UDIM Filename Expansion", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ separateCoatNormals == 0 } { enableCoatNormalTexture == 0 }");
			hou_parm_template3.setHelp("UDIM texture filename expansion, the UDIM coordinate is computed based on the uv information.");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coatNormalTexWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ separateCoatNormals == 0 } { enableCoatNormalTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coatNormalTexFilter", label: "Filter", num_components: 1, default_value: ["gauss"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["box", "gauss", "bartlett", "sinc", "hanning", "blackman", "catrom", "mitchell"], menu_labels: ["Box", "Gaussian", "Bartlett/Triangular", "Sinc Sharpening", "Hanning", "Blackman", "Catmull-Rom", "Mitchell"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ separateCoatNormals == 0 } { enableCoatNormalTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "coatNormalTexFilterWidth", label: "Filter Width", num_components: 1, default_value: [1], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ separateCoatNormals == 0 } { enableCoatNormalTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "coatNormalTexChannel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ separateCoatNormals == 0 } { enableCoatNormalTexture == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatNormalTexType != bump coatNormalTexType != disp }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coatNormalTexImagePlane", label: "Image Plane", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ separateCoatNormals == 0 } { enableCoatNormalTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "coatNormalTexNormalSpace", label: "Normal Space", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1"], menu_labels: ["0 to 1", "-1 to 1"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ separateCoatNormals == 0 } { enableCoatNormalTexture == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatNormalTexType != normal }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "coatNormalTexNormalFlipX", label: "Flip X", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ separateCoatNormals == 0 } { enableCoatNormalTexture == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatNormalTexType != normal }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "coatNormalTexNormalFlipY", label: "Flip Y", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ separateCoatNormals == 0 } { enableCoatNormalTexture == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ coatNormalTexType != normal }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "diffuse_folder_14_3", label: "Displacement", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "shop_disable_displace_shader", label: "Disable Displace Shader", default_value: false, default_expression: "!ch(\"enableDispTexture\") && !ch(\"enableDispNoise\")", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.hide(true);
			hou_parm_template2.setHelp("None");
			hou_parm_template2.setTags({"spare_category": "Shaders"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder221", label: "General", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vm_displacebound", label: "Displacement Bound", num_components: 1, default_value: [0], default_expression: ["1.01*max(ch(\"enableDispTexture\")*max(abs((1.0+ch(\"dispTexOffset\"))*ch(\"dispTexScale\")), abs(ch(\"dispTexOffset\")*ch(\"dispTexScale\"))), ch(\"enableDispNoise\")*abs(ch(\"dispNoiseAmp\")))"], default_expression_language: [hou.scriptLanguage.Hscript], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableDispMap == 0 enableNoise == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": ""});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vm_truedisplace", label: "True Displacements", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableDispMap == 0 enableNoise == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": ""});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder222", label: "Map", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template2.setTabConditional(hou.parmCondType.HideWhen, "{ enableDispMap == 0 }");
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "enableDispTexture", label: "Enable Texture Displacement", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "dispTexType", label: "Texture Type", num_components: 1, default_value: ["disp"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["disp", "vectordisp"], menu_labels: ["Displacement Along Normal", "Vector Displacement"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ enableDispTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "dispTexColorSpace", label: "Texture Color Space", num_components: 1, default_value: ["linear"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["auto", "linear"], menu_labels: ["Automatic", "Linear"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ enableDispTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "dispTexVectorSpace", label: "Vector Space", num_components: 1, default_value: ["uvtangent"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["uvtangent", "object", "world"], menu_labels: ["UV Tangent Space", "Object Space", "World Space"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ enableDispTexture == 0 } { dispTexType != normal dispTexType != vectordisp }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "dispTexOffset", label: "Offset", num_components: 1, default_value: [null], min: null, max: 0, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ enableDispTexture == 0 } { dispTexType != bump dispTexType != disp }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "dispTexScale", label: "Effect Scale", num_components: 1, default_value: [1], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ enableDispTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "dispTexTexture", label: "Texture Path", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ enableDispTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "dispTexChannel", label: "Channel", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Luminance", "Red", "Green", "Blue"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ enableDispTexture == 0 } { dispTexType != bump dispTexType != disp }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "dispTexWrap", label: "Wrap", num_components: 1, default_value: ["repeat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["repeat", "streak", "decal"], menu_labels: ["Repeat", "Streak", "Decal"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ enableDispTexture == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "dispTexFilter", label: "Filter", num_components: 1, default_value: ["gauss"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["box", "gauss", "bartlett", "sinc", "hanning", "blackman", "catrom", "mitchell"], menu_labels: ["Box", "Gaussian", "Bartlett/Triangular", "Sinc Sharpening", "Hanning", "Blackman", "Catmull-Rom", "Mitchell"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ enableDispTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "dispTexfilterWidth", label: "Filter Width", num_components: 1, default_value: [1], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ enableDispTexture == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder223", label: "Noise", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template2.setTabConditional(hou.parmCondType.HideWhen, "{ enableNoise == 0 }");
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "enableDispNoise", label: "Enable Noise Displacement", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "dispNoiseType", label: "Noise Type", num_components: 1, default_value: ["xnoise"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["pnoise", "onoise", "xnoise", "snoise", "anoise"], menu_labels: ["Perlin Noise", "Original Perlin Noise", "Simplex Noise", "Sparse Convolution Noise", "Alligator Noise"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableNoise == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ enableDispNoise == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "dispNoiseFreq", label: "Frequency", num_components: 3, default_value: [10, 10, 10], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableNoise == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ enableDispNoise == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "dispNoiseOffset", label: "Offset", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableNoise == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ enableDispNoise == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "dispNoiseAmp", label: "Amplitude", num_components: 1, default_value: [1], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableNoise == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ enableDispNoise == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "dispNoiseRough", label: "Roughness", num_components: 1, default_value: [0.5], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableNoise == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ enableDispNoise == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "dispNoiseAtten", label: "Attenuation", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableNoise == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ enableDispNoise == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "dispNoiseTurb", label: "Turbulence", num_components: 1, default_value: [5], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ enableNoise == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ enableDispNoise == 0 }");
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "diffuse_folder_14_4", label: "Bake", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2 = new hou.IntParmTemplate({name: "bake_samples", label: "Samples", num_components: 1, default_value: [128], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "bake_normalspace", label: "Normal Space", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1"], menu_labels: ["0 to 1", "-1 to 1"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "bake_tangentnormalflipx", label: "Tangent Normal Flip X", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "bake_tangentnormalflipy", label: "Tangent Normal Flip Y", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "bake_include_disp_nt", label: "Disp In Tangent Normal", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "bake_occlusionbias", label: "Occlusion Bias", num_components: 1, default_value: [0.5], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "bake_cavitydistance", label: "Cavity Distance", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "bake_cavitybias", label: "Cavity Bias", num_components: 1, default_value: [0.5], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "bake_curvaturescale", label: "Curvature Scale", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "diffuse_folder_14_5", label: "Settings", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder224", label: "Component Labels", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.StringParmTemplate({name: "difflabel", label: "Diffuse", num_components: 1, default_value: ["diffuse"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "baselabel", label: "Base Reflection", num_components: 1, default_value: ["reflect"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "coatlabel", label: "Coat Reflection", num_components: 1, default_value: ["coat"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder225", label: "Misc", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "udim", label: "UDIM Filename Expansion", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"parmvop": "1", "shaderparmcontexts": "surface displace"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "diffuse_folder_14_6", label: "OpenGL", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder226", label: "Surface", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "ogl_light", label: "Use Lighting", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setHelp("None");
			hou_parm_template3.setTags({"spare_category": "OGL"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.SeparatorParmTemplate({name: "sepparm6"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "ogl_alpha", label: "OGL Alpha", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setHelp("None");
			hou_parm_template3.setTags({"spare_category": "OGL"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "ogl_cutout", label: "Transparent Texture Alpha", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setHelp("None");
			hou_parm_template3.setTags({"spare_category": "OGL"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "ogl_amb", label: "OGL Ambient", num_components: 3, default_value: [1, 1, 1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setHelp("None");
			hou_parm_template3.setTags({"spare_category": "OGL"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "ogl_emit", label: "OGL Emission", num_components: 3, default_value: [0, 0, 0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setHelp("None");
			hou_parm_template3.setTags({"spare_category": "OGL"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.SeparatorParmTemplate({name: "sepparm12"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "ogl_diff", label: "OGL Diffuse", num_components: 3, default_value: [0, 0, 0], default_expression: ["(1-ch(\"metallic\")) * ch(\"basecolorr\")", "(1-ch(\"metallic\")) * ch(\"basecolorg\")", "(1-ch(\"metallic\")) * ch(\"basecolorb\")"], default_expression_language: [hou.scriptLanguage.Hscript, hou.scriptLanguage.Hscript, hou.scriptLanguage.Hscript], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setHelp("None");
			hou_parm_template3.setTags({"spare_category": "OGL"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "ogl_numtex", label: "Texture Layers", folder_type: hou.folderType.MultiparmBlock, default_value: 1, ends_tab_group: false});
			hou_parm_template3.setTags({"spare_category": "OGL"});
			let hou_parm_template4 = new hou.StringParmTemplate({name: "ogl_tex#", label: "Texture #", num_components: 1, default_value: ["`ifs(ch(\"basecolor_useTexture\"), chs(\"basecolor_texture\"), \"\")`"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template4.setHelp("None");
			hou_parm_template4.setTags({"filechooser_mode": "read"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "ogl_tex_min_filter#", label: "Minification Filter", num_components: 1, default_value: ["GL_LINEAR_MIPMAP_LINEAR"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["GL_NEAREST", "GL_LINEAR", "GL_NEAREST_MIPMAP_NEAREST", "GL_LINEAR_MIPMAP_NEAREST", "GL_NEAREST_MIPMAP_LINEAR", "GL_LINEAR_MIPMAP_LINEAR"], menu_labels: ["Poor: Nearest", "Poor: Linear", "Fastest (Nearest/Nearest)", "Better (Linear/Nearest)", "Good (Nearest/Linear)", "Best (Linear/Linear)"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template4.setHelp("None");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "ogl_tex_mag_filter#", label: "Magnification Filter", num_components: 1, default_value: ["GL_LINEAR"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["GL_NEAREST", "GL_LINEAR"], menu_labels: ["Nearest", "Linear"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template4.setHelp("None");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "ogl_clamping_mode#", label: "Clamp Texture", default_value: false});
			hou_parm_template4.setHelp("None");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.SeparatorParmTemplate({name: "sepparm8"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "ogl_spec_model", label: "Specular Model", num_components: 1, default_value: ["ggx"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["phong", "blinn", "ggx"], menu_labels: ["Phong", "Blinn", "GGX"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setHelp("Specifies the model to use for specular highlights on the material: phong, blinn or ggx. Phong and Blinn are quick approximations, GGX is a more realistic and computationally expensive specular model.");
			hou_parm_template3.setTags({"cook_dependent": "1", "spare_category": "OGL"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "ogl_spec", label: "OGL Specular", num_components: 3, default_value: [0, 0, 0], default_expression: ["hou.phm().get_ogl_spec(hou.pwd(), 0)", "hou.phm().get_ogl_spec(hou.pwd(), 1)", "hou.phm().get_ogl_spec(hou.pwd(), 2)"], default_expression_language: [hou.scriptLanguage.Python, hou.scriptLanguage.Python, hou.scriptLanguage.Python], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setHelp("None");
			hou_parm_template3.setTags({"spare_category": "OGL"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "ogl_specmap", label: "OGL Specular Map", num_components: 1, default_value: ["`ifs(ch(\"reflect_useTexture\"), chs(\"reflect_texture\"), \"\")`"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setHelp("None");
			hou_parm_template3.setTags({"filechooser_mode": "read", "spare_category": "OGL"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "ogl_speclayer", label: "Specular Layer", num_components: 1, default_value: [0], min: 0, max: 15, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ ogl_specmap == \\\"\\\" }");
			hou_parm_template3.setHelp("None");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "ogl_rough", label: "OGL Roughness", num_components: 1, default_value: [0], default_expression: ["0.04+0.96*ch(\"rough\")"], default_expression_language: [hou.scriptLanguage.Hscript], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setHelp("None");
			hou_parm_template3.setTags({"spare_category": "OGL"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "ogl_roughmap", label: "OGL Roughness Map", num_components: 1, default_value: ["`ifs(ch(\"rough_useTexture\"), chs(\"rough_texture\"), \"\")`"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setHelp("Texture map for Roughness. Rougher surfaces have larger but dimmer specular highlights. This overrides the constant ogl_rough.");
			hou_parm_template3.setTags({"cook_dependent": "1", "filechooser_mode": "read", "spare_category": "OGL"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "ogl_roughmap_comp", label: "OGL Roughness Channel", num_components: 1, default_value: [0], min: 0, max: 3, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: ["0", "1", "2", "3"], menu_labels: ["Red", "Green", "Blue", "Alpha"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ ogl_roughmap == \\\"\\\" }");
			hou_parm_template3.setHelp("Texture component used for Roughness within the Roughness texture map, which can be Red, Green, Blue or Alpha. This allows roughness to be sourced from packed texture maps which contain parameters in the other texture channels.");
			hou_parm_template3.setTags({"cook_dependent": "1"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "ogl_ior_inner", label: "OGL Inner IOR", num_components: 1, default_value: [0], default_expression: ["m = 0.99*ch(\"metallic\")\nm=m*m*m\nfr = m + (1-m) * 0.8*0.08*ch(\"reflect\")\nreturn (fr- 1) / (-fr + 2*sqrt(fr) - 1.0)"], default_expression_language: [hou.scriptLanguage.Python], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setHelp("Index of refraction of the material, used for fresnel calculations.");
			hou_parm_template3.setTags({"cook_dependent": "1", "spare_category": "OGL"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "ogl_ior_outer", label: "OGL Outer IOR", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setHelp("Index of refraction of the medium surrounding the object, usually 1 for air.");
			hou_parm_template3.setTags({"cook_dependent": "1", "spare_category": "OGL"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "ogl_adjustshiny", label: "Adjust Shininess with Alpha Channel", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ ogl_specmap == \\\"\\\" }");
			hou_parm_template3.setHelp("None");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "ogl_shinyrange", label: "Shininess Range", num_components: 2, default_value: [10, 30], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ ogl_specmap == \\\"\\\" } { ogl_adjustshiny == 0 }");
			hou_parm_template3.setHelp("None");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.SeparatorParmTemplate({name: "sepparm10"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "ogl_opacitymap", label: "OGL Opacity Map", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setHelp("None");
			hou_parm_template3.setTags({"filechooser_mode": "read", "spare_category": "OGL"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "ogl_opacitylayer", label: "Opacity Layer", num_components: 1, default_value: [0], min: 0, max: 15, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ ogl_opacitymap == \\\"\\\" }");
			hou_parm_template3.setHelp("None");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder226_1", label: "Displace", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template3 = new hou.StringParmTemplate({name: "ogl_bumpmap", label: "OGL Bump Map", num_components: 1, default_value: ["`ifs(ch(\"enableBumpOrNormalTexture\") && !strcmp(chs(\"normalTexType\"), \"bump\"), chs(\"normalTexture\"), \"\")`"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setHelp("None");
			hou_parm_template3.setTags({"filechooser_mode": "read"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "ogl_bumptype", label: "Bump Map Type", num_components: 1, default_value: ["height"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["height", "uv", "xyz"], menu_labels: ["Height Map", "UV Bump Map", "XYZ Bump Map"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ ogl_bumpmap == \\\"\\\" }");
			hou_parm_template3.setHelp("None");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "ogl_bumpscale", label: "Bump Scale", num_components: 1, default_value: [0], default_expression: ["ch(\"normalTexScale\")"], default_expression_language: [hou.scriptLanguage.Hscript], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ ogl_bumpmap == \\\"\\\" }");
			hou_parm_template3.setHelp("None");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "ogl_bumpbias", label: "Bump Map Range", num_components: 1, default_value: ["zeroone"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["zeroone", "centered"], menu_labels: ["0 to 1", "-1 to 1"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ ogl_bumpmap == \\\"\\\" }");
			hou_parm_template3.setHelp("None");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "ogl_bumplayer", label: "Bump Layer", num_components: 1, default_value: [0], min: 0, max: 15, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ ogl_bumpmap == \\\"\\\" }");
			hou_parm_template3.setHelp("None");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "ogl_bumpinvert", label: "Invert Bumps", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ ogl_bumpmap == \\\"\\\" }");
			hou_parm_template3.setHelp("None");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.SeparatorParmTemplate({name: "sepparm7"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "ogl_normalmap", label: "OGL Normal Map", num_components: 1, default_value: ["`ifs(ch(\"enableBumpOrNormalTexture\") && !strcmp(chs(\"normalTexType\"), \"normal\"), chs(\"normalTexture\"), \"\")`"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setHelp("None");
			hou_parm_template3.setTags({"filechooser_mode": "read", "spare_category": "OGL"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "ogl_normalmap_type", label: "OGL Normal Map Type", num_components: 1, default_value: ["ifs(!strcmp(chs(\"normalTexVectorSpace\"), \"uvtangent\"), \"tangent\", \"world\")"], default_expression: ["ifs(!strcmp(chs(\"normalTexVectorSpace\"), \"uvtangent\"), \"tangent\", \"world\")"], default_expression_language: [hou.scriptLanguage.Hscript], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["tangent", "world"], menu_labels: ["Tangent Space", "World Space"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setHelp("None");
			hou_parm_template3.setTags({"cook_dependent": "1"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "ogl_normalbias", label: "Normal Map Range", num_components: 1, default_value: ["ifs(ch(\"normalTexNormalSpace\"), \"centered\", \"zeroone\")"], default_expression: ["ifs(ch(\"normalTexNormalSpace\"), \"centered\", \"zeroone\")"], default_expression_language: [hou.scriptLanguage.Hscript], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["zeroone", "centered"], menu_labels: ["0 to 1", "-1 to 1"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ ogl_normalmap == \\\"\\\" }");
			hou_parm_template3.setHelp("None");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "ogl_normalflipx", label: "Flip Normal Map X", default_value: false, default_expression: "ch(\"normalTexNormalFlipX\")", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ ogl_normalmap == \\\"\\\" }");
			hou_parm_template3.setHelp("None");
			hou_parm_template3.setTags({"cook_dependent": "1"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "ogl_normalflipy", label: "Flip Normal Map Y", default_value: false, default_expression: "ch(\"normalTexNormalFlipY\")", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ ogl_normalmap == \\\"\\\" }");
			hou_parm_template3.setHelp("None");
			hou_parm_template3.setTags({"cook_dependent": "1"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "ogl_normallayer", label: "Normal Layer", num_components: 1, default_value: [0], min: 0, max: 15, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ ogl_normalmap == \\\"\\\" }");
			hou_parm_template3.setHelp("None");
			hou_parm_template3.setTags({"spare_category": "OGL"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.SeparatorParmTemplate({name: "sepparm9"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "ogl_displacemap", label: "GL Displacement Map", num_components: 1, default_value: ["`ifs(ch(\"enableDispTexture\"),chs(\"dispTexTexture\"),\"\")`"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setHelp("None");
			hou_parm_template3.setTags({"cook_dependent": "1", "filechooser_mode": "read"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "ogl_displacescale", label: "Displace Scale", num_components: 1, default_value: [0], default_expression: ["ch(\"dispTexScale\")"], default_expression_language: [hou.scriptLanguage.Hscript], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ ogl_displacemap == \\\"\\\" }");
			hou_parm_template3.setHelp("None");
			hou_parm_template3.setTags({"cook_dependent": "1"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "ogl_displaceoffset", label: "Displace Offset", num_components: 1, default_value: [0], default_expression: ["ch(\"dispTexOffset\")"], default_expression_language: [hou.scriptLanguage.Hscript], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ ogl_displacemap == \\\"\\\" }");
			hou_parm_template3.setHelp("None");
			hou_parm_template3.setTags({"cook_dependent": "1"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder226_2", label: "Environment", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template3 = new hou.StringParmTemplate({name: "ogl_envmap", label: "OGL Environment Map", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setHelp("None");
			hou_parm_template3.setTags({"filechooser_mode": "read"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "ogl_envrotate", label: "Env Map Rotation", num_components: 3, default_value: [0, 0, 0], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ ogl_envmap == \\\"\\\" }");
			hou_parm_template3.setHelp("None");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "ogl_envrotorder", label: "Env Rotate Order", num_components: 1, default_value: ["xyz"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: ["xyz", "xzy", "yxz", "yzx", "zxy", "zyx"], menu_labels: ["Rx Ry Rz", "Rx Rz Ry", "Ry Rx Rz", "Ry Rz Rx", "Rz Rx Ry", "Rz Ry Rx"], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template3.setHelp("None");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "ogl_envscale", label: "Reflection Intensity", num_components: 1, default_value: [0.1], min: 0, max: 2, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ ogl_envmap == \\\"\\\" }");
			hou_parm_template3.setHelp("None");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "Cd", label: "Attribute Color", num_components: 3, default_value: [1, 1, 1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "Alpha", label: "Attribute Alpha", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.hide(true);
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "bake_curvaturebias", label: "Curvature Bias", num_components: 1, default_value: [0.5], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.setTags({"parmvop": "1", "shaderparmcontexts": "surface"});
			hou_parm_template_group.append(hou_parm_template);
			
            this.parmTemplateGroup = hou_parm_template_group;
            this.parmTemplateGroup.linkNode(this);
        }
    }
    hou.registerType('SHOP/Material/principledshader',_hnt_SHOP_principledshader)
    return _hnt_SHOP_principledshader
}
        