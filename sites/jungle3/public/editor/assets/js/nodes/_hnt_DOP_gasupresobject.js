
export default function (hou) {
    class _hnt_DOP_gasupresobject extends hou.extend(hou._HoudiniBase).with(hou._SubgraphMixin) {
        static is_root = false;
        static id = 'DOP/Other/gasupresobject';
        static category = '/DOP';
        static houdiniType = 'gasupresobject';
        static title = 'Gas Up Res Object';
        static icon = '/editor/assets/imgs/nodes/_hnt_DOP_gasupresobject.svg';
        constructor() {
            super();
            this.flags['houdini_type'] = this.__proto__.constructor.houdiniType;
            
            const inputs = [];
            const outputs = ['DOP', 'DOP', 'DOP', 'DOP'];

            for(var i=0;i<inputs.length;i++) this.addInput(''+i,inputs[i]);        
            for(var j=0;j<outputs.length;j++) this.addOutput(''+j,outputs[j]);
        }
        parmTemplatesInit() {
            let hou_parm_template_group = new hou.ParmTemplateGroup();
			this.parmTemplateGroup = hou_parm_template_group;
			let hou_parm_template = new hou.ToggleParmTemplate({name: "usesimframe", label: "Creation Frame Specifies Simulation Frame", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.IntParmTemplate({name: "createframe", label: "Creation Frame", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.IntParmTemplate({name: "numobjects", label: "Number of Objects", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "object_name", label: "Object Name", num_components: 1, default_value: ["$OS"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ToggleParmTemplate({name: "solvefirstframe", label: "Solve on Creation Frame", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ButtonParmTemplate({name: "hidelinkui", label: "Hide Linked UI <<"});
			hou_parm_template.setScriptCallback("hou.pwd().hdaModule().showLinkedUI(kwargs['node'], False)");
			hou_parm_template.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template.setTags({"script_callback": "hou.pwd().hdaModule().showLinkedUI(kwargs['node'], False)", "script_callback_language": "python"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ButtonParmTemplate({name: "showlinkui", label: "Show Linked UI >>"});
			hou_parm_template.hide(true);
			hou_parm_template.setScriptCallback("hou.pwd().hdaModule().showLinkedUI(kwargs['node'], True)");
			hou_parm_template.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template.setTags({"script_callback": "hou.pwd().hdaModule().showLinkedUI(kwargs['node'], True)", "script_callback_language": "python"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ToggleParmTemplate({name: "twod", label: "Two Dimensional", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template.setJoinWithNext(true);
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.MenuParmTemplate({name: "voxelplane", label: "Plane", menu_items: ["xy", "yz", "zx"], menu_labels: ["XY plane", "YZ plane", "ZX plane"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.MenuParmTemplate({name: "uniformvoxels", label: "Division Method", menu_items: ["nonsquare", "x", "y", "z", "max", "size"], menu_labels: ["Non Square", "X Axis", "Y Axis", "Z Axis", "Max Axis", "By Size"], default_value: 4, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.IntParmTemplate({name: "uniformdiv", label: "Uniform Divisions", num_components: 1, default_value: [32], min: 1, max: 300, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ uniformvoxels == nonsquare } { uniformvoxels == size }");
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.IntParmTemplate({name: "div", label: "Divisions", num_components: 3, default_value: [10, 10, 10], min: 1, max: 1000, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ uniformvoxels != nonsquare }");
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "divsize", label: "Division Size", num_components: 1, default_value: [0.1], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ uniformvoxels != size }");
			hou_parm_template.setTags({"autoscope": "0000000000000000", "units": "m1"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "size", label: "Size", num_components: 3, default_value: [5, 5, 5], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FloatParmTemplate({name: "t", label: "Center", num_components: 3, default_value: [0, 0, 0], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template.setTags({"autoscope": "0000000000000000"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ToggleParmTemplate({name: "densityscale", label: "Import Density", default_value: false});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ToggleParmTemplate({name: "norestimport", label: "Do Not Import Rest", default_value: false});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ToggleParmTemplate({name: "accuratesmokegeneration", label: "Accurate Smoke Model", default_value: false});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "std_switcher_0", label: "Guides", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			let hou_parm_template2 = new hou.FolderParmTemplate({name: "folder0", label: "Visualization", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			let hou_parm_template3 = new hou.ToggleParmTemplate({name: "density_vis_showguide", label: "Show Guide Geometry", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "density_vis_color", label: "Density", num_components: 3, default_value: [1, 1, 1], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "surface_vis_showguide", label: "Show Guide Geometry", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "surface_vis_color", label: "Surface", num_components: 3, default_value: [0, 0.9, 0.9], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "temperature_vis_showguide", label: "Show Guide Geometry", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "temperature_vis_color", label: "Temperature", num_components: 3, default_value: [1, 0, 0], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "burn_vis_showguide", label: "Show Guide Geometry", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "burn_vis_color", label: "Burn", num_components: 3, default_value: [1, 0.92, 0], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "heat_vis_showguide", label: "Show Guide Geometry", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "heat_vis_color", label: "Heat", num_components: 3, default_value: [1, 1, 0], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vel_vis_showguide", label: "Show Guide Geometry", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vel_vis_color", label: "Velocity", num_components: 3, default_value: [1, 1, 1], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "turbscale_vis_showguide", label: "Show Guide Geometry", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "turbscale_vis_color", label: "Turbulence", num_components: 3, default_value: [1, 0, 1], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.ColorSquare, naming_scheme: hou.parmNamingScheme.RGBA});
			hou_parm_template3.setTags({"autoscope": "0000000000000000"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder0_1", label: "Density", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"import_enable": "1", "import_source": "op:density_vis"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "density_vis_usebox", label: "Bounding Box", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:density_vis", "import_token": "usebox"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "density_vis_useboxhash", label: "Bounding Box Hash", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ density_vis_usebox == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:density_vis", "import_token": "useboxhash"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "density_vis_usesmoke", label: "Use Smoke   ", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:density_vis", "import_token": "usesmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "density_vis_guideremapsmoke", label: "Remap Smoke", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ density_vis_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:density_vis", "import_token": "guideremapsmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "density_vis_guidesmokedensity", label: "Smoke Density", num_components: 1, default_value: [10], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ density_vis_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:density_vis", "import_token": "guidesmokedensity"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "density_vis_guideuseplane", label: "Use Plane     ", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ density_vis_usesmoke == 1 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:density_vis", "import_token": "guideuseplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "density_vis_guideplane", label: "Plane Orientation", menu_items: ["xy", "yz", "zx"], menu_labels: ["XY plane", "YZ plane", "ZX plane"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ density_vis_usesmoke == 1 } { density_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:density_vis", "import_token": "guideplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "density_vis_guideplaneval", label: "Plane Position", num_components: 1, default_value: [0], min: null, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ density_vis_usesmoke == 1 } { density_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:density_vis", "import_token": "guideplaneval"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "density_vis_guidevismode", label: "Visualization Mode", menu_items: ["none", "false", "pink", "mono", "blackbody", "bipartite"], menu_labels: ["No Mapping", "Infra-Red", "White to Red", "Grayscale", "Black Body", "Two-Tone"], default_value: 4, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ density_vis_usesmoke == 1 density_vis_guideremapsmoke == 0 } { density_vis_usesmoke == 0 density_vis_guideuseplane == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:density_vis", "import_token": "guidevismode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "density_vis_guidevisdensitymode", label: "Alpha Mapping", menu_items: ["none", "increasing", "decreasing", "hill", "valley", "step", "square"], menu_labels: ["No Mapping", "Increasing", "Decreasing", "Hill", "Valley", "Step", "Square"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ density_vis_usesmoke == 1 density_vis_guideremapsmoke == 0 } { density_vis_usesmoke == 0 density_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:density_vis", "import_token": "guidevisdensitymode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "density_vis_guiderangemode", label: "Specify Range by Min/Max", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ density_vis_usesmoke == 1 density_vis_guideremapsmoke == 0 } { density_vis_usesmoke == 0 density_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:density_vis", "import_token": "guiderangemode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "density_vis_guiderange", label: "Guide Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ density_vis_usesmoke == 1 density_vis_guideremapsmoke == 0 } { density_vis_usesmoke == 0 density_vis_guideuseplane == 0 } { density_vis_guiderangemode == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:density_vis", "import_token": "guiderange"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "density_vis_guiderangecenter", label: "Guide Range Center", num_components: 1, default_value: [0.5], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ density_vis_usesmoke == 1 density_vis_guideremapsmoke == 0 } { density_vis_usesmoke == 0 density_vis_guideuseplane == 0 } { density_vis_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:density_vis", "import_token": "guiderangecenter"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "density_vis_guiderangesize", label: "Guide Range Width", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ density_vis_usesmoke == 1 density_vis_guideremapsmoke == 0 } { density_vis_usesmoke == 0 density_vis_guideuseplane == 0 } { density_vis_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:density_vis", "import_token": "guiderangesize"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "density_vis_guideiso", label: "Iso Offset", num_components: 1, default_value: [0], min: null, max: 5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ density_vis_usesmoke == 1 } { density_vis_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:density_vis", "import_token": "guideiso"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "density_vis_guideinvert", label: "Invert Iso", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ density_vis_usesmoke == 1 } { density_vis_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:density_vis", "import_token": "guideinvert"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder0_2", label: "Surface", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"import_enable": "1", "import_source": "op:surface_vis"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "surface_vis_usebox", label: "Bounding Box", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "usebox"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "surface_vis_useboxhash", label: "Bounding Box Hash", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_vis_usebox == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "useboxhash"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "surface_vis_usesmoke", label: "Use Smoke   ", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "usesmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "surface_vis_guideremapsmoke", label: "Remap Smoke", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_vis_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "guideremapsmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "surface_vis_guidesmokedensity", label: "Smoke Density", num_components: 1, default_value: [10], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_vis_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "guidesmokedensity"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "surface_vis_guideuseplane", label: "Use Plane     ", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_vis_usesmoke == 1 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "guideuseplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "surface_vis_guideplane", label: "Plane Orientation", menu_items: ["xy", "yz", "zx"], menu_labels: ["XY plane", "YZ plane", "ZX plane"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_vis_usesmoke == 1 } { surface_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "guideplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "surface_vis_guideplaneval", label: "Plane Position", num_components: 1, default_value: [0], min: null, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_vis_usesmoke == 1 } { surface_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "guideplaneval"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "surface_vis_guidevismode", label: "Visualization Mode", menu_items: ["none", "false", "pink", "mono", "blackbody", "bipartite"], menu_labels: ["No Mapping", "Infra-Red", "White to Red", "Grayscale", "Black Body", "Two-Tone"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_vis_usesmoke == 1 surface_vis_guideremapsmoke == 0 } { surface_vis_usesmoke == 0 surface_vis_guideuseplane == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "guidevismode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "surface_vis_guidevisdensitymode", label: "Alpha Mapping", menu_items: ["none", "increasing", "decreasing", "hill", "valley", "step", "square"], menu_labels: ["No Mapping", "Increasing", "Decreasing", "Hill", "Valley", "Step", "Square"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_vis_usesmoke == 1 surface_vis_guideremapsmoke == 0 } { surface_vis_usesmoke == 0 surface_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "guidevisdensitymode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "surface_vis_guiderangemode", label: "Specify Range by Min/Max", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_vis_usesmoke == 1 surface_vis_guideremapsmoke == 0 } { surface_vis_usesmoke == 0 surface_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "guiderangemode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "surface_vis_guiderange", label: "Guide Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_vis_usesmoke == 1 surface_vis_guideremapsmoke == 0 } { surface_vis_usesmoke == 0 surface_vis_guideuseplane == 0 } { surface_vis_guiderangemode == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "guiderange"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "surface_vis_guiderangecenter", label: "Guide Range Center", num_components: 1, default_value: [0.5], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_vis_usesmoke == 1 surface_vis_guideremapsmoke == 0 } { surface_vis_usesmoke == 0 surface_vis_guideuseplane == 0 } { surface_vis_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "guiderangecenter"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "surface_vis_guiderangesize", label: "Guide Range Width", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_vis_usesmoke == 1 surface_vis_guideremapsmoke == 0 } { surface_vis_usesmoke == 0 surface_vis_guideuseplane == 0 } { surface_vis_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "guiderangesize"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "surface_vis_guideiso", label: "Iso Offset", num_components: 1, default_value: [0], min: null, max: 5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_vis_usesmoke == 1 } { surface_vis_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "guideiso"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "surface_vis_guideinvert", label: "Invert Iso", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ surface_vis_usesmoke == 1 } { surface_vis_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:surface_vis", "import_token": "guideinvert"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder0_3", label: "Temperature", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"import_enable": "1", "import_source": "op:temperature_vis"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "temperature_vis_usebox", label: "Bounding Box", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:temperature_vis", "import_token": "usebox"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "temperature_vis_useboxhash", label: "Bounding Box Hash", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ temperature_vis_usebox == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:temperature_vis", "import_token": "useboxhash"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "temperature_vis_usesmoke", label: "Use Smoke   ", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:temperature_vis", "import_token": "usesmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "temperature_vis_guideremapsmoke", label: "Remap Smoke", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ temperature_vis_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:temperature_vis", "import_token": "guideremapsmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "temperature_vis_guidesmokedensity", label: "Smoke Density", num_components: 1, default_value: [10], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ temperature_vis_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:temperature_vis", "import_token": "guidesmokedensity"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "temperature_vis_guideuseplane", label: "Use Plane     ", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ temperature_vis_usesmoke == 1 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:temperature_vis", "import_token": "guideuseplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "temperature_vis_guideplane", label: "Plane Orientation", menu_items: ["xy", "yz", "zx"], menu_labels: ["XY plane", "YZ plane", "ZX plane"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ temperature_vis_usesmoke == 1 } { temperature_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:temperature_vis", "import_token": "guideplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "temperature_vis_guideplaneval", label: "Plane Position", num_components: 1, default_value: [0], min: null, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ temperature_vis_usesmoke == 1 } { temperature_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:temperature_vis", "import_token": "guideplaneval"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "temperature_vis_guidevismode", label: "Visualization Mode", menu_items: ["none", "false", "pink", "mono", "blackbody", "bipartite"], menu_labels: ["No Mapping", "Infra-Red", "White to Red", "Grayscale", "Black Body", "Two-Tone"], default_value: 4, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ temperature_vis_usesmoke == 1 temperature_vis_guideremapsmoke == 0 } { temperature_vis_usesmoke == 0 temperature_vis_guideuseplane == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:temperature_vis", "import_token": "guidevismode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "temperature_vis_guidevisdensitymode", label: "Alpha Mapping", menu_items: ["none", "increasing", "decreasing", "hill", "valley", "step", "square"], menu_labels: ["No Mapping", "Increasing", "Decreasing", "Hill", "Valley", "Step", "Square"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ temperature_vis_usesmoke == 1 temperature_vis_guideremapsmoke == 0 } { temperature_vis_usesmoke == 0 temperature_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:temperature_vis", "import_token": "guidevisdensitymode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "temperature_vis_guiderangemode", label: "Specify Range by Min/Max", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ temperature_vis_usesmoke == 1 temperature_vis_guideremapsmoke == 0 } { temperature_vis_usesmoke == 0 temperature_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:temperature_vis", "import_token": "guiderangemode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "temperature_vis_guiderange", label: "Guide Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ temperature_vis_usesmoke == 1 temperature_vis_guideremapsmoke == 0 } { temperature_vis_usesmoke == 0 temperature_vis_guideuseplane == 0 } { temperature_vis_guiderangemode == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:temperature_vis", "import_token": "guiderange"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "temperature_vis_guiderangecenter", label: "Guide Range Center", num_components: 1, default_value: [0.5], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ temperature_vis_usesmoke == 1 temperature_vis_guideremapsmoke == 0 } { temperature_vis_usesmoke == 0 temperature_vis_guideuseplane == 0 } { temperature_vis_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:temperature_vis", "import_token": "guiderangecenter"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "temperature_vis_guiderangesize", label: "Guide Range Width", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ temperature_vis_usesmoke == 1 temperature_vis_guideremapsmoke == 0 } { temperature_vis_usesmoke == 0 temperature_vis_guideuseplane == 0 } { temperature_vis_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:temperature_vis", "import_token": "guiderangesize"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "temperature_vis_guideiso", label: "Iso Offset", num_components: 1, default_value: [0], min: null, max: 5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ temperature_vis_usesmoke == 1 } { temperature_vis_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:temperature_vis", "import_token": "guideiso"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "temperature_vis_guideinvert", label: "Invert Iso", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ temperature_vis_usesmoke == 1 } { temperature_vis_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:temperature_vis", "import_token": "guideinvert"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder0_4", label: "Velocity", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"import_enable": "1", "import_source": "op:vel_vis"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vel_vis_guideusebox", label: "Bounding Box", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vel_vis", "import_token": "guideusebox"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vel_vis_guideuseboxhash", label: "Bounding Box Hash", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vel_vis_guideusebox == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vel_vis", "import_token": "guideuseboxhash"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vel_vis_guideusesmoke", label: "Use Smoke", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vel_vis", "import_token": "guideusesmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vel_vis_guidescale", label: "Scale", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vel_vis", "import_token": "guidescale"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vel_vis_guideoverridediv", label: "Override Divisions", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vel_vis", "import_token": "guideoverridediv"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "vel_vis_guidediv", label: "Divisions", num_components: 3, default_value: [10, 10, 10], min: 1, max: 1000, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vel_vis_guideoverridediv == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vel_vis", "import_token": "guidediv"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vel_vis_guidebarbs", label: "Use Barbs on Vectors", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vel_vis_guideusesmoke == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vel_vis", "import_token": "guidebarbs"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vel_vis_guidepercomp", label: "Component Velocities", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vel_vis_guideusesmoke == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vel_vis", "import_token": "guidepercomp"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vel_vis_guideusestreamers", label: "Use Streamers", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vel_vis_guideusesmoke == 1 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vel_vis", "import_token": "guideusestreamers"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "vel_vis_guideuseplane", label: "Use Plane", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vel_vis_guideusesmoke == 1 } { vel_vis_guideusestreamers == 1 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vel_vis", "import_token": "guideuseplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "vel_vis_guideplane", label: "Plane Orientation", menu_items: ["xy", "yz", "zx"], menu_labels: ["XY plane", "YZ plane", "ZX plane"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vel_vis_guideusesmoke == 1 } { vel_vis_guideusestreamers == 0 vel_vis_guideuseplane == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vel_vis", "import_token": "guideplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vel_vis_guideplaneval", label: "Plane Position", num_components: 1, default_value: [0], min: null, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vel_vis_guideusesmoke == 1 } { vel_vis_guideusestreamers == 0 vel_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vel_vis", "import_token": "guideplaneval"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vel_vis_guidestreamerlen", label: "Streamer Length", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vel_vis_guideusesmoke == 1 } { vel_vis_guideusestreamers == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vel_vis", "import_token": "guidestreamerlen"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vel_vis_guidestreamerminspeed", label: "Streamer Minimum Speed", num_components: 1, default_value: [0.001], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vel_vis_guideusesmoke == 1 } { vel_vis_guideusestreamers == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vel_vis", "import_token": "guidestreamerminspeed"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "vel_vis_guidevistype", label: "Visualization Type", menu_items: ["none", "distance", "speed", "origin", "dir", "value"], menu_labels: ["None", "Distance", "Speed", "Origin", "Direction", "Value"], default_value: 2, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vel_vis_guideusesmoke == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vel_vis", "import_token": "guidevistype"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "vel_vis_guidevismode", label: "Visualization Mode", menu_items: ["false", "pink", "mono", "blackbody", "bipartite"], menu_labels: ["Infra-Red", "White to Red", "Grayscale", "Black Body", "Two-Tone"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vel_vis_guideusesmoke == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vel_vis", "import_token": "guidevismode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vel_vis_guidevisscale", label: "Visualization Scale", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vel_vis_guideusesmoke == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vel_vis", "import_token": "guidevisscale"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "vel_vis_guiderange", label: "Visualization Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ vel_vis_guideusesmoke == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:vel_vis", "import_token": "guiderange"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder0_5", label: "Burn", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"import_enable": "1", "import_source": "op:burn_vis"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "burn_vis_usebox", label: "Bounding Box", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:burn_vis", "import_token": "usebox"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "burn_vis_useboxhash", label: "Bounding Box Hash", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ burn_vis_usebox == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:burn_vis", "import_token": "useboxhash"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "burn_vis_usesmoke", label: "Use Smoke   ", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:burn_vis", "import_token": "usesmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "burn_vis_guideremapsmoke", label: "Remap Smoke", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ burn_vis_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:burn_vis", "import_token": "guideremapsmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "burn_vis_guidesmokedensity", label: "Smoke Density", num_components: 1, default_value: [10], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ burn_vis_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:burn_vis", "import_token": "guidesmokedensity"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "burn_vis_guideuseplane", label: "Use Plane     ", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ burn_vis_usesmoke == 1 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:burn_vis", "import_token": "guideuseplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "burn_vis_guideplane", label: "Plane Orientation", menu_items: ["xy", "yz", "zx"], menu_labels: ["XY plane", "YZ plane", "ZX plane"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ burn_vis_usesmoke == 1 } { burn_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:burn_vis", "import_token": "guideplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "burn_vis_guideplaneval", label: "Plane Position", num_components: 1, default_value: [0], min: null, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ burn_vis_usesmoke == 1 } { burn_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:burn_vis", "import_token": "guideplaneval"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "burn_vis_guidevismode", label: "Visualization Mode", menu_items: ["none", "false", "pink", "mono", "blackbody", "bipartite"], menu_labels: ["No Mapping", "Infra-Red", "White to Red", "Grayscale", "Black Body", "Two-Tone"], default_value: 4, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ burn_vis_usesmoke == 1 burn_vis_guideremapsmoke == 0 } { burn_vis_usesmoke == 0 burn_vis_guideuseplane == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:burn_vis", "import_token": "guidevismode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "burn_vis_guidevisdensitymode", label: "Alpha Mapping", menu_items: ["none", "increasing", "decreasing", "hill", "valley", "step", "square"], menu_labels: ["No Mapping", "Increasing", "Decreasing", "Hill", "Valley", "Step", "Square"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ burn_vis_usesmoke == 1 burn_vis_guideremapsmoke == 0 } { burn_vis_usesmoke == 0 burn_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:burn_vis", "import_token": "guidevisdensitymode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "burn_vis_guiderangemode", label: "Specify Range by Min/Max", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ burn_vis_usesmoke == 1 burn_vis_guideremapsmoke == 0 } { burn_vis_usesmoke == 0 burn_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:burn_vis", "import_token": "guiderangemode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "burn_vis_guiderange", label: "Guide Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ burn_vis_usesmoke == 1 burn_vis_guideremapsmoke == 0 } { burn_vis_usesmoke == 0 burn_vis_guideuseplane == 0 } { burn_vis_guiderangemode == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:burn_vis", "import_token": "guiderange"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "burn_vis_guiderangecenter", label: "Guide Range Center", num_components: 1, default_value: [0.5], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ burn_vis_usesmoke == 1 burn_vis_guideremapsmoke == 0 } { burn_vis_usesmoke == 0 burn_vis_guideuseplane == 0 } { burn_vis_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:burn_vis", "import_token": "guiderangecenter"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "burn_vis_guiderangesize", label: "Guide Range Width", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ burn_vis_usesmoke == 1 burn_vis_guideremapsmoke == 0 } { burn_vis_usesmoke == 0 burn_vis_guideuseplane == 0 } { burn_vis_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:burn_vis", "import_token": "guiderangesize"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "burn_vis_guideiso", label: "Iso Offset", num_components: 1, default_value: [0], min: null, max: 5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ burn_vis_usesmoke == 1 } { burn_vis_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:burn_vis", "import_token": "guideiso"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "burn_vis_guideinvert", label: "Invert Iso", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ burn_vis_usesmoke == 1 } { burn_vis_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:burn_vis", "import_token": "guideinvert"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder0_6", label: "Heat", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"import_enable": "1", "import_source": "op:heat_vis"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "heat_vis_usebox", label: "Bounding Box", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:heat_vis", "import_token": "usebox"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "heat_vis_useboxhash", label: "Bounding Box Hash", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ heat_vis_usebox == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:heat_vis", "import_token": "useboxhash"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "heat_vis_usesmoke", label: "Use Smoke   ", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:heat_vis", "import_token": "usesmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "heat_vis_guideremapsmoke", label: "Remap Smoke", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ heat_vis_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:heat_vis", "import_token": "guideremapsmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "heat_vis_guidesmokedensity", label: "Smoke Density", num_components: 1, default_value: [10], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ heat_vis_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:heat_vis", "import_token": "guidesmokedensity"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "heat_vis_guideuseplane", label: "Use Plane     ", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ heat_vis_usesmoke == 1 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:heat_vis", "import_token": "guideuseplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "heat_vis_guideplane", label: "Plane Orientation", menu_items: ["xy", "yz", "zx"], menu_labels: ["XY plane", "YZ plane", "ZX plane"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ heat_vis_usesmoke == 1 } { heat_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:heat_vis", "import_token": "guideplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "heat_vis_guideplaneval", label: "Plane Position", num_components: 1, default_value: [0], min: null, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ heat_vis_usesmoke == 1 } { heat_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:heat_vis", "import_token": "guideplaneval"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "heat_vis_guidevismode", label: "Visualization Mode", menu_items: ["none", "false", "pink", "mono", "blackbody", "bipartite"], menu_labels: ["No Mapping", "Infra-Red", "White to Red", "Grayscale", "Black Body", "Two-Tone"], default_value: 4, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ heat_vis_usesmoke == 1 heat_vis_guideremapsmoke == 0 } { heat_vis_usesmoke == 0 heat_vis_guideuseplane == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:heat_vis", "import_token": "guidevismode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "heat_vis_guidevisdensitymode", label: "Alpha Mapping", menu_items: ["none", "increasing", "decreasing", "hill", "valley", "step", "square"], menu_labels: ["No Mapping", "Increasing", "Decreasing", "Hill", "Valley", "Step", "Square"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ heat_vis_usesmoke == 1 heat_vis_guideremapsmoke == 0 } { heat_vis_usesmoke == 0 heat_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:heat_vis", "import_token": "guidevisdensitymode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "heat_vis_guiderangemode", label: "Specify Range by Min/Max", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ heat_vis_usesmoke == 1 heat_vis_guideremapsmoke == 0 } { heat_vis_usesmoke == 0 heat_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:heat_vis", "import_token": "guiderangemode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "heat_vis_guiderange", label: "Guide Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ heat_vis_usesmoke == 1 heat_vis_guideremapsmoke == 0 } { heat_vis_usesmoke == 0 heat_vis_guideuseplane == 0 } { heat_vis_guiderangemode == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:heat_vis", "import_token": "guiderange"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "heat_vis_guiderangecenter", label: "Guide Range Center", num_components: 1, default_value: [0.5], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ heat_vis_usesmoke == 1 heat_vis_guideremapsmoke == 0 } { heat_vis_usesmoke == 0 heat_vis_guideuseplane == 0 } { heat_vis_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:heat_vis", "import_token": "guiderangecenter"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "heat_vis_guiderangesize", label: "Guide Range Width", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ heat_vis_usesmoke == 1 heat_vis_guideremapsmoke == 0 } { heat_vis_usesmoke == 0 heat_vis_guideuseplane == 0 } { heat_vis_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:heat_vis", "import_token": "guiderangesize"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "heat_vis_guideiso", label: "Iso Offset", num_components: 1, default_value: [0], min: null, max: 5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ heat_vis_usesmoke == 1 } { heat_vis_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:heat_vis", "import_token": "guideiso"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "heat_vis_guideinvert", label: "Invert Iso", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ heat_vis_usesmoke == 1 } { heat_vis_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:heat_vis", "import_token": "guideinvert"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "folder0_7", label: "Turbulence", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"import_enable": "1", "import_source": "op:turbscale_vis"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "turbscale_vis_usebox", label: "Bounding Box", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:turbscale_vis", "import_token": "usebox"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "turbscale_vis_useboxhash", label: "Bounding Box Hash", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ turbscale_vis_usebox == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:turbscale_vis", "import_token": "useboxhash"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "turbscale_vis_usesmoke", label: "Use Smoke   ", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:turbscale_vis", "import_token": "usesmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "turbscale_vis_guideremapsmoke", label: "Remap Smoke", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ turbscale_vis_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:turbscale_vis", "import_token": "guideremapsmoke"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "turbscale_vis_guidesmokedensity", label: "Smoke Density", num_components: 1, default_value: [10], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ turbscale_vis_usesmoke == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:turbscale_vis", "import_token": "guidesmokedensity"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "turbscale_vis_guideuseplane", label: "Use Plane     ", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ turbscale_vis_usesmoke == 1 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:turbscale_vis", "import_token": "guideuseplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "turbscale_vis_guideplane", label: "Plane Orientation", menu_items: ["xy", "yz", "zx"], menu_labels: ["XY plane", "YZ plane", "ZX plane"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ turbscale_vis_usesmoke == 1 } { turbscale_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:turbscale_vis", "import_token": "guideplane"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "turbscale_vis_guideplaneval", label: "Plane Position", num_components: 1, default_value: [0], min: null, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ turbscale_vis_usesmoke == 1 } { turbscale_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:turbscale_vis", "import_token": "guideplaneval"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "turbscale_vis_guidevismode", label: "Visualization Mode", menu_items: ["none", "false", "pink", "mono", "blackbody", "bipartite"], menu_labels: ["No Mapping", "Infra-Red", "White to Red", "Grayscale", "Black Body", "Two-Tone"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ turbscale_vis_usesmoke == 1 turbscale_vis_guideremapsmoke == 0 } { turbscale_vis_usesmoke == 0 turbscale_vis_guideuseplane == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:turbscale_vis", "import_token": "guidevismode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "turbscale_vis_guidevisdensitymode", label: "Alpha Mapping", menu_items: ["none", "increasing", "decreasing", "hill", "valley", "step", "square"], menu_labels: ["No Mapping", "Increasing", "Decreasing", "Hill", "Valley", "Step", "Square"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ turbscale_vis_usesmoke == 1 turbscale_vis_guideremapsmoke == 0 } { turbscale_vis_usesmoke == 0 turbscale_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:turbscale_vis", "import_token": "guidevisdensitymode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "turbscale_vis_guiderangemode", label: "Specify Range by Min/Max", default_value: true, default_expression: "on", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ turbscale_vis_usesmoke == 1 turbscale_vis_guideremapsmoke == 0 } { turbscale_vis_usesmoke == 0 turbscale_vis_guideuseplane == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:turbscale_vis", "import_token": "guiderangemode"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "turbscale_vis_guiderange", label: "Guide Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ turbscale_vis_usesmoke == 1 turbscale_vis_guideremapsmoke == 0 } { turbscale_vis_usesmoke == 0 turbscale_vis_guideuseplane == 0 } { turbscale_vis_guiderangemode == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:turbscale_vis", "import_token": "guiderange"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "turbscale_vis_guiderangecenter", label: "Guide Range Center", num_components: 1, default_value: [0.5], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ turbscale_vis_usesmoke == 1 turbscale_vis_guideremapsmoke == 0 } { turbscale_vis_usesmoke == 0 turbscale_vis_guideuseplane == 0 } { turbscale_vis_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:turbscale_vis", "import_token": "guiderangecenter"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "turbscale_vis_guiderangesize", label: "Guide Range Width", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ turbscale_vis_usesmoke == 1 turbscale_vis_guideremapsmoke == 0 } { turbscale_vis_usesmoke == 0 turbscale_vis_guideuseplane == 0 } { turbscale_vis_guiderangemode == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:turbscale_vis", "import_token": "guiderangesize"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "turbscale_vis_guideiso", label: "Iso Offset", num_components: 1, default_value: [0], min: null, max: 5, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ turbscale_vis_usesmoke == 1 } { turbscale_vis_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:turbscale_vis", "import_token": "guideiso"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "turbscale_vis_guideinvert", label: "Invert Iso", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ turbscale_vis_usesmoke == 1 } { turbscale_vis_guideuseplane == 1 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "import_source": "op:turbscale_vis", "import_token": "guideinvert"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "std_switcher_0_1", label: "Initial Data", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2 = new hou.MenuParmTemplate({name: "fluidtype", label: "Fluid Type", menu_items: ["smoke", "fire", "liquid", "pyro"], menu_labels: ["Smoke", "Fire", "Liquid", "Pyro"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "border", label: "Border Type", menu_items: ["constant", "repeat", "streak"], menu_labels: ["Constant", "Repeat", "Streak"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "usefp16", label: "Use 16bit Float", default_value: false, default_expression: "off", default_expression_language: hou.scriptLanguage.Hscript});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "source", label: "Source", menu_items: ["object", "externalobject", "sop", "file"], menu_labels: ["Dop Object", "External Dop Object", "SOP Path", "File"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "lowresdoppath", label: "Low Res DOP Path", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.NodeReference, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ source != externalobject }");
			hou_parm_template2.setTags({"oprelative": "."});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "lowressource", label: "Low Res Source", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ source == file } { source == sop }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "lowressoppath", label: "Low Res SOP Path", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.NodeReference, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ source != sop }");
			hou_parm_template2.setTags({"opfilter": "!!SOP!!", "oprelative": "."});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "lowresfile", label: "Low Res File", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Geometry, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ source != file }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "lowresgroup", label: "Low Res Group", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ source == object } { source == externalobject }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "density_soppath", label: "Density SOP Path", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.NodeReference, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "opfilter": "!!SOP!!", "oprelative": "."});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "temperature_soppath", label: "Temperature SOP Path", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.NodeReference, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "opfilter": "!!SOP!!", "oprelative": "."});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "heat_soppath", label: "Heat SOP Path", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.NodeReference, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setTags({"opfilter": "!!SOP!!", "oprelative": "."});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "positionpath", label: "Position Data Path", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "std_switcher_0_2", label: "Slice", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2 = new hou.IntParmTemplate({name: "slice", label: "Slice", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "slicediv", label: "Slice Divisions", num_components: 3, default_value: [1, 1, 1], min: 1, max: 5, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "sliceoverlapneg", label: "Overlap Voxels Negative", num_components: 3, default_value: [4, 4, 4], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "sliceoverlappos", label: "Overlap Voxels Positive", num_components: 3, default_value: [4, 4, 4], min: 0, max: 10, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			
            this.parmTemplateGroup = hou_parm_template_group;
            this.parmTemplateGroup.linkNode(this);
        }
    }
    hou.registerType('DOP/Other/gasupresobject',_hnt_DOP_gasupresobject)
    return _hnt_DOP_gasupresobject
}
        