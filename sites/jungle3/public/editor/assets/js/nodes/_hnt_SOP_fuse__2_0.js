
export default function (hou) {
    class _hnt_SOP_fuse__2_0 extends hou._HoudiniBase {
        static is_root = false;
        static id = 'SOP/Other/fuse::2.0';
        static category = '/SOP';
        static houdiniType = 'fuse::2.0';
        static title = 'Fuse';
        static icon = '/editor/assets/imgs/nodes/_hnt_SOP_fuse__2_0.svg';
        constructor() {
            super();
            this.flags['houdini_type'] = this.__proto__.constructor.houdiniType;
            
            const inputs = ['SOP', 'SOP'];
            const outputs = ['SOP'];

            for(var i=0;i<inputs.length;i++) this.addInput(''+i,inputs[i]);        
            for(var j=0;j<outputs.length;j++) this.addOutput(''+j,outputs[j]);
        }
        parmTemplatesInit() {
            let hou_parm_template_group = new hou.ParmTemplateGroup();
			this.parmTemplateGroup = hou_parm_template_group;
			let hou_parm_template = new hou.StringParmTemplate({name: "querygroup", label: "Group", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle});
			hou_parm_template.setTags({"script_action": "import soputils\nkwargs['geometrytype'] = (hou.geometryType.Points,)\nkwargs['inputindex'] = 0\nsoputils.selectGroupParm(kwargs)", "script_action_help": "Select query geometry from an available viewport.\nShift-click to turn on Select Groups.", "script_action_icon": "BUTTONS_reselect"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ToggleParmTemplate({name: "usetargetgroup", label: "Target Group", default_value: false});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ snaptype == gridsnap } { hasinput(1) == 1 }");
			hou_parm_template.hideLabel(true);
			hou_parm_template.setJoinWithNext(true);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "targetgroup", label: "Target Group", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ snaptype == gridsnap } { usetargetgroup == 0 hasinput(1) == 0 }");
			hou_parm_template.setTags({"script_action": "import soputils\nkwargs['geometrytype'] = (hou.geometryType.Points,)\nkwargs['inputindex'] = -1\nsoputils.selectGroupParm(kwargs)", "script_action_help": "Select target geometry from an available viewport.\nShift-click to turn on Select Groups.", "script_action_icon": "BUTTONS_reselect", "sop_input": "1"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ToggleParmTemplate({name: "modifyboth", label: "Modify Target", default_value: false});
			hou_parm_template.setConditional(hou.parmCondType.DisableWhen, "{ snaptype == gridsnap } { hasinput(1) == 1 } { usetargetgroup == 0 snaptype != specified }");
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.StringParmTemplate({name: "posattrib", label: "Position Attribute", num_components: 1, default_value: ["P"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template.setTags({"sop_input": "0"});
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "snapgroup", label: "Snap", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			let hou_parm_template2 = new hou.MenuParmTemplate({name: "snaptype", label: "Snap To", menu_items: ["distancesnap", "gridsnap", "specified"], menu_labels: ["Near Points", "Grid", "Specified Points"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "algorithm", label: "Using", menu_items: ["lowest", "closest"], menu_labels: ["Least Target Point Number (for cloud reduction)", "Closest Target Point (for disjoint pieces)"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ snaptype != distancesnap }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "usetol3d", label: "Use Snap Distance", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ snaptype != distancesnap }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "tol3d", label: "Snap Distance", num_components: 1, default_value: [0.001], min: 0.001, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Logarithmic, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ snaptype != distancesnap } { usetol3d == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ snaptype != distancesnap }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "targetptattrib", label: "Target Points Attribute", num_components: 1, default_value: ["snap_to"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ snaptype != specified }");
			hou_parm_template2.setTags({"sop_input": "0"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "targetclass", label: "Target Class", menu_items: ["point", "vertex", "prim", "detail"], menu_labels: ["Points", "Vertices", "Primitives", "Detail"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ snaptype != specified }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "usepositionsnapmethod", label: "Snap Positions", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ snaptype == gridsnap }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "positionsnapmethod", label: "Output Positions", menu_items: ["average", "lowest", "highest", "max", "min", "mode", "median", "sum", "sumsquare", "rms", "weightedmean", "weightedsum", "minweight", "maxweight"], menu_labels: ["Average Value", "Least Point Number", "Greatest Point Number", "Maximum Value", "Minimum Value", "Mode", "Median", "Sum", "Sum of Squares", "Root Mean Square", "Weighted Average", "Weighted Sum", "Minimum Weight", "Maximum Weight"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ snaptype == gridsnap } { usepositionsnapmethod == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ snaptype == gridsnap }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "positionsnapweightname", label: "Weight Attribute", num_components: 1, default_value: ["weight"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ snaptype == gridsnap } { usepositionsnapmethod == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ snaptype == gridsnap } { positionsnapmethod != weightedmean positionsnapmethod != weightedsum positionsnapmethod != minweight positionsnapmethod != maxweight }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "useradiusattrib", label: "Radius Attribute", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ snaptype != distancesnap }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "radiusattrib", label: "Radius Attribute", num_components: 1, default_value: ["pscale"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ useradiusattrib == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ snaptype != distancesnap }");
			hou_parm_template2.setTags({"sop_input": "1"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "usematchattrib", label: "Match Attribute", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ snaptype != distancesnap }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "matchattrib", label: "Match Attribute", num_components: 1, default_value: ["name"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ usematchattrib == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ snaptype != distancesnap }");
			hou_parm_template2.setTags({"sop_input": "1"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "matchtype", label: "Match Condition", menu_items: ["match", "mismatch"], menu_labels: ["Equal Attribute Values", "Unequal Attribute Values"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ usematchattrib == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ snaptype != distancesnap }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "matchtol", label: "Match Tolerance", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Logarithmic, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ usematchattrib == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ snaptype != distancesnap }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "gridtype", label: "Grid Type", menu_items: ["spacing", "lines", "pow2"], menu_labels: ["Grid Spacing", "Grid Lines", "Power of 2 Grid Lines"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ snaptype != gridsnap }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "gridspacing", label: "Grid Spacing", num_components: 3, default_value: [0.1, 0.1, 0.1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ snaptype != gridsnap } { gridtype != spacing }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "gridlines", label: "Grid Lines", num_components: 3, default_value: [10, 10, 10], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ snaptype != gridsnap } { gridtype != lines }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.IntParmTemplate({name: "gridpow2", label: "Grid Power 2", num_components: 3, default_value: [3, 3, 3], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ snaptype != gridsnap } { gridtype != pow2 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "gridoffset", label: "Grid Offset", num_components: 3, default_value: [0, 0, 0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ snaptype != gridsnap }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.MenuParmTemplate({name: "gridround", label: "Grid Rounding", menu_items: ["nearest", "down", "up"], menu_labels: ["Nearest", "Down", "Up"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ snaptype != gridsnap }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "usegridtol", label: "Use Grid Tolerance", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ snaptype != gridsnap }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "gridtol", label: "Grid Tolerance", num_components: 1, default_value: [10], min: 0.001, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Logarithmic, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ snaptype != gridsnap } { usegridtol == 0 }");
			hou_parm_template2.setConditional(hou.parmCondType.HideWhen, "{ snaptype != gridsnap }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "consolidategroup", label: "Fuse", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "consolidatesnappedpoints", label: "Fuse Snapped Points", default_value: true});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "keepconsolidatedpoints", label: "Keep Fused Points", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ consolidatesnappedpoints == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "deldegen", label: "Remove Repeated Vertices and Degenerate Primitives", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ consolidatesnappedpoints == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "deldegenpoints", label: "Remove Unused Points from Degenerate Primitives", default_value: true});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ consolidatesnappedpoints == 0 } { deldegen == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "delunusedpoints", label: "Remove All Unused Points", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ consolidatesnappedpoints == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "outputgroup", label: "Output Attributes and Groups", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "recomputenml", label: "Recompute Affected Normals", default_value: true});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "createsnappedgroup", label: "Create Snapped Points Group", default_value: false});
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "snappedgroupname", label: "Snapped Points Group", num_components: 1, default_value: ["snapped_points"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ createsnappedgroup == 0 }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "createsnappedattrib", label: "Create Snapped Destination Attribute", default_value: false});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ snaptype == gridsnap }");
			hou_parm_template2.hideLabel(true);
			hou_parm_template2.setJoinWithNext(true);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "snappedattribname", label: "Snapped Destination Attribute", num_components: 1, default_value: ["snapped_to"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template2.setConditional(hou.parmCondType.DisableWhen, "{ createsnappedattrib == 0 } { snaptype == gridsnap }");
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "numpointattribs", label: "Attributes to Snap", folder_type: hou.folderType.MultiparmBlock, default_value: 0, ends_tab_group: false});
			let hou_parm_template3 = new hou.MenuParmTemplate({name: "attribsnapmethod#", label: "Output Values", menu_items: ["max", "min", "mean", "mode", "median", "sum", "sumsquare", "rms", "first", "last", "concat", "weightedmean", "weightedsum", "minweight", "maxweight", "concatordered"], menu_labels: ["Maximum", "Minimum", "Average", "Mode", "Median", "Sum", "Sum of Squares", "Root Mean Square", "First Match", "Last Match", "Concatenate", "Weighted Average", "Weighted Sum", "Minimum Weight", "Maximum Weight", "Concatenate in Weight Order"], default_value: 8, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "pointattribnames#", label: "Point Attributes", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle});
			hou_parm_template3.setTags({"sop_input": "1"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "pointattribweightname#", label: "Weight Attribute", num_components: 1, default_value: ["weight"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ attribsnapmethod# != weightedmean attribsnapmethod# != weightedsum attribsnapmethod# != minweight attribsnapmethod# != maxweight attribsnapmethod# != concatordered }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "numgroups", label: "Groups to Snap", folder_type: hou.folderType.MultiparmBlock, default_value: 0, ends_tab_group: false});
			hou_parm_template3 = new hou.MenuParmTemplate({name: "grouppropagation#", label: "Group Propagation", menu_items: ["leastpointnumber", "greatestpointnumber", "union", "intersect", "mode"], menu_labels: ["Least Point Number", "Greatest Point Number", "Union", "Intersect", "Most Common"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "pointgroupnames#", label: "Point Group Names", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle});
			hou_parm_template3.setTags({"sop_input": "1"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			
            this.parmTemplateGroup = hou_parm_template_group;
            this.parmTemplateGroup.linkNode(this);
        }
    }
    hou.registerType('SOP/Other/fuse::2.0',_hnt_SOP_fuse__2_0)
    return _hnt_SOP_fuse__2_0
}
        