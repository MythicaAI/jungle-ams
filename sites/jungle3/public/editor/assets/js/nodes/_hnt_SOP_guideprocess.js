
export default function (hou) {
    class _hnt_SOP_guideprocess extends hou.extend(hou._HoudiniBase).with(hou._SubgraphMixin) {
        static is_root = false;
        static id = 'SOP/Character FX/Hair and Fur/guideprocess';
        static category = '/SOP';
        static houdiniType = 'guideprocess';
        static title = 'Guide Process';
        static icon = '/editor/assets/imgs/nodes/_hnt_SOP_guideprocess.svg';
        constructor() {
            super();
            this.flags['houdini_type'] = this.__proto__.constructor.houdiniType;
            
            const inputs = ['SOP', 'SOP', 'SOP'];
            const outputs = ['SOP', 'SOP', 'SOP'];

            for(var i=0;i<inputs.length;i++) this.addInput(''+i,inputs[i]);        
            for(var j=0;j<outputs.length;j++) this.addOutput(''+j,outputs[j]);
        }
        parmTemplatesInit() {
            let hou_parm_template_group = new hou.ParmTemplateGroup();
			this.parmTemplateGroup = hou_parm_template_group;
			let hou_parm_template = new hou.StringParmTemplate({name: "description", label: "Description", num_components: 1, default_value: ["opsparm = parmTuple(\"operations\")\nnumops = opsparm[0].eval()\n\nparms = [hou.pwd().parm(\'op%d\' % i)  for i in range(1, numops+1)]\n\nops = [p.menuLabels()[p.eval()] for p in parms]\n\nopstring = \"\"\n\nif ops:\n    opstring = \"Op: \" + \", \".join(ops)\n\nif ch(\"useskinmask\"):\n    if opstring:\n        opstring += \"\\n\"\n    opstring += \"Mask: \" + ch(\"skinmaskattrib\")\n\nreturn opstring"], default_expression: ["opsparm = parmTuple(\"operations\")\nnumops = opsparm[0].eval()\n\nparms = [hou.pwd().parm(\'op%d\' % i)  for i in range(1, numops+1)]\n\nops = [p.menuLabels()[p.eval()] for p in parms]\n\nopstring = \"\"\n\nif ops:\n    opstring = \"Op: \" + \", \".join(ops)\n\nif ch(\"useskinmask\"):\n    if opstring:\n        opstring += \"\\n\"\n    opstring += \"Mask: \" + ch(\"skinmaskattrib\")\n\nreturn opstring"], default_expression_language: [hou.scriptLanguage.Python], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal});
			hou_parm_template.hide(true);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.ToggleParmTemplate({name: "legacymasking", label: "Use Lecacy Masking", default_value: false});
			hou_parm_template.hide(true);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "generalfolder", label: "General", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template.setTags({"group_type": "simple"});
			let hou_parm_template2 = new hou.MenuParmTemplate({name: "grouptype", label: "Group Type", menu_items: ["primitive", "point", "edge"], menu_labels: ["Primitives", "Points", "Edges"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template2.setTags({"autoscope": "0000000000000000"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.StringParmTemplate({name: "group", label: "Group", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "opmenu -l -a group1 basegroup", item_generator_script_language: hou.scriptLanguage.Hscript, menu_type: hou.menuType.StringToggle});
			hou_parm_template2.setTags({"autoscope": "0000000000000000", "script_action": "import soputils\nkwargs['geometrytype'] = kwargs['node'].parmTuple('grouptype')\nkwargs['inputindex'] = 0\nsoputils.selectGroupParm(kwargs)", "script_action_help": "Select geometry from an available viewport.\nShift-click to turn on Select Groups.", "script_action_icon": "BUTTONS_reselect"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "curveperskinpoint", label: "Curve Per Skin Point", default_value: false});
			hou_parm_template2.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template2.setTags({"script_callback_language": "python"});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FloatParmTemplate({name: "seed", label: "Random Seed", num_components: 1, default_value: [0], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.ToggleParmTemplate({name: "vismasks", label: "Visualize Masks", default_value: true});
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder0_1", label: "Operations", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2 = new hou.FolderParmTemplate({name: "operations", label: "Operations", folder_type: hou.folderType.MultiparmBlock, default_value: 0, ends_tab_group: false});
			let hou_parm_template3 = new hou.ToggleParmTemplate({name: "active#", label: "Active", default_value: true});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "solo#", label: "Solo", default_value: false});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "op#", label: "Operation", menu_items: ["setdirvec", "setlift", "setlength", "displace", "makewavy", "straighten", "smooth", "frizz", "bend", "simattrib"], menu_labels: ["Set Direction", "Set Lift", "Set Length", "Displace", "Wave", "Straighten", "Smooth", "Frizz", "Bend", "Set Simulation Attributes"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "geotype#", label: "Geometry Type", menu_items: ["curves", "barbs"], menu_labels: ["Curves", "Feather Barbs"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength op# != bend }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "barbside#", label: "Barb Side", menu_items: ["left", "right"], menu_labels: ["Left", "Right"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength op# != bend } { geotype# != barbs }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "setdir_blend#", label: "Blend", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setdirvec }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "setdir_animrot#", label: "Rotate with Skin Animation", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setdirvec }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "setdir_uniformdir#", label: "Uniform Direction", num_components: 3, default_value: [0, 0, null], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setdirvec }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "setdir_useskinattrib#", label: "Use Skin Attrib", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setdirvec }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setdir_skinattrib#", label: "Direction Attribute", num_components: 1, default_value: ["furdirection"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1,\n            attribSize=3)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ setdir_useskinattrib# == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setdirvec }");
			hou_parm_template3.setTags({"script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(kwargs, kwargs['parmtuple'][0].eval(), skininput=1, mode='comb')", "script_action_icon": "SOP_comb"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "setdir_blenddir#", label: "Direction Amount", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setdirvec }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "setdir_blenddiroverride#", label: "Direction Amount Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setdirvec }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setdir_blenddir#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "setdir_blenddiroptions#", label: "Direction Amount Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setdirvec }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setdir_blenddir#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "setdir_blenddirinrange#", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ setdir_blenddiroverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setdirvec } { setdir_blenddiroptions# != 1 setdir_blenddiroptions# != 3 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setdir_blenddir#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "setdir_blenddiroutrange#", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ setdir_blenddiroverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setdirvec } { setdir_blenddiroptions# != 1 setdir_blenddiroptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setdir_blenddir#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.RampParmTemplate({name: "setdir_blenddirremapramp#", label: "Direction Amount Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setdirvec } { setdir_blenddiroptions# != 2 setdir_blenddiroptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setdir_blenddir#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setdir_blenddircurveattrib#", label: "Direction Amount Attrib", num_components: 1, default_value: ["diramount"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setdirvec } { setdir_blenddiroverride# != curveattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setdir_blenddir#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setdir_blenddirattrib#", label: "Direction Amount Attrib", num_components: 1, default_value: ["diramount"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setdirvec } { setdir_blenddiroverride# != skinattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setdir_blenddir#", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Direction Amount Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setdir_blenddirtexture#", label: "Direction Amount Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setdirvec } { setdir_blenddiroverride# != texture }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setdir_blenddir#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setdir_blenddirtextureprim#", label: "Direction Amount Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setdirvec } { setdir_blenddiroverride# != textureprim }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setdir_blenddir#", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Direction Amount Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "setdir_blenddiruvmode#", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setdirvec } { setdir_blenddiroverride# != textureprim }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setdir_blenddir#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "setdir_blendlift#", label: "Lift Amount", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setdirvec }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "setdir_blendliftoverride#", label: "Lift Amount Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setdirvec }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setdir_blendlift#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "setdir_blendliftoptions#", label: "Lift Amount Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setdirvec }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setdir_blendlift#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "setdir_blendliftinrange#", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ setdir_blendliftoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setdirvec } { setdir_blendliftoptions# != 1 setdir_blendliftoptions# != 3 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setdir_blendlift#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "setdir_blendliftoutrange#", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ setdir_blendliftoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setdirvec } { setdir_blendliftoptions# != 1 setdir_blendliftoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setdir_blendlift#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.RampParmTemplate({name: "setdir_blendliftremapramp#", label: "Lift Amount Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setdirvec } { setdir_blendliftoptions# != 2 setdir_blendliftoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setdir_blendlift#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setdir_blendliftcurveattrib#", label: "Lift Amount Attrib", num_components: 1, default_value: ["liftamount"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setdirvec } { setdir_blendliftoverride# != curveattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setdir_blendlift#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setdir_blendliftattrib#", label: "Lift Amount Attrib", num_components: 1, default_value: ["liftamount"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setdirvec } { setdir_blendliftoverride# != skinattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setdir_blendlift#", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Lift Amount Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setdir_blendlifttexture#", label: "Lift Amount Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setdirvec } { setdir_blendliftoverride# != texture }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setdir_blendlift#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setdir_blendlifttextureprim#", label: "Lift Amount Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setdirvec } { setdir_blendliftoverride# != textureprim }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setdir_blendlift#", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Lift Amount Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "setdir_blendliftuvmode#", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setdirvec } { setdir_blendliftoverride# != textureprim }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setdir_blendlift#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "setdir_mode#", label: "Mode", menu_items: ["rootrot", "eachseg"], menu_labels: ["Rotate Rigidly Around Root", "Set Each Segment"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ usecurvemask == 1 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setdirvec }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "lift_blend#", label: "Blend", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "lift_randomize#", label: "Randomize", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "lift_value#", label: "Lift", num_components: 1, default_value: [0.5], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ lift_randomize# == 1 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "lift_valueoverride#", label: "Lift Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ lift_randomize# == 1 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_value#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "lift_valueoptions#", label: "Lift Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ lift_randomize# == 1 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_value#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "lift_valueinrange#", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ lift_randomize# == 1 } { lift_valueoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_valueoptions# != 1 lift_valueoptions# != 3 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_value#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "lift_valueoutrange#", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ lift_randomize# == 1 } { lift_valueoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_valueoptions# != 1 lift_valueoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_value#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.RampParmTemplate({name: "lift_valueremapramp#", label: "Lift Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ lift_randomize# == 1 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_valueoptions# != 2 lift_valueoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_value#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "lift_valuecurveattrib#", label: "Lift Attrib", num_components: 1, default_value: ["lift"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ lift_randomize# == 1 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_valueoverride# != curveattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_value#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "lift_valueattrib#", label: "Lift Attrib", num_components: 1, default_value: ["lift"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ lift_randomize# == 1 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_valueoverride# != skinattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_value#", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Lift Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "lift_valuetexture#", label: "Lift Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ lift_randomize# == 1 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_valueoverride# != texture }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_value#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "lift_valuetextureprim#", label: "Lift Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ lift_randomize# == 1 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_valueoverride# != textureprim }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_value#", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Lift Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "lift_valueuvmode#", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ lift_randomize# == 1 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_valueoverride# != textureprim }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_value#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "lift_liftrandmin#", label: "Min Lift", num_components: 1, default_value: [0.3], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_randomize# == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "lift_liftrandminoverride#", label: "Min Lift Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_randomize# == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_liftrandmin#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "lift_liftrandminoptions#", label: "Min Lift Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_randomize# == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_liftrandmin#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "lift_liftrandmininrange#", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ lift_liftrandminoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_randomize# == 0 } { lift_liftrandminoptions# != 1 lift_liftrandminoptions# != 3 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_liftrandmin#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "lift_liftrandminoutrange#", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ lift_liftrandminoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_randomize# == 0 } { lift_liftrandminoptions# != 1 lift_liftrandminoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_liftrandmin#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.RampParmTemplate({name: "lift_liftrandminremapramp#", label: "Min Lift Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_randomize# == 0 } { lift_liftrandminoptions# != 2 lift_liftrandminoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_liftrandmin#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "lift_liftrandmincurveattrib#", label: "Min Lift Attrib", num_components: 1, default_value: ["liftrandmin"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_randomize# == 0 } { lift_liftrandminoverride# != curveattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_liftrandmin#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "lift_liftrandminattrib#", label: "Min Lift Attrib", num_components: 1, default_value: ["liftrandmin"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_randomize# == 0 } { lift_liftrandminoverride# != skinattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_liftrandmin#", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Min Lift Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "lift_liftrandmintexture#", label: "Min Lift Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_randomize# == 0 } { lift_liftrandminoverride# != texture }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_liftrandmin#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "lift_liftrandmintextureprim#", label: "Min Lift Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_randomize# == 0 } { lift_liftrandminoverride# != textureprim }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_liftrandmin#", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Min Lift Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "lift_liftrandminuvmode#", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_randomize# == 0 } { lift_liftrandminoverride# != textureprim }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_liftrandmin#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "lift_liftrandmax#", label: "Max Lift", num_components: 1, default_value: [0.7], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_randomize# == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "lift_liftrandmaxoverride#", label: "Max Lift Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_randomize# == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_liftrandmax#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "lift_liftrandmaxoptions#", label: "Max Lift Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_randomize# == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_liftrandmax#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "lift_liftrandmaxinrange#", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ lift_liftrandmaxoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_randomize# == 0 } { lift_liftrandmaxoptions# != 1 lift_liftrandmaxoptions# != 3 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_liftrandmax#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "lift_liftrandmaxoutrange#", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ lift_liftrandmaxoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_randomize# == 0 } { lift_liftrandmaxoptions# != 1 lift_liftrandmaxoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_liftrandmax#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.RampParmTemplate({name: "lift_liftrandmaxremapramp#", label: "Max Lift Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_randomize# == 0 } { lift_liftrandmaxoptions# != 2 lift_liftrandmaxoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_liftrandmax#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "lift_liftrandmaxcurveattrib#", label: "Max Lift Attrib", num_components: 1, default_value: ["liftrandmax"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_randomize# == 0 } { lift_liftrandmaxoverride# != curveattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_liftrandmax#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "lift_liftrandmaxattrib#", label: "Max Lift Attrib", num_components: 1, default_value: ["liftrandmax"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_randomize# == 0 } { lift_liftrandmaxoverride# != skinattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_liftrandmax#", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Max Lift Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "lift_liftrandmaxtexture#", label: "Max Lift Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_randomize# == 0 } { lift_liftrandmaxoverride# != texture }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_liftrandmax#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "lift_liftrandmaxtextureprim#", label: "Max Lift Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_randomize# == 0 } { lift_liftrandmaxoverride# != textureprim }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_liftrandmax#", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Max Lift Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "lift_liftrandmaxuvmode#", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_randomize# == 0 } { lift_liftrandmaxoverride# != textureprim }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_liftrandmax#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "lift_followskincontour#", label: "Follow Skin Contour", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "lift_followskincontouroverride#", label: "Follow Skin Contour Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_followskincontour#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "lift_followskincontouroptions#", label: "Follow Skin Contour Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_followskincontour#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "lift_followskincontourinrange#", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ lift_followskincontouroverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_followskincontouroptions# != 1 lift_followskincontouroptions# != 3 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_followskincontour#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "lift_followskincontouroutrange#", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ lift_followskincontouroverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_followskincontouroptions# != 1 lift_followskincontouroptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_followskincontour#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.RampParmTemplate({name: "lift_followskincontourremapramp#", label: "Follow Skin Contour Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_followskincontouroptions# != 2 lift_followskincontouroptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_followskincontour#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "lift_followskincontourcurveattrib#", label: "Follow Skin Contour Attrib", num_components: 1, default_value: ["liftfollowskincontour"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_followskincontouroverride# != curveattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_followskincontour#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "lift_followskincontourattrib#", label: "Follow Skin Contour Attrib", num_components: 1, default_value: ["liftfollowskincontour"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_followskincontouroverride# != skinattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_followskincontour#", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Follow Skin Contour Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "lift_followskincontourtexture#", label: "Follow Skin Contour Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_followskincontouroverride# != texture }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_followskincontour#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "lift_followskincontourtextureprim#", label: "Follow Skin Contour Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_followskincontouroverride# != textureprim }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_followskincontour#", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Follow Skin Contour Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "lift_followskincontouruvmode#", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlift } { lift_followskincontouroverride# != textureprim }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "lift_followskincontour#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "setlength_mode#", label: "Mode", menu_items: ["set", "multiply", "add", "subtract", "setmin", "setmax"], menu_labels: ["Set", "Multiply", "Add", "Subtract", "Set Maximum Length", "Set Minimum Length"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "setlength_method#", label: "Method", menu_items: ["scale", "cutextend"], menu_labels: ["Scale", "Cut Or Extend"], default_value: 1, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "setlength_blend#", label: "Blend", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "setlength_randomize#", label: "Randomize", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "setlength_length#", label: "Length", num_components: 1, default_value: [0.1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# != 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "setlength_lengthoverride#", label: "Length Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# != 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_length#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "setlength_lengthoptions#", label: "Length Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# != 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_length#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "setlength_lengthinrange#", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ setlength_lengthoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# != 0 } { setlength_lengthoptions# != 1 setlength_lengthoptions# != 3 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_length#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "setlength_lengthoutrange#", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ setlength_lengthoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# != 0 } { setlength_lengthoptions# != 1 setlength_lengthoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_length#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.RampParmTemplate({name: "setlength_lengthremapramp#", label: "Length Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# != 0 } { setlength_lengthoptions# != 2 setlength_lengthoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_length#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setlength_lengthcurveattrib#", label: "Length Attrib", num_components: 1, default_value: ["length"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# != 0 } { setlength_lengthoverride# != curveattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_length#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setlength_lengthattrib#", label: "Length Attrib", num_components: 1, default_value: ["length"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# != 0 } { setlength_lengthoverride# != skinattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_length#", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Length Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setlength_lengthtexture#", label: "Length Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# != 0 } { setlength_lengthoverride# != texture }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_length#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setlength_lengthtextureprim#", label: "Length Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# != 0 } { setlength_lengthoverride# != textureprim }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_length#", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Length Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "setlength_lengthuvmode#", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# != 0 } { setlength_lengthoverride# != textureprim }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_length#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "setlength_lengthrandmin#", label: "Min Length", num_components: 1, default_value: [0.1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "setlength_lengthrandminoverride#", label: "Min Length Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_lengthrandmin#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "setlength_lengthrandminoptions#", label: "Min Length Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_lengthrandmin#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "setlength_lengthrandmininrange#", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ setlength_lengthrandminoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# == 0 } { setlength_lengthrandminoptions# != 1 setlength_lengthrandminoptions# != 3 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_lengthrandmin#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "setlength_lengthrandminoutrange#", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ setlength_lengthrandminoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# == 0 } { setlength_lengthrandminoptions# != 1 setlength_lengthrandminoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_lengthrandmin#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.RampParmTemplate({name: "setlength_lengthrandminremapramp#", label: "Min Length Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# == 0 } { setlength_lengthrandminoptions# != 2 setlength_lengthrandminoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_lengthrandmin#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setlength_lengthrandmincurveattrib#", label: "Min Length Attrib", num_components: 1, default_value: ["minlength"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# == 0 } { setlength_lengthrandminoverride# != curveattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_lengthrandmin#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setlength_lengthrandminattrib#", label: "Min Length Attrib", num_components: 1, default_value: ["minlength"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# == 0 } { setlength_lengthrandminoverride# != skinattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_lengthrandmin#", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Min Length Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setlength_lengthrandmintexture#", label: "Min Length Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# == 0 } { setlength_lengthrandminoverride# != texture }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_lengthrandmin#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setlength_lengthrandmintextureprim#", label: "Min Length Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# == 0 } { setlength_lengthrandminoverride# != textureprim }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_lengthrandmin#", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Min Length Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "setlength_lengthrandminuvmode#", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# == 0 } { setlength_lengthrandminoverride# != textureprim }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_lengthrandmin#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "setlength_lengthrandmax#", label: "Max Length", num_components: 1, default_value: [0.2], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "setlength_lengthrandmaxoverride#", label: "Max Length Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_lengthrandmax#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "setlength_lengthrandmaxoptions#", label: "Max Length Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_lengthrandmax#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "setlength_lengthrandmaxinrange#", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ setlength_lengthrandmaxoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# == 0 } { setlength_lengthrandmaxoptions# != 1 setlength_lengthrandmaxoptions# != 3 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_lengthrandmax#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "setlength_lengthrandmaxoutrange#", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ setlength_lengthrandmaxoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# == 0 } { setlength_lengthrandmaxoptions# != 1 setlength_lengthrandmaxoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_lengthrandmax#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.RampParmTemplate({name: "setlength_lengthrandmaxremapramp#", label: "Max Length Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# == 0 } { setlength_lengthrandmaxoptions# != 2 setlength_lengthrandmaxoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_lengthrandmax#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setlength_lengthrandmaxcurveattrib#", label: "Max Length Attrib", num_components: 1, default_value: ["maxlength"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# == 0 } { setlength_lengthrandmaxoverride# != curveattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_lengthrandmax#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setlength_lengthrandmaxattrib#", label: "Max Length Attrib", num_components: 1, default_value: ["maxlength"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# == 0 } { setlength_lengthrandmaxoverride# != skinattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_lengthrandmax#", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Max Length Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setlength_lengthrandmaxtexture#", label: "Max Length Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# == 0 } { setlength_lengthrandmaxoverride# != texture }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_lengthrandmax#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setlength_lengthrandmaxtextureprim#", label: "Max Length Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# == 0 } { setlength_lengthrandmaxoverride# != textureprim }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_lengthrandmax#", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Max Length Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "setlength_lengthrandmaxuvmode#", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# == multiply } { setlength_randomize# == 0 } { setlength_lengthrandmaxoverride# != textureprim }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_lengthrandmax#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "setlength_scalefactor#", label: "Scale Factor", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 1 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "setlength_scalefactoroverride#", label: "Scale Factor Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 1 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_scalefactor#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "setlength_scalefactoroptions#", label: "Scale Factor Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 1 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_scalefactor#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "setlength_scalefactorinrange#", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ setlength_scalefactoroverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 1 } { setlength_scalefactoroptions# != 1 setlength_scalefactoroptions# != 3 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_scalefactor#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "setlength_scalefactoroutrange#", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ setlength_scalefactoroverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 1 } { setlength_scalefactoroptions# != 1 setlength_scalefactoroptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_scalefactor#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.RampParmTemplate({name: "setlength_scalefactorremapramp#", label: "Scale Factor Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 1 } { setlength_scalefactoroptions# != 2 setlength_scalefactoroptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_scalefactor#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setlength_scalefactorcurveattrib#", label: "Scale Factor Attrib", num_components: 1, default_value: ["scalefactor"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 1 } { setlength_scalefactoroverride# != curveattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_scalefactor#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setlength_scalefactorattrib#", label: "Scale Factor Attrib", num_components: 1, default_value: ["scalefactor"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 1 } { setlength_scalefactoroverride# != skinattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_scalefactor#", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Scale Factor Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setlength_scalefactortexture#", label: "Scale Factor Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 1 } { setlength_scalefactoroverride# != texture }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_scalefactor#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setlength_scalefactortextureprim#", label: "Scale Factor Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 1 } { setlength_scalefactoroverride# != textureprim }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_scalefactor#", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Scale Factor Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "setlength_scalefactoruvmode#", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 1 } { setlength_scalefactoroverride# != textureprim }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_scalefactor#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "setlength_scalefactorrandmin#", label: "Min Scale Factor", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "setlength_scalefactorrandminoverride#", label: "Min Scale Factor Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmin#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "setlength_scalefactorrandminoptions#", label: "Min Scale Factor Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmin#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "setlength_scalefactorrandmininrange#", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ setlength_scalefactorrandminoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 0 } { setlength_scalefactorrandminoptions# != 1 setlength_scalefactorrandminoptions# != 3 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmin#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "setlength_scalefactorrandminoutrange#", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ setlength_scalefactorrandminoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 0 } { setlength_scalefactorrandminoptions# != 1 setlength_scalefactorrandminoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmin#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.RampParmTemplate({name: "setlength_scalefactorrandminremapramp#", label: "Min Scale Factor Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 0 } { setlength_scalefactorrandminoptions# != 2 setlength_scalefactorrandminoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmin#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setlength_scalefactorrandmincurveattrib#", label: "Min Scale Factor Attrib", num_components: 1, default_value: ["scalefactormin"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 0 } { setlength_scalefactorrandminoverride# != curveattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmin#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setlength_scalefactorrandminattrib#", label: "Min Scale Factor Attrib", num_components: 1, default_value: ["scalefactormin"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 0 } { setlength_scalefactorrandminoverride# != skinattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmin#", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Min Scale Factor Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setlength_scalefactorrandmintexture#", label: "Min Scale Factor Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 0 } { setlength_scalefactorrandminoverride# != texture }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmin#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setlength_scalefactorrandmintextureprim#", label: "Min Scale Factor Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 0 } { setlength_scalefactorrandminoverride# != textureprim }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmin#", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Min Scale Factor Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "setlength_scalefactorrandminuvmode#", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 0 } { setlength_scalefactorrandminoverride# != textureprim }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmin#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "setlength_scalefactorrandmax#", label: "Max Scale Factor", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "setlength_scalefactorrandmaxoverride#", label: "Max Scale Factor Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmax#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "setlength_scalefactorrandmaxoptions#", label: "Max Scale Factor Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmax#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "setlength_scalefactorrandmaxinrange#", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ setlength_scalefactorrandmaxoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 0 } { setlength_scalefactorrandmaxoptions# != 1 setlength_scalefactorrandmaxoptions# != 3 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmax#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "setlength_scalefactorrandmaxoutrange#", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ setlength_scalefactorrandmaxoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 0 } { setlength_scalefactorrandmaxoptions# != 1 setlength_scalefactorrandmaxoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmax#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.RampParmTemplate({name: "setlength_scalefactorrandmaxremapramp#", label: "Max Scale Factor Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 0 } { setlength_scalefactorrandmaxoptions# != 2 setlength_scalefactorrandmaxoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmax#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setlength_scalefactorrandmaxcurveattrib#", label: "Max Scale Factor Attrib", num_components: 1, default_value: ["scalefactormax"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 0 } { setlength_scalefactorrandmaxoverride# != curveattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmax#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setlength_scalefactorrandmaxattrib#", label: "Max Scale Factor Attrib", num_components: 1, default_value: ["scalefactormax"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 0 } { setlength_scalefactorrandmaxoverride# != skinattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmax#", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Max Scale Factor Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setlength_scalefactorrandmaxtexture#", label: "Max Scale Factor Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 0 } { setlength_scalefactorrandmaxoverride# != texture }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmax#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "setlength_scalefactorrandmaxtextureprim#", label: "Max Scale Factor Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 0 } { setlength_scalefactorrandmaxoverride# != textureprim }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmax#", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Max Scale Factor Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "setlength_scalefactorrandmaxuvmode#", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength } { setlength_mode# != multiply } { setlength_randomize# == 0 } { setlength_scalefactorrandmaxoverride# != textureprim }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "setlength_scalefactorrandmax#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "setlength_cullzerolen#", label: "Cull Zero-Length Curves", default_value: true});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "setlength_cullthreshold#", label: "Cull Threshold", num_components: 1, default_value: [0.0001], min: 1e-10, max: 0.01, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ setlength_cullzerolen# == 0 }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != setlength }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "displace_amount#", label: "Amount", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != displace }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "displace_amountoverride#", label: "Amount Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != displace }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "displace_amount#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "displace_amountoptions#", label: "Amount Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != displace }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "displace_amount#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "displace_amountinrange#", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ displace_amountoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != displace } { displace_amountoptions# != 1 displace_amountoptions# != 3 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "displace_amount#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "displace_amountoutrange#", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ displace_amountoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != displace } { displace_amountoptions# != 1 displace_amountoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "displace_amount#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.RampParmTemplate({name: "displace_amountremapramp#", label: "Amount Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != displace } { displace_amountoptions# != 2 displace_amountoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "displace_amount#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "displace_amountcurveattrib#", label: "Amount Attrib", num_components: 1, default_value: ["displaceamount"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != displace } { displace_amountoverride# != curveattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "displace_amount#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "displace_amountattrib#", label: "Amount Attrib", num_components: 1, default_value: ["displaceamount"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != displace } { displace_amountoverride# != skinattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "displace_amount#", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Amount Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "displace_amounttexture#", label: "Amount Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != displace } { displace_amountoverride# != texture }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "displace_amount#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "displace_amounttextureprim#", label: "Amount Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != displace } { displace_amountoverride# != textureprim }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "displace_amount#", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Amount Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "displace_amountuvmode#", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != displace } { displace_amountoverride# != textureprim }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "displace_amount#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "makewavy_freqx#", label: "Frequency X", num_components: 1, default_value: [250], min: 0, max: 1000, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != makewavy }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "makewavy_ampx#", label: "Amplitude X", num_components: 1, default_value: [0.01], min: 0, max: 0.1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != makewavy }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "makewavy_freqy#", label: "Frequency Y", num_components: 1, default_value: [250], min: 0, max: 1000, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != makewavy }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "makewavy_ampy#", label: "Amplitude Y", num_components: 1, default_value: [0.01], min: 0, max: 0.1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != makewavy }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "straighten_tangent#", label: "Tangent Straightness", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != straighten }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "straighten_tangentoverride#", label: "Tangent Straightness Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != straighten }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "straighten_tangent#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "straighten_tangentoptions#", label: "Tangent Straightness Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != straighten }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "straighten_tangent#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "straighten_tangentinrange#", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ straighten_tangentoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != straighten } { straighten_tangentoptions# != 1 straighten_tangentoptions# != 3 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "straighten_tangent#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "straighten_tangentoutrange#", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ straighten_tangentoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != straighten } { straighten_tangentoptions# != 1 straighten_tangentoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "straighten_tangent#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.RampParmTemplate({name: "straighten_tangentremapramp#", label: "Tangent Straightness Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != straighten } { straighten_tangentoptions# != 2 straighten_tangentoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "straighten_tangent#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "straighten_tangentcurveattrib#", label: "Tangent Straightness Attrib", num_components: 1, default_value: ["straightentangent"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != straighten } { straighten_tangentoverride# != curveattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "straighten_tangent#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "straighten_tangentattrib#", label: "Tangent Straightness Attrib", num_components: 1, default_value: ["straightentangent"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != straighten } { straighten_tangentoverride# != skinattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "straighten_tangent#", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Tangent Straightness Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "straighten_tangenttexture#", label: "Tangent Straightness Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != straighten } { straighten_tangentoverride# != texture }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "straighten_tangent#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "straighten_tangenttextureprim#", label: "Tangent Straightness Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != straighten } { straighten_tangentoverride# != textureprim }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "straighten_tangent#", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Tangent Straightness Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "straighten_tangentuvmode#", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != straighten } { straighten_tangentoverride# != textureprim }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "straighten_tangent#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "straighten_normal#", label: "Normal Straightness", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != straighten }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "straighten_normaloverride#", label: "Normal Straightness Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != straighten }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "straighten_normal#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "straighten_normaloptions#", label: "Normal Straightness Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != straighten }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "straighten_normal#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "straighten_normalinrange#", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ straighten_normaloverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != straighten } { straighten_normaloptions# != 1 straighten_normaloptions# != 3 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "straighten_normal#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "straighten_normaloutrange#", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ straighten_normaloverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != straighten } { straighten_normaloptions# != 1 straighten_normaloptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "straighten_normal#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.RampParmTemplate({name: "straighten_normalremapramp#", label: "Normal Straightness Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != straighten } { straighten_normaloptions# != 2 straighten_normaloptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "straighten_normal#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "straighten_normalcurveattrib#", label: "Normal Straightness Attrib", num_components: 1, default_value: ["straightennormal"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != straighten } { straighten_normaloverride# != curveattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "straighten_normal#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "straighten_normalattrib#", label: "Normal Straightness Attrib", num_components: 1, default_value: ["straightennormal"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != straighten } { straighten_normaloverride# != skinattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "straighten_normal#", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Normal Straightness Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "straighten_normaltexture#", label: "Normal Straightness Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != straighten } { straighten_normaloverride# != texture }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "straighten_normal#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "straighten_normaltextureprim#", label: "Normal Straightness Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != straighten } { straighten_normaloverride# != textureprim }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "straighten_normal#", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Normal Straightness Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "straighten_normaluvmode#", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != straighten } { straighten_normaloverride# != textureprim }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "straighten_normal#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "smooth_blend#", label: "Blend", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != smooth }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "smooth_mode#", label: "Smoothing Mode", menu_items: ["objectspace", "skinspace"], menu_labels: ["Object Space", "Skin Space"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != smooth }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "smooth_radius#", label: "Search Radius", num_components: 1, default_value: [0.5], min: 0.001, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != smooth }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.IntParmTemplate({name: "smooth_numneighbours#", label: "Num Neighbours", num_components: 1, default_value: [5], min: 3, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != smooth }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "frizz_freq#", label: "Frequency", num_components: 1, default_value: [50], min: 0, max: 100, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "frizz_freqoverride#", label: "Frequency Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_freq#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "frizz_freqoptions#", label: "Frequency Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_freq#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "frizz_freqinrange#", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ frizz_freqoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_freqoptions# != 1 frizz_freqoptions# != 3 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_freq#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "frizz_freqoutrange#", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ frizz_freqoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_freqoptions# != 1 frizz_freqoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_freq#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.RampParmTemplate({name: "frizz_freqremapramp#", label: "Frequency Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_freqoptions# != 2 frizz_freqoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_freq#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "frizz_freqcurveattrib#", label: "Frequency Attrib", num_components: 1, default_value: ["frizzfreqscale"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_freqoverride# != curveattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_freq#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "frizz_freqattrib#", label: "Frequency Attrib", num_components: 1, default_value: ["frizzfreqscale"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_freqoverride# != skinattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_freq#", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Frequency Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "frizz_freqtexture#", label: "Frequency Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_freqoverride# != texture }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_freq#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "frizz_freqtextureprim#", label: "Frequency Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_freqoverride# != textureprim }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_freq#", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Frequency Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "frizz_frequvmode#", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_freqoverride# != textureprim }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_freq#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "frizz_freqrand#", label: "Random Frequency", num_components: 1, default_value: [0], min: 0, max: 100, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "frizz_freqrandoverride#", label: "Random Frequency Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_freqrand#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "frizz_freqrandoptions#", label: "Random Frequency Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_freqrand#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "frizz_freqrandinrange#", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ frizz_freqrandoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_freqrandoptions# != 1 frizz_freqrandoptions# != 3 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_freqrand#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "frizz_freqrandoutrange#", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ frizz_freqrandoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_freqrandoptions# != 1 frizz_freqrandoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_freqrand#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.RampParmTemplate({name: "frizz_freqrandremapramp#", label: "Random Frequency Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_freqrandoptions# != 2 frizz_freqrandoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_freqrand#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "frizz_freqrandcurveattrib#", label: "Random Frequency Attrib", num_components: 1, default_value: ["frizzfreqrandscale"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_freqrandoverride# != curveattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_freqrand#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "frizz_freqrandattrib#", label: "Random Frequency Attrib", num_components: 1, default_value: ["frizzfreqrandscale"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_freqrandoverride# != skinattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_freqrand#", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Random Frequency Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "frizz_freqrandtexture#", label: "Random Frequency Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_freqrandoverride# != texture }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_freqrand#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "frizz_freqrandtextureprim#", label: "Random Frequency Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_freqrandoverride# != textureprim }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_freqrand#", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Random Frequency Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "frizz_freqranduvmode#", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_freqrandoverride# != textureprim }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_freqrand#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "frizz_limitfreq#", label: "Limit Frequency To Representable Values", default_value: true});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "frizz_amp#", label: "Amplitude", num_components: 1, default_value: [0.05], min: 0, max: 0.1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "frizz_ampoverride#", label: "Amplitude Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_amp#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "frizz_ampoptions#", label: "Amplitude Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_amp#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "frizz_ampinrange#", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ frizz_ampoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_ampoptions# != 1 frizz_ampoptions# != 3 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_amp#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "frizz_ampoutrange#", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ frizz_ampoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_ampoptions# != 1 frizz_ampoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_amp#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.RampParmTemplate({name: "frizz_ampremapramp#", label: "Amplitude Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_ampoptions# != 2 frizz_ampoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_amp#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "frizz_ampcurveattrib#", label: "Amplitude Attrib", num_components: 1, default_value: ["frizzampscale"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_ampoverride# != curveattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_amp#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "frizz_ampattrib#", label: "Amplitude Attrib", num_components: 1, default_value: ["frizzampscale"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_ampoverride# != skinattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_amp#", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Amplitude Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "frizz_amptexture#", label: "Amplitude Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_ampoverride# != texture }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_amp#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "frizz_amptextureprim#", label: "Amplitude Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_ampoverride# != textureprim }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_amp#", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Amplitude Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "frizz_ampuvmode#", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_ampoverride# != textureprim }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_amp#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "frizz_amprand#", label: "Random Amplitude", num_components: 1, default_value: [0], min: 0, max: 0.1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "frizz_amprandoverride#", label: "Random Amplitude Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_amprand#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "frizz_amprandoptions#", label: "Random Amplitude Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_amprand#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "frizz_amprandinrange#", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ frizz_amprandoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_amprandoptions# != 1 frizz_amprandoptions# != 3 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_amprand#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "frizz_amprandoutrange#", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ frizz_amprandoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_amprandoptions# != 1 frizz_amprandoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_amprand#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.RampParmTemplate({name: "frizz_amprandremapramp#", label: "Random Amplitude Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_amprandoptions# != 2 frizz_amprandoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_amprand#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "frizz_amprandcurveattrib#", label: "Random Amplitude Attrib", num_components: 1, default_value: ["frizzamprandscale"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_amprandoverride# != curveattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_amprand#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "frizz_amprandattrib#", label: "Random Amplitude Attrib", num_components: 1, default_value: ["frizzamprandscale"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_amprandoverride# != skinattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_amprand#", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Random Amplitude Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "frizz_amprandtexture#", label: "Random Amplitude Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_amprandoverride# != texture }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_amprand#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "frizz_amprandtextureprim#", label: "Random Amplitude Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_amprandoverride# != textureprim }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_amprand#", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Random Amplitude Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "frizz_ampranduvmode#", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != frizz } { frizz_amprandoverride# != textureprim }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "frizz_amprand#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "bend_blend#", label: "Blend", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend }");
			hou_parm_template3.setTags({"units": ""});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "bend_axismode#", label: "Mode", menu_items: ["rootdir", "dirconstant", "dircurveattrib", "dirskinattrib", "axisconstant", "axiscurveattrib", "axisskinattrib"], menu_labels: ["Bend in Root Direction", "Direction Constant", "Direction Curve Attribute", "Direction Skin Attribute", "Axis Constant", "Axis Curve Attribute", "Axis Skin Attribute"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "bend_axis#", label: "Axis", num_components: 3, default_value: [0, 0, null], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_axismode# != axisconstant }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "bend_axiscurveattrib#", label: "Axis Attribute", num_components: 1, default_value: ["bendaxis"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0,\n            attribSize=3)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_axismode# != axiscurveattrib }");
			hou_parm_template3.setTags({"script_action_icon": "SOP_comb"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "bend_axisskinattrib#", label: "Axis Attribute", num_components: 1, default_value: ["bendaxis"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1,\n            attribSize=3)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_axismode# != axisskinattrib }");
			hou_parm_template3.setTags({"script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(kwargs, kwargs['parmtuple'][0].eval(), skininput=1, mode='comb')", "script_action_icon": "SOP_comb"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "bend_dir#", label: "Direction", num_components: 3, default_value: [0, 0, null], min: null, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.XYZW});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_axismode# != dirconstant }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "bend_dircurveattrib#", label: "Direction Attribute", num_components: 1, default_value: ["benddir"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0,\n            attribSize=3)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_axismode# != dircurveattrib }");
			hou_parm_template3.setTags({"script_action_icon": "SOP_comb"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "bend_dirskinattrib#", label: "Direction Attribute", num_components: 1, default_value: ["benddir"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1,\n            attribSize=3)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_axismode# != dirskinattrib }");
			hou_parm_template3.setTags({"script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(kwargs, kwargs['parmtuple'][0].eval(), skininput=1, mode='comb')", "script_action_icon": "SOP_comb"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "bend_dirtoaxis#", label: "Axis Computation", menu_items: ["skinnormal", "rootdir", "tangent"], menu_labels: ["Cross Product of Skin Normal and Direction", "Cross Product of Root Tangent and Direction", "Cross Product of Local Tangent and  Direction"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_axismode# != rootdir bend_axismode# != dirconstant bend_axismode# != dircurveattrib bend_axismode# != dirskinattrib }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "bend_angle#", label: "Angle", num_components: 1, default_value: [15], min: null, max: 90, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "bend_angleoverride#", label: "Angle Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_angle#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "bend_angleoptions#", label: "Angle Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_angle#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "bend_angleinrange#", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ bend_angleoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_angleoptions# != 1 bend_angleoptions# != 3 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_angle#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "bend_angleoutrange#", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ bend_angleoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_angleoptions# != 1 bend_angleoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_angle#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "bend_anglemapramptobarbs#", label: "Map Ramp to Barbs", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_angleoptions# != 2 bend_angleoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_angle#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.RampParmTemplate({name: "bend_angleremapramp#", label: "Angle Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_angleoptions# != 2 bend_angleoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_angle#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "bend_anglecurveattrib#", label: "Angle Attrib", num_components: 1, default_value: ["anglescale"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_angleoverride# != curveattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_angle#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "bend_angleattrib#", label: "Angle Attrib", num_components: 1, default_value: ["anglescale"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_angleoverride# != skinattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_angle#", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Angle Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "bend_angletexture#", label: "Angle Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_angleoverride# != texture }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_angle#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "bend_angletextureprim#", label: "Angle Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_angleoverride# != textureprim }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_angle#", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Angle Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "bend_angleuvmode#", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_angleoverride# != textureprim }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_angle#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "bend_anglerand#", label: "Random Angle", num_components: 1, default_value: [0], min: 0, max: 90, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "bend_anglerandoverride#", label: "Random Angle Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_anglerand#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "bend_anglerandoptions#", label: "Random Angle Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_anglerand#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "bend_anglerandinrange#", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ bend_anglerandoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_anglerandoptions# != 1 bend_anglerandoptions# != 3 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_anglerand#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "bend_anglerandoutrange#", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ bend_anglerandoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_anglerandoptions# != 1 bend_anglerandoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_anglerand#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.RampParmTemplate({name: "bend_anglerandremapramp#", label: "Random Angle Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_anglerandoptions# != 2 bend_anglerandoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_anglerand#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "bend_anglerandcurveattrib#", label: "Random Angle Attrib", num_components: 1, default_value: ["anglerandscale"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_anglerandoverride# != curveattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_anglerand#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "bend_anglerandattrib#", label: "Random Angle Attrib", num_components: 1, default_value: ["anglerandscale"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_anglerandoverride# != skinattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_anglerand#", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Random Angle Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "bend_anglerandtexture#", label: "Random Angle Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_anglerandoverride# != texture }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_anglerand#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "bend_anglerandtextureprim#", label: "Random Angle Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_anglerandoverride# != textureprim }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_anglerand#", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Random Angle Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "bend_angleranduvmode#", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_anglerandoverride# != textureprim }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_anglerand#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "bend_anglerandbias#", label: "Randomness Bias", num_components: 1, default_value: [0.5], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "bend_anglerandbiasoverride#", label: "Randomness Bias Override", menu_items: ["none", "curveattrib", "skinattrib", "texture", "textureprim"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture", "Texture Primitive"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_anglerandbias#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "bend_anglerandbiasoptions#", label: "Randomness Bias Options", menu_items: ["fit", "ramp"], menu_labels: ["Fit", "Ramp"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringToggle, menu_use_token: false, is_button_strip: true, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_anglerandbias#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "bend_anglerandbiasinrange#", label: "In Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ bend_anglerandbiasoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_anglerandbiasoptions# != 1 bend_anglerandbiasoptions# != 3 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_anglerandbias#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "bend_anglerandbiasoutrange#", label: "Out Range", num_components: 2, default_value: [0, 1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.DisableWhen, "{ bend_anglerandbiasoverride# == none }");
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_anglerandbiasoptions# != 1 bend_anglerandbiasoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_anglerandbias#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.RampParmTemplate({name: "bend_anglerandbiasremapramp#", label: "Randomness Bias Remap Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 2, default_basis: null, color_type: null});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_anglerandbiasoptions# != 2 bend_anglerandbiasoptions# != 3 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_anglerandbias#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "bend_anglerandbiascurveattrib#", label: "Randomness Bias Attrib", num_components: 1, default_value: ["anglerandbiasscale"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_anglerandbiasoverride# != curveattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_anglerandbias#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "bend_anglerandbiasattrib#", label: "Randomness Bias Attrib", num_components: 1, default_value: ["anglerandbiasscale"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_anglerandbiasoverride# != skinattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_anglerandbias#", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Randomness Bias Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "bend_anglerandbiastexture#", label: "Randomness Bias Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_anglerandbiasoverride# != texture }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_anglerandbias#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "bend_anglerandbiastextureprim#", label: "Randomness Bias Texture", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import terraintoolutils\n\nreturn terraintoolutils.buildNameMenu(kwargs['node'], input_num=2)", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_anglerandbiasoverride# != textureprim }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_anglerandbias#", "script_action": "import furtoolutils\n\nfurtoolutils.paintTextureMask(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, skininput=1,\n    skinparmname=None,\n    textureinput=2)", "script_action_help": "Paint Randomness Bias Attrib Texture", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "bend_anglerandbiasuvmode#", label: "UV Mode", menu_items: ["skinuv", "curveuv", "featheruv"], menu_labels: ["Skin UV", "Curve UV", "Feather UV"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != bend } { bend_anglerandbiasoverride# != textureprim }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "bend_anglerandbias#"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FolderParmTemplate({name: "simattrib_numattribs#", label: "Simulation Attributes", folder_type: hou.folderType.MultiparmBlock, default_value: 0, ends_tab_group: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ op# != simattrib }");
			let hou_parm_template4 = new hou.ToggleParmTemplate({name: "simattrib_active#_#", label: "Active", default_value: true});
			hou_parm_template4.hideLabel(true);
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.MenuParmTemplate({name: "simattrib_attrib#_#", label: "Attribute", menu_items: ["density", "width", "klinear", "damplinear", "kangular", "dampangular", "targetstiffness", "targetdamping", "normaldrag", "tangentdrag", "friction", "dynamicfriction", "gluetoanimation", "pintoanimation", "nocollide", "selfcollisionallowed", "selfcollisionresolved", "externalcollisionallowed", "externalcollisionresolved", "softbodycollisionallowed", "softbodycollisionallowed"], menu_labels: ["Density", "Width", "Stretch Stiffness", "Strech Damping", "Bend Stiffness", "Bend Damping", "Target Stiffness", "Target Damping", "Normal Drag", "Tangent Drag", "Static Friction", "Dynamic Friction", "Glue To Animation (Constrain Position & Direction)", "Pin To Animation (Constrain Position)", "Disable SDF Collisions", "Self Collision Allowed", "Self Collision Resolved", "External Collision Allowed", "External Collision Resolved", "Soft-Body Collision Allowed", "Soft-Body Collision Resolved"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ simattrib_active#_# == 0 }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template4.setTags({"script_callback": "", "script_callback_language": "hscript"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.MenuParmTemplate({name: "simattrib_class#_#", label: "Class", menu_items: ["primitive", "point", "vertex"], menu_labels: ["Primitive", "Point", "Vertex"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ simattrib_active#_# == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ simattrib_attrib#_# == targetstiffness } { simattrib_attrib#_# == targetdamping } { simattrib_attrib#_# == normaldrag } { simattrib_attrib#_# == tangentdrag } { simattrib_attrib#_# == friction } { simattrib_attrib#_# == dynamicfriction } { simattrib_attrib#_# == gluetoanimation } { simattrib_attrib#_# == pintoanimation } { simattrib_attrib#_# == selfcollisionallowed } { simattrib_attrib#_# == selfcollisionresolved } { simattrib_attrib#_# == externalcollisionallowed } { simattrib_attrib#_# == externalcollisionresolved } { simattrib_attrib#_# == softbodycollisionallowed } { simattrib_attrib#_# == softbodycollisionresolved }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback": "", "script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.MenuParmTemplate({name: "simattrib_pointclass#_#", label: "Class", menu_items: ["point"], menu_labels: ["Point"], default_value: 0, default_expression: "primitive", default_expression_language: hou.scriptLanguage.Hscript, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ simattrib_active#_# == 0 } { simattrib_attrib#_# != this_value_never_occurs_so_always_disabled }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ simattrib_attrib#_# != targetstiffness simattrib_attrib#_# != targetdamping simattrib_attrib#_# != normaldrag simattrib_attrib#_# != tangentdrag simattrib_attrib#_# != friction simattrib_attrib#_# != dynamicfriction simattrib_attrib#_# != gluetoanimation simattrib_attrib#_# != pintoanimation simattrib_attrib#_# != selfcollisionallowed simattrib_attrib#_# != selfcollisionresolved simattrib_attrib#_# != externalcollisionallowed simattrib_attrib#_# != externalcollisionresolved simattrib_attrib#_# != softbodycollisionallowed simattrib_attrib#_# != softbodycollisionresolved }");
			hou_parm_template4.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template4.setTags({"script_callback": "", "script_callback_language": "python"});
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.MenuParmTemplate({name: "simattrib_scalarmode#_#", label: "Mode", menu_items: ["set", "add", "min", "max", "mult"], menu_labels: ["Set", "Add", "Minimum", "Maximum", "Multiply"], default_value: 4, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ simattrib_active#_# == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ simattrib_attrib#_# == gluetoanimation } { simattrib_attrib#_# == pintoanimation } { simattrib_attrib#_# == nocollide } { simattrib_attrib#_# == selfcollisionallowed } { simattrib_attrib#_# == selfcollisionresolved } { simattrib_attrib#_# == externalcollisionallowed } { simattrib_attrib#_# == externalcollisionresolved } { simattrib_attrib#_# == softbodycollisionallowed } { simattrib_attrib#_# == softbodycollisionallowed }");
			hou_parm_template4.setJoinWithNext(true);
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.FloatParmTemplate({name: "simattrib_scalarvalue#_#", label: "Value", num_components: 1, default_value: [1], min: 0, max: 10, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ simattrib_active#_# == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ simattrib_attrib#_# == gluetoanimation } { simattrib_attrib#_# == pintoanimation } { simattrib_attrib#_# == nocollide } { simattrib_attrib#_# == selfcollisionallowed } { simattrib_attrib#_# == selfcollisionresolved } { simattrib_attrib#_# == externalcollisionallowed } { simattrib_attrib#_# == externalcollisionresolved } { simattrib_attrib#_# == softbodycollisionallowed } { simattrib_attrib#_# == softbodycollisionallowed }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "simattrib_scalarsnippet#_#", label: "VEXpression", num_components: 1, default_value: ["value"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import vexpressionmenu\n\nreturn vexpressionmenu.buildSingleLineSnippetMenu('guideprocess/simattrib_scalarsnippet')", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ simattrib_active#_# == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ simattrib_attrib#_# == gluetoanimation } { simattrib_attrib#_# == pintoanimation } { simattrib_attrib#_# == nocollide } { simattrib_attrib#_# == selfcollisionallowed } { simattrib_attrib#_# == selfcollisionresolved } { simattrib_attrib#_# == externalcollisionallowed } { simattrib_attrib#_# == externalcollisionresolved } { simattrib_attrib#_# == softbodycollisionallowed } { simattrib_attrib#_# == softbodycollisionallowed }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.MenuParmTemplate({name: "simattrib_togglemode#_#", label: "Mode", menu_items: ["set", "min", "max", "toggle"], menu_labels: ["Set", "Minimum", "Maximum", "Toggle"], default_value: 2, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ simattrib_active#_# == 0 }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ simattrib_attrib#_# != gluetoanimation simattrib_attrib#_# != pintoanimation simattrib_attrib#_# != nocollide simattrib_attrib#_# != selfcollisionallowed simattrib_attrib#_# != selfcollisionresolved simattrib_attrib#_# != externalcollisionallowed simattrib_attrib#_# != externalcollisionresolved simattrib_attrib#_# != softbodycollisionallowed simattrib_attrib#_# != softbodycollisionallowed }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.ToggleParmTemplate({name: "simattrib_togglevalue#_#", label: "Value", default_value: false});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ simattrib_active#_# == 0 } { simattrib_togglemode#_# == toggle }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ simattrib_attrib#_# != gluetoanimation simattrib_attrib#_# != pintoanimation simattrib_attrib#_# != nocollide simattrib_attrib#_# != selfcollisionallowed simattrib_attrib#_# != selfcollisionresolved simattrib_attrib#_# != externalcollisionallowed simattrib_attrib#_# != externalcollisionresolved simattrib_attrib#_# != softbodycollisionallowed simattrib_attrib#_# != softbodycollisionallowed }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template4 = new hou.StringParmTemplate({name: "simattrib_togglesnippet#_#", label: "VEXpression", num_components: 1, default_value: ["value"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import vexpressionmenu\n\nreturn vexpressionmenu.buildSingleLineSnippetMenu('guideprocess/simattrib_togglesnippet')", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template4.setConditional(hou.parmCondType.DisableWhen, "{ simattrib_active#_# == 0 } { simattrib_togglemode#_# == toggle }");
			hou_parm_template4.setConditional(hou.parmCondType.HideWhen, "{ simattrib_attrib#_# != gluetoanimation simattrib_attrib#_# != pintoanimation simattrib_attrib#_# != nocollide simattrib_attrib#_# != selfcollisionallowed simattrib_attrib#_# != selfcollisionresolved simattrib_attrib#_# != externalcollisionallowed simattrib_attrib#_# != externalcollisionresolved simattrib_attrib#_# != softbodycollisionallowed simattrib_attrib#_# != softbodycollisionallowed }");
			hou_parm_template3.addParmTemplate(hou_parm_template4);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			hou_parm_template = new hou.FolderParmTemplate({name: "folder0_1_1", label: "Masking", folder_type: hou.folderType.Tabs, default_value: 0, ends_tab_group: false});
			hou_parm_template2 = new hou.FolderParmTemplate({name: "skinmaskfolder", label: "Input Mask", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.FloatParmTemplate({name: "blend", label: "Blend", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: true, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "blendoverride", label: "Blend Override", menu_items: ["none", "curveattrib", "skinattrib", "texture"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ legacymasking == 1 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "blend"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "blendcurveattrib", label: "Blend Attrib", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ blendoverride != curveattrib } { legacymasking == 1 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "blend"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "blendattrib", label: "Blend Attrib", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ blendoverride != skinattrib } { legacymasking == 1 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "blend", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Blend Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "blendtexture", label: "Blend Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ blendoverride != texture } { legacymasking == 1 }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "blend"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "useskinmask", label: "Use Skin Mask", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ legacymasking == 0 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "skinmasktype", label: "Type", menu_items: ["attrib", "texture"], menu_labels: ["Attribute", "Texture"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ useskinmask == 0 } { legacymasking == 0 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "skinmaskattrib", label: "Attribute", num_components: 1, default_value: ["mask"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(kwargs['node'], skininput=1, attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ useskinmask == 0 } { skinmasktype != attrib } { legacymasking == 0 }");
			hou_parm_template3.setTags({"script_action": "import furtoolutils\n\nwith hou.undos.group('Paint Attribute'):\n    furtoolutils.paintSkinAttrib(kwargs, kwargs['parmtuple'][0].eval(), 0.0, 1)", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "skinmasktexture", label: "Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ useskinmask == 0 } { skinmasktype != texture } { legacymasking == 0 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "curvemaskfolder", label: "Curve Mask", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "usecurvemask", label: "Use Curve Mask", default_value: false});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "curvemaskabsrange", label: "Range In Absolute Length", default_value: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ usecurvemask == 0 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "curvemaskrangemin", label: "Range Min", num_components: 1, default_value: [0], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ usecurvemask == 0 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "curvemaskrangemax", label: "Range Max", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ usecurvemask == 0 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "curvemaskeffectpos", label: "Effect Position", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ usecurvemask == 0 }");
			hou_parm_template3.setScriptCallback("__import__(\"furutils\").updateCurveMaskRamp(kwargs)");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback": "__import__(\"furutils\").updateCurveMaskRamp(kwargs)", "script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "curvemaskfalloff", label: "Falloff", num_components: 1, default_value: [0.5], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ usecurvemask == 0 }");
			hou_parm_template3.setScriptCallback("__import__(\"furutils\").updateCurveMaskRamp(kwargs)");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback": "__import__(\"furutils\").updateCurveMaskRamp(kwargs)", "script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "curvemaskwidth", label: "Influence Width", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: true, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ usecurvemask == 0 }");
			hou_parm_template3.setScriptCallback("__import__(\"furutils\").updateCurveMaskRamp(kwargs)");
			hou_parm_template3.setScriptCallbackLanguage(hou.scriptLanguage.Python);
			hou_parm_template3.setTags({"script_callback": "__import__(\"furutils\").updateCurveMaskRamp(kwargs)", "script_callback_language": "python"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.RampParmTemplate({name: "curvemaskramp", label: "Curve Mask Ramp", ramp_parm_type: hou.rampParmType.Float, default_value: 3, default_basis: null, color_type: null});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ usecurvemask == 0 }");
			hou_parm_template3.setTags({"rampfloatdefault": "1pos ( 0 ) 1value ( 0 ) 1interp ( bspline ) 2pos ( 0.30974876880645752 ) 2value ( 0.27643021941184998 ) 2interp ( bspline ) 3pos ( 1 ) 3value ( 1 ) 3interp ( bspline )"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template2 = new hou.FolderParmTemplate({name: "noisemaskfolder", label: "Noise Mask", folder_type: hou.folderType.Simple, default_value: 0, ends_tab_group: false});
			hou_parm_template2.setTags({"group_type": "simple"});
			hou_parm_template3 = new hou.ToggleParmTemplate({name: "usenoisemask", label: "Use Noise Mask", default_value: false});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "noisemaskamount", label: "Amount", num_components: 1, default_value: [1], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ usenoisemask == 0 }");
			hou_parm_template3.setJoinWithNext(true);
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "parmvop": "1", "shaderparmcontexts": "cvex"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.MenuParmTemplate({name: "noisemaskamountoverride", label: "Amount Override", menu_items: ["none", "curveattrib", "skinattrib", "texture"], menu_labels: ["No Override", "Guide Attribute", "Skin Attribute", "Texture"], default_value: 0, icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.Normal, menu_use_token: false, is_button_strip: false, strip_uses_icons: false});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ usenoisemask == 0 }");
			hou_parm_template3.hideLabel(true);
			hou_parm_template3.setTags({"parmoverride_mainparm": "noisemaskamount"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "noisemaskamountcurveattrib", label: "Amount Attrib", num_components: 1, default_value: ["noiseamount"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=0, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ usenoisemask == 0 } { noisemaskamountoverride != curveattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "noisemaskamount"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "noisemaskamountattrib", label: "Amount Attrib", num_components: 1, default_value: ["noiseamount"], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.Regular, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "import furtoolutils\n\ntry:\n    return furtoolutils.buildSkinPaintAttribMenu(\n            kwargs['node'], skininput=1, skinparmname=None,\n            attribSize=1)\nexcept:\n    return []", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ usenoisemask == 0 } { noisemaskamountoverride != skinattrib }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "noisemaskamount", "script_action": "import furtoolutils\n\nfurtoolutils.paintSkinAttrib(\n    kwargs,\n    kwargs['parmtuple'][0].eval(),\n    1.0, 1,\n    skinparmname=None)", "script_action_help": "Paint Amount Attrib", "script_action_icon": "SOP_paint"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.StringParmTemplate({name: "noisemaskamounttexture", label: "Amount Texture", num_components: 1, default_value: [""], naming_scheme: hou.parmNamingScheme.Base1, string_type: hou.stringParmType.FileReference, file_type: hou.fileType.Image, menu_items: [], menu_labels: [], icon_names: [], item_generator_script: "", item_generator_script_language: hou.scriptLanguage.Python, menu_type: hou.menuType.StringReplace});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ usenoisemask == 0 } { noisemaskamountoverride != texture }");
			hou_parm_template3.setTags({"parmoverride_mainparm": "noisemaskamount"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "noisemaskfreq", label: "Noise Mask Frequency", num_components: 1, default_value: [20], min: 0, max: 100, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ usenoisemask == 0 }");
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "noisemaskgain", label: "Gain", num_components: 1, default_value: [0.5], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ usenoisemask == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "parmvop": "1", "shaderparmcontexts": "cvex"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template3 = new hou.FloatParmTemplate({name: "noisemaskbias", label: "Bias", num_components: 1, default_value: [0.5], min: 0, max: 1, min_is_strict: false, max_is_strict: false, look: hou.parmLook.Regular, naming_scheme: hou.parmNamingScheme.Base1});
			hou_parm_template3.setConditional(hou.parmCondType.HideWhen, "{ usenoisemask == 0 }");
			hou_parm_template3.setTags({"autoscope": "0000000000000000", "parmvop": "1", "shaderparmcontexts": "cvex"});
			hou_parm_template2.addParmTemplate(hou_parm_template3);
			hou_parm_template.addParmTemplate(hou_parm_template2);
			hou_parm_template_group.append(hou_parm_template);
			
            this.parmTemplateGroup = hou_parm_template_group;
            this.parmTemplateGroup.linkNode(this);
        }
    }
    hou.registerType('SOP/Character FX/Hair and Fur/guideprocess',_hnt_SOP_guideprocess)
    return _hnt_SOP_guideprocess
}
        