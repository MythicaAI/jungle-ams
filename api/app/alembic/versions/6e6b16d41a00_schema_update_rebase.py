"""schema-update-rebase

Revision ID: 6e6b16d41a00
Revises: 
Create Date: 2024-07-19 00:31:36.029297+00:00

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision: str = '6e6b16d41a00'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('files',
    sa.Column('file_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('deleted', sa.DateTime(), nullable=True),
    sa.Column('size', sa.Integer(), nullable=True),
    sa.Column('content_type', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('owner_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('cache_ttl', sa.Integer(), nullable=True),
    sa.Column('downloads', sa.Integer(), nullable=True),
    sa.Column('lifetime', sa.Integer(), nullable=True),
    sa.Column('content_hash', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('locators', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('file_id')
    )
    op.create_table('orgs',
    sa.Column('org_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('created', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('org_id')
    )
    op.create_table('profile_followers',
    sa.Column('profile_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('follower_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('created', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('deleted', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('profile_id', 'follower_id')
    )
    op.create_table('profile_keys',
    sa.Column('key', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('owner_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('expires', sa.DateTime(), nullable=True),
    sa.Column('payload', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('key')
    )
    op.create_table('profiles',
    sa.Column('profile_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('full_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('signature', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('profile_base_href', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('email_validate_state', sa.Integer(), nullable=True),
    sa.Column('location', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('login_count', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('profile_id')
    )
    op.create_table('asset_versions',
    sa.Column('asset_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('published', sa.Boolean(), nullable=True),
    sa.Column('major', sa.Integer(), nullable=False),
    sa.Column('minor', sa.Integer(), nullable=False),
    sa.Column('patch', sa.Integer(), nullable=False),
    sa.Column('commit_ref', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('created', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('author_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('package_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('contents', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['author_id'], ['profiles.profile_id'], ),
    sa.ForeignKeyConstraint(['package_id'], ['files.file_id'], ),
    sa.PrimaryKeyConstraint('asset_id', 'major', 'minor', 'patch')
    )
    op.create_table('assets',
    sa.Column('asset_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('created', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('deleted', sa.DateTime(), nullable=True),
    sa.Column('org_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('owner_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['profiles.profile_id'], ),
    sa.PrimaryKeyConstraint('asset_id')
    )
    op.create_table('events',
    sa.Column('event_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('event_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('queued', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('acked', sa.DateTime(), nullable=True),
    sa.Column('completed', sa.DateTime(), nullable=True),
    sa.Column('job_data', sa.JSON(), nullable=True),
    sa.Column('owner_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.Column('created_in', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('affinity', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['owner_id'], ['profiles.profile_id'], ),
    sa.PrimaryKeyConstraint('event_id')
    )
    op.create_table('org_refs',
    sa.Column('org_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('profile_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('role', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('created', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('author_id', sqlmodel.sql.sqltypes.GUID(), nullable=True),
    sa.ForeignKeyConstraint(['author_id'], ['profiles.profile_id'], ),
    sa.PrimaryKeyConstraint('org_id', 'profile_id', 'role')
    )
    op.create_table('profile_sessions',
    sa.Column('profile_session_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('created', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('refreshed', sa.DateTime(), nullable=True),
    sa.Column('profile_id', sqlmodel.sql.sqltypes.GUID(), nullable=False),
    sa.Column('authenticated', sa.Boolean(), nullable=True),
    sa.Column('auth_token', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('refresh_token', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('location', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['profile_id'], ['profiles.profile_id'], ),
    sa.PrimaryKeyConstraint('profile_session_id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('profile_sessions')
    op.drop_table('org_refs')
    op.drop_table('events')
    op.drop_table('assets')
    op.drop_table('asset_versions')
    op.drop_table('profiles')
    op.drop_table('profile_keys')
    op.drop_table('profile_followers')
    op.drop_table('orgs')
    op.drop_table('files')
    # ### end Alembic commands ###
