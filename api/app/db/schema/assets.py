# AUTOGENERATED from fileassetkit.schema
#
#
# pylint: disable=unused-import
from sqlalchemy import JSON, TIMESTAMP, Column, func, text, UniqueConstraint
from sqlalchemy.types import Integer, BigInteger
from sqlalchemy.sql.functions import now as sql_now
from sqlalchemy.sql.schema import Sequence, ForeignKey
from sqlalchemy.sql.ddl import CreateSequence, DropSequence
from sqlalchemy.ext.declarative import declared_attr
from sqlmodel import Field, SQLModel
from pydantic import ConfigDict
from typing import Any, Dict
from datetime import datetime
from uuid import UUID, uuid4


# sequences for table assets

class Asset(SQLModel, table=True):
    """
    Metadata to store relationships and descriptions of assets
    """
    __tablename__ = "assets"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types

    # pylint: disable=no-self-argument
    @declared_attr
    def __table_args__(cls):
        # ensure auto increment behavior on non-PK int columns
        return None

    asset_seq: int = Field(sa_column=Column('asset_seq',BigInteger().with_variant(Integer, 'sqlite'),primary_key=True,nullable=False))
    created: datetime | None = Field(sa_type=TIMESTAMP(timezone=True),sa_column_kwargs={'server_default': sql_now(), 'nullable': False},default=None)
    updated: datetime | None = Field(default=None,sa_type=TIMESTAMP(timezone=True),sa_column_kwargs={'server_onupdate': sql_now(), 'nullable': True})
    deleted: datetime | None = Field(sa_type=TIMESTAMP(timezone=True),default=None)
    org_seq: int | None = Field(sa_column=Column('org_seq',BigInteger().with_variant(Integer, 'sqlite'),default=0))
    owner_seq: int | None = Field(sa_column=Column('owner_seq',BigInteger().with_variant(Integer, 'sqlite'),ForeignKey('profiles.profile_seq'),default=None))

# sequences for table asset_versions

class AssetVersion(SQLModel, table=True):
    """
    Metadata to store relationships and descriptions of assets
    """
    __tablename__ = "asset_versions"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types

    # pylint: disable=no-self-argument
    @declared_attr
    def __table_args__(cls):
        # ensure auto increment behavior on non-PK int columns
        return None

    asset_seq: int = Field(sa_column=Column('asset_seq',BigInteger().with_variant(Integer, 'sqlite'),primary_key=True,nullable=False))
    published: bool | None = Field(default=False)
    major: int = Field(sa_column=Column('major',Integer,primary_key=True,nullable=False))
    minor: int = Field(sa_column=Column('minor',Integer,primary_key=True,nullable=False))
    patch: int = Field(sa_column=Column('patch',Integer,primary_key=True,nullable=False))
    commit_ref: str | None = Field(default=None)
    created: datetime | None = Field(sa_type=TIMESTAMP(timezone=True),sa_column_kwargs={'server_default': sql_now(), 'nullable': False},default=None)
    name: str | None = Field(default=None)
    description: str | None = Field(default=None)
    author_seq: int = Field(sa_column=Column('author_seq',BigInteger().with_variant(Integer, 'sqlite'),ForeignKey('profiles.profile_seq'),default=None))
    package_seq: int | None = Field(sa_column=Column('package_seq',BigInteger().with_variant(Integer, 'sqlite'),ForeignKey('files.file_seq'),default=None))
    contents: Dict[str, Any] | None = Field(default_factory=dict,sa_column=Column(JSON))
    deleted: datetime | None = Field(sa_type=TIMESTAMP(timezone=True),default=None)

# sequences for table asset_tags

class AssetTag(SQLModel, table=True):
    """
    Metadata to store relationships and descriptions of assets
    """
    __tablename__ = "asset_tags"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types

    # pylint: disable=no-self-argument
    @declared_attr
    def __table_args__(cls):
        # ensure auto increment behavior on non-PK int columns
        return None

    type_seq: int = Field(sa_column=Column('type_seq',BigInteger().with_variant(Integer, 'sqlite'),primary_key=True,nullable=False))
    tag_seq: int = Field(sa_column=Column('tag_seq',BigInteger().with_variant(Integer, 'sqlite'),primary_key=True,nullable=False))

# sequences for table asset_version_entry_points

class AssetVersionEntryPoint(SQLModel, table=True):
    """
    Metadata to store relationships and descriptions of assets
    """
    __tablename__ = "asset_version_entry_points"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types

    # pylint: disable=no-self-argument
    @declared_attr
    def __table_args__(cls):
        # ensure auto increment behavior on non-PK int columns
        return None

    asset_seq: int = Field(sa_column=Column('asset_seq',BigInteger().with_variant(Integer, 'sqlite'),primary_key=True,nullable=False))
    major: int = Field(sa_column=Column('major',Integer,primary_key=True,nullable=False))
    minor: int = Field(sa_column=Column('minor',Integer,primary_key=True,nullable=False))
    patch: int = Field(sa_column=Column('patch',Integer,primary_key=True,nullable=False))
    src_file_seq: int | None = Field(sa_column=Column('src_file_seq',BigInteger().with_variant(Integer, 'sqlite'),ForeignKey('files.file_seq'),default=None))
    entry_point: str | None = Field(default=None)
    job_def_seq: int | None = Field(sa_column=Column('job_def_seq',BigInteger().with_variant(Integer, 'sqlite'),ForeignKey('job_defs.job_def_seq'),default=None))
