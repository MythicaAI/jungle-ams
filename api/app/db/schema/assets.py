# AUTOGENERATED from fileassetkit.schema
#
#
# pylint: disable=unused-import
from sqlalchemy import JSON, TIMESTAMP, Column, func, text
from sqlalchemy.sql.functions import now as sql_now
from sqlmodel import Field, SQLModel
from pydantic import ConfigDict
from typing import Any, Dict
from datetime import datetime
from uuid import UUID, uuid4



class Asset(SQLModel, table=True):
    """
    Metadata to store relationships and descriptions of assets
    """
    __tablename__ = "assets"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types
    id: UUID = Field(primary_key=True, default_factory=uuid4, nullable=False)
    created: datetime | None = Field(sa_type=TIMESTAMP(timezone=True), sa_column_kwargs={'server_default': sql_now(), 'nullable': False})
    updated: datetime | None = Field(default=None, sa_type=TIMESTAMP(timezone=True), sa_column_kwargs={'server_onupdate': sql_now(), 'nullable': True})
    deleted: datetime | None = None
    org_id: UUID | None = uuid4()
    owner: UUID | None = Field(foreign_key='profiles.id')


class AssetVersion(SQLModel, table=True):
    """
    Metadata to store relationships and descriptions of assets
    """
    __tablename__ = "asset_versions"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types
    asset_id: UUID = Field(primary_key=True, nullable=False)
    published: bool | None = False
    major: int = Field(primary_key=True, nullable=False)
    minor: int = Field(primary_key=True, nullable=False)
    patch: int = Field(primary_key=True, nullable=False)
    commit_ref: str | None = None
    created: datetime | None = Field(sa_type=TIMESTAMP(timezone=True), sa_column_kwargs={'server_default': sql_now(), 'nullable': False})
    name: str | None = None
    description: str | None = None
    author: UUID = Field(foreign_key='profiles.id')
    package_id: UUID | None = Field(foreign_key='files.id')
    contents: Dict[str, Any] | None = Field(default_factory=dict, sa_column=Column(JSON))


class Topology(SQLModel, table=True):
    """
    Provides a grouping for asset graphs
    """
    __tablename__ = "topologies"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types
    id: int = Field(primary_key=True, nullable=False)
    owner: UUID = uuid4()
    org_id: UUID | None = uuid4()
    created: datetime | None = Field(sa_type=TIMESTAMP(timezone=True), sa_column_kwargs={'server_default': sql_now(), 'nullable': False})
    updated: datetime | None = Field(default=None, sa_type=TIMESTAMP(timezone=True), sa_column_kwargs={'server_onupdate': sql_now(), 'nullable': True})
    name: str | None = None
    description: str | None = None
    edge_data_schema: Dict[str, Any] | None = Field(default_factory=dict, sa_column=Column(JSON))


class AssetRef(SQLModel, table=True):
    """
    Records relationships between assets
    """
    __tablename__ = "asset_refs"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types
    topology_id: int = Field(primary_key=True, nullable=False)
    src: UUID = Field(primary_key=True, nullable=False)
    dst: UUID = Field(primary_key=True, nullable=False)
    edge_data: Dict[str, Any] | None = Field(default_factory=dict, sa_column=Column(JSON))
