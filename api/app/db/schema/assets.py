# AUTOGENERATED from fileassetkit.schema
#
#
# pylint: disable=unused-import
from sqlalchemy import JSON, TIMESTAMP, Column, func, text
from sqlalchemy.sql.functions import now as sql_now
from sqlmodel import Field, SQLModel
from pydantic import ConfigDict
from typing import Any, Dict
from datetime import datetime
from uuid import UUID, uuid4



class Asset(SQLModel, table=True):
    """
    Metadata to store relationships and descriptions of assets
    """
    __tablename__ = "assets"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types
    asset_id: UUID = Field(primary_key=True,nullable=False,default_factory=uuid4)
    created: datetime | None = Field(sa_type=TIMESTAMP(timezone=True),sa_column_kwargs={'server_default': sql_now(), 'nullable': False},default=None)
    updated: datetime | None = Field(default=None,sa_type=TIMESTAMP(timezone=True),sa_column_kwargs={'server_onupdate': sql_now(), 'nullable': True})
    deleted: datetime | None = Field(default=None)
    org_id: UUID | None = Field(default=uuid4())
    owner_id: UUID | None = Field(foreign_key='profiles.profile_id',default=None)


class AssetVersion(SQLModel, table=True):
    """
    Metadata to store relationships and descriptions of assets
    """
    __tablename__ = "asset_versions"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types
    asset_id: UUID = Field(primary_key=True,nullable=False,default_factory=uuid4)
    published: bool | None = Field(default=False)
    major: int = Field(primary_key=True,nullable=False)
    minor: int = Field(primary_key=True,nullable=False)
    patch: int = Field(primary_key=True,nullable=False)
    commit_ref: str | None = Field(default=None)
    created: datetime | None = Field(sa_type=TIMESTAMP(timezone=True),sa_column_kwargs={'server_default': sql_now(), 'nullable': False},default=None)
    name: str | None = Field(default=None)
    description: str | None = Field(default=None)
    author_id: UUID = Field(foreign_key='profiles.profile_id',default=None)
    package_id: UUID | None = Field(foreign_key='files.file_id',default=None)
    contents: Dict[str, Any] | None = Field(default_factory=dict,sa_column=Column(JSON))
