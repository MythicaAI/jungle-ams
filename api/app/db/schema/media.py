# AUTOGENERATED from fileassetkit.schema
#
#
# pylint: disable=unused-import
from sqlalchemy import JSON, TIMESTAMP, Column, func, text
from sqlalchemy.sql.functions import now as sql_now
from sqlmodel import Field, SQLModel
from pydantic import ConfigDict
from typing import Any, Dict
from datetime import datetime
from uuid import UUID, uuid4



class FileContent(SQLModel, table=True):
    """
    Types for storing and referencing rich media (images, etc)
    """
    __tablename__ = "files"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types
    id: UUID = Field(primary_key=True, default_factory=uuid4, nullable=False)
    name: str | None = None
    created: datetime | None = Field(sa_type=TIMESTAMP(timezone=True), sa_column_kwargs={'server_default': sql_now(), 'nullable': False})
    updated: datetime | None = Field(default=None, sa_type=TIMESTAMP(timezone=True), sa_column_kwargs={'server_onupdate': sql_now(), 'nullable': True})
    deleted: datetime | None = None
    size: int | None = 0
    content_type: str | None = None
    uri: str | None = None
    owner: UUID | None = uuid4()
    cache_ttl: int | None = 0
    lifetime: int | None = 0
    content_hash: str | None = None
    locators: Dict[str, Any] | None = Field(default_factory=dict, sa_column=Column(JSON))
