# AUTOGENERATED from fileassetkit.schema
#
#
# pylint: disable=unused-import
from sqlalchemy import JSON, TIMESTAMP, Column, func, text
from sqlalchemy.types import Integer, BigInteger
from sqlalchemy.sql.functions import now as sql_now
from sqlalchemy.sql.schema import Sequence, ForeignKey
from sqlalchemy.sql.ddl import CreateSequence, DropSequence
from sqlalchemy.ext.declarative import declared_attr
from sqlmodel import Field, SQLModel
from pydantic import ConfigDict
from typing import Any, Dict
from datetime import datetime
from uuid import UUID, uuid4


# sequences for table files

class FileContent(SQLModel, table=True):
    """
    Types for storing and referencing rich media (images, etc)
    """
    __tablename__ = "files"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types

    @declared_attr
    def __table_args__(cls):
        # ensure auto increment behavior on non-PK int columns
        return ({'sqlite_autoincrement': True}, )

    file_seq: int = Field(sa_column=Column('file_seq',BigInteger().with_variant(Integer, 'sqlite'),primary_key=True,nullable=False))
    name: str | None = Field(default=None)
    created: datetime | None = Field(sa_type=TIMESTAMP(timezone=True),sa_column_kwargs={'server_default': sql_now(), 'nullable': False},default=None)
    updated: datetime | None = Field(default=None,sa_type=TIMESTAMP(timezone=True),sa_column_kwargs={'server_onupdate': sql_now(), 'nullable': True})
    deleted: datetime | None = Field(sa_type=TIMESTAMP(timezone=True),default=None)
    size: int | None = Field(sa_column=Column('size',Integer,default=0))
    content_type: str | None = Field(default=None)
    owner_seq: int | None = Field(sa_column=Column('owner_seq',BigInteger().with_variant(Integer, 'sqlite'),ForeignKey('profiles.profile_seq'),default=None))
    cache_ttl: int | None = Field(sa_column=Column('cache_ttl',Integer,default=0))
    downloads: int | None = Field(sa_column=Column('downloads',Integer,default=0))
    lifetime: int | None = Field(sa_column=Column('lifetime',Integer,default=0))
    content_hash: str | None = Field(default=None)
    locators: Dict[str, Any] | None = Field(default_factory=dict,sa_column=Column(JSON))
