# AUTOGENERATED from fileassetkit.schema
#
#
from sqlalchemy import JSON, TIMESTAMP, Column, func, text
from sqlalchemy.sql.functions import now as sql_now
from sqlmodel import Field, SQLModel, create_engine, Session
from pydantic import ConfigDict
from typing import Any, Dict
from datetime import datetime
from uuid import UUID, uuid4



class Profile(SQLModel, table=True):
    """
    Types to represent profiles online
    """
    __tablename__ = "profiles"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types
    id: UUID = Field(primary_key=True, default_factory=uuid4, nullable=False)
    name: str | None = None
    signature: str | None = None
    created: datetime | None = Field(sa_type=TIMESTAMP(timezone=True), sa_column_kwargs={'server_default': sql_now(), 'nullable': False})
    updated: datetime | None = Field(default=None, sa_type=TIMESTAMP(timezone=True), sa_column_kwargs={'server_onupdate': sql_now(), 'nullable': True})
    active: bool | None = False
    tags: Dict[str, Any] | None = Field(default_factory=dict, sa_column=Column(JSON))
    profile_base_href: str | None = None
    description: str | None = None
    email: str | None = None
    email_verified: bool | None = False
    location: str | None = None
    login_count: int | None = 0


class OrgRef(SQLModel, table=True):
    """
    Types to represent profiles online
    """
    __tablename__ = "org_refs"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types
    id: int = Field(primary_key=True, nullable=False)
    created: datetime | None = Field(sa_type=TIMESTAMP(timezone=True), sa_column_kwargs={'server_default': sql_now(), 'nullable': False})
    updated: datetime | None = Field(default=None, sa_type=TIMESTAMP(timezone=True), sa_column_kwargs={'server_onupdate': sql_now(), 'nullable': True})
    profile_id: UUID = Field(foreign_key='profiles.id')
    org_id: UUID = Field(foreign_key='orgs.id')
    role: str | None = None


class Org(SQLModel, table=True):
    """
    Types to represent profiles online
    """
    __tablename__ = "orgs"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types
    id: UUID = Field(primary_key=True, default_factory=uuid4, nullable=False)
    created: datetime | None = Field(sa_type=TIMESTAMP(timezone=True), sa_column_kwargs={'server_default': sql_now(), 'nullable': False})
    updated: datetime | None = Field(default=None, sa_type=TIMESTAMP(timezone=True), sa_column_kwargs={'server_onupdate': sql_now(), 'nullable': True})
    name: str | None = None
    description: str | None = None
    tags: Dict[str, Any] | None = Field(default_factory=dict, sa_column=Column(JSON))


class ProfileSession(SQLModel, table=True):
    """
    Types to represent profiles online
    """
    __tablename__ = "profile_sessions"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types
    id: UUID = Field(primary_key=True, default_factory=uuid4, nullable=False)
    created: datetime | None = Field(sa_type=TIMESTAMP(timezone=True), sa_column_kwargs={'server_default': sql_now(), 'nullable': False})
    updated: datetime | None = Field(default=None, sa_type=TIMESTAMP(timezone=True), sa_column_kwargs={'server_onupdate': sql_now(), 'nullable': True})
    refreshed: datetime | None = None
    profile_id: UUID = Field(foreign_key='profiles.id')
    authenticated: bool | None = False
    auth_token: str | None = None
    refresh_token: str | None = None
    location: str | None = None


class ProfileFollower(SQLModel, table=True):
    """
    Types to represent profiles online
    """
    __tablename__ = "profile_followers"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types
    profile_id: UUID = Field(primary_key=True, nullable=False)
    follow_id: UUID = Field(primary_key=True, nullable=False)
    created: datetime | None = Field(sa_type=TIMESTAMP(timezone=True), sa_column_kwargs={'server_default': sql_now(), 'nullable': False})
    deleted: datetime | None = None
