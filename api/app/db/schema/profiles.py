# AUTOGENERATED from fileassetkit.schema
#
#
# pylint: disable=unused-import
from sqlalchemy import JSON, TIMESTAMP, Column, func, text
from sqlalchemy.sql.functions import now as sql_now
from sqlmodel import Field, SQLModel
from pydantic import ConfigDict
from typing import Any, Dict
from datetime import datetime
from uuid import UUID, uuid4



class Profile(SQLModel, table=True):
    """
    Types to represent profiles online
    """
    __tablename__ = "profiles"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types
    id: UUID = Field(primary_key=True,nullable=False,default_factory=uuid4)
    name: str | None = Field(default=None)
    full_name: str | None = Field(default=None)
    signature: str | None = Field(default=None)
    created: datetime | None = Field(sa_type=TIMESTAMP(timezone=True),sa_column_kwargs={'server_default': sql_now(), 'nullable': False},default=None)
    updated: datetime | None = Field(default=None,sa_type=TIMESTAMP(timezone=True),sa_column_kwargs={'server_onupdate': sql_now(), 'nullable': True})
    active: bool | None = Field(default=False)
    profile_base_href: str | None = Field(default=None)
    description: str | None = Field(default=None)
    email: str | None = Field(default=None)
    email_validate_state: int | None = Field(default=0)
    location: str | None = Field(default=None)
    login_count: int | None = Field(default=0)


class OrgRef(SQLModel, table=True):
    """
    Types to represent profiles online
    """
    __tablename__ = "org_refs"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types
    org_id: UUID = Field(primary_key=True,nullable=False,default_factory=uuid4)
    profile_id: UUID = Field(primary_key=True,nullable=False,default_factory=uuid4)
    role: str = Field(primary_key=True,nullable=False,default=None)
    created: datetime | None = Field(sa_type=TIMESTAMP(timezone=True),sa_column_kwargs={'server_default': sql_now(), 'nullable': False},default=None)
    created_by: UUID | None = Field(foreign_key='profiles.id',default=None)


class Org(SQLModel, table=True):
    """
    Types to represent profiles online
    """
    __tablename__ = "orgs"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types
    id: UUID = Field(primary_key=True,nullable=False,default_factory=uuid4)
    created: datetime | None = Field(sa_type=TIMESTAMP(timezone=True),sa_column_kwargs={'server_default': sql_now(), 'nullable': False},default=None)
    updated: datetime | None = Field(default=None,sa_type=TIMESTAMP(timezone=True),sa_column_kwargs={'server_onupdate': sql_now(), 'nullable': True})
    name: str | None = Field(default=None)
    description: str | None = Field(default=None)


class ProfileSession(SQLModel, table=True):
    """
    Types to represent profiles online
    """
    __tablename__ = "profile_sessions"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types
    id: UUID = Field(primary_key=True,nullable=False,default_factory=uuid4)
    created: datetime | None = Field(sa_type=TIMESTAMP(timezone=True),sa_column_kwargs={'server_default': sql_now(), 'nullable': False},default=None)
    refreshed: datetime | None = Field(default=None)
    profile_id: UUID = Field(foreign_key='profiles.id',default=None)
    authenticated: bool | None = Field(default=False)
    auth_token: str | None = Field(default=None)
    refresh_token: str | None = Field(default=None)
    location: str | None = Field(default=None)


class ProfileFollower(SQLModel, table=True):
    """
    Types to represent profiles online
    """
    __tablename__ = "profile_followers"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types
    profile_id: UUID = Field(primary_key=True,nullable=False,default_factory=uuid4)
    follow_id: UUID = Field(primary_key=True,nullable=False,default_factory=uuid4)
    created: datetime | None = Field(sa_type=TIMESTAMP(timezone=True),sa_column_kwargs={'server_default': sql_now(), 'nullable': False},default=None)
    deleted: datetime | None = Field(default=None)


class ProfileKey(SQLModel, table=True):
    """
    Types to represent profiles online
    """
    __tablename__ = "profile_keys"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types
    key: str = Field(primary_key=True,nullable=False,default=None)
    owner: UUID | None = Field(default=uuid4())
    expires: datetime | None = Field(default=None)
    payload: Dict[str, Any] | None = Field(default_factory=dict,sa_column=Column(JSON))
