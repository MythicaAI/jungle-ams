# AUTOGENERATED from fileassetkit.schema
#
#
# pylint: disable=unused-import
from sqlalchemy import JSON, TIMESTAMP, Column, func, text
from sqlalchemy.sql.functions import now as sql_now
from sqlmodel import Field, SQLModel
from pydantic import ConfigDict
from typing import Any, Dict
from datetime import datetime
from uuid import UUID, uuid4



class Topology(SQLModel, table=True):
    """
    Provides a grouping for asset graphs
    """
    __tablename__ = "topologies"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types
    topology_id: int = Field(primary_key=True,nullable=False,default=0)
    owner_id: UUID = Field(default=uuid4())
    org_id: UUID | None = Field(default=uuid4())
    created: datetime | None = Field(sa_type=TIMESTAMP(timezone=True),sa_column_kwargs={'server_default': sql_now(), 'nullable': False},default=None)
    updated: datetime | None = Field(default=None,sa_type=TIMESTAMP(timezone=True),sa_column_kwargs={'server_onupdate': sql_now(), 'nullable': True})
    name: str | None = Field(default=None)
    description: str | None = Field(default=None)
    edge_data_schema: Dict[str, Any] | None = Field(default_factory=dict,sa_column=Column(JSON))


class AssetRef(SQLModel, table=True):
    """
    Records relationships between assets
    """
    __tablename__ = "asset_refs"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types
    topology_id: int = Field(primary_key=True,nullable=False,default=0)
    src_id: UUID = Field(primary_key=True,nullable=False,default_factory=uuid4)
    dst_id: UUID = Field(primary_key=True,nullable=False,default_factory=uuid4)
    edge_data: Dict[str, Any] | None = Field(default_factory=dict,sa_column=Column(JSON))
