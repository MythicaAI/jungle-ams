# AUTOGENERATED from fileassetkit.schema
#
#
from sqlalchemy import JSON, TIMESTAMP, Column, func, text
from sqlalchemy.sql.functions import now as sql_now
from sqlmodel import Field, SQLModel, create_engine, Session
from pydantic import ConfigDict
from typing import Any, Dict
from datetime import datetime
from uuid import UUID, uuid4



class Event(SQLModel, table=True):
    """
    Storage for events that are used to trigger downstream effects
    """
    __tablename__ = "events"
    model_config = ConfigDict(arbitrary_types_allowed=True)  # JSON types
    id: UUID = Field(primary_key=True, default_factory=uuid4, nullable=False)
    event_type: str = None
    queued: datetime | None = Field(sa_type=TIMESTAMP(timezone=True), sa_column_kwargs={'server_default': sql_now(), 'nullable': False})
    acked: datetime | None = None
    completed: datetime | None = None
    job_data: Dict[str, Any] = Field(default_factory=dict, sa_column=Column(JSON))
    owner: UUID | None = Field(foreign_key='profiles.id')
    created_in: str | None = None
    affinity: str | None = None
