{{- $componentContext := .Values.api.packager -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $componentContext.name }}
  namespace: {{ .Values.namespace }}
spec:
  replicas: 2
  strategy:
    {{- include "api.rolloutStrategy" . | nindent 4 }}
  selector:
    matchLabels:
      app: {{ $componentContext.name }}
  template:
    metadata:
      labels:
        {{- include "api.commonLabels" . | nindent 8 }}
        {{- include "api.componentLabels" $componentContext | nindent 8 }}
    spec:
      {{- include "api.nodeSelector" $componentContext | nindent 6 }}
      terminationGracePeriodSeconds: {{ $componentContext.terminationGracePeriodSeconds }}
      serviceAccountName: api
      containers:
        - name: packager
          image: {{ include "api.image" (list . "mythica-packager") }}
          imagePullPolicy: Always
          resources:
            requests:
              memory: "128Mi"
              cpu: "500m"
          env:
            - name: MYTHICA_ENVIRONMENT
              value: "{{ .Values.release }}"
            - name: SQL_URL
              valueFrom:
                secretKeyRef:
                  name: secrets
                  key: SQL_ASYNC_URL
            - name: PACKAGER_ENDPOINT
              value: "http://app.{{ .Values.namespace }}:80"
            - name: APP_VERSION
              value: {{ include "api.imageVersion" (list . "mythica-packager") }}
            - name: MYTHICA_LOCATION
              value: "{{ .Values.location }}"
            - name: K8S_CLUSTER_NAME
              value: "{{ .Values.location }}"
            - name: MYTHICA_API_KEY
              valueFrom:
                secretKeyRef:
                  name: packager-secrets
                  key: MYTHICA_API_KEY
            - name: NATS_ENDPOINT
              value: nats://nats.nats:4222
          volumeMounts:
            - name: ephemeral-packaged-content
              mountPath: /tmp
              readOnly: false
      volumes:
        - name: ephemeral-packaged-content
          emptyDir: { }
      restartPolicy: Always
